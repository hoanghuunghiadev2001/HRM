generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum Sex {
  MALE
  FEMALE
}

enum WorkStatus {
  OFFICIAL
  PROBATION
  RESIGNED
}

enum LeaveTypeEnum {
  PN
  NB
  PC
  PT
  Cgt
  PB
  TS
  PR
}

enum LeaveStatus {
  pending
  approved
  rejected
}

enum ProposalStatus {
  pending_signatures
  waiting_approval
  approved
  rejected
}

// Model mới để lưu file trực tiếp vào DB
model File {
  id        Int      @id @default(autoincrement())
  filename  String // Tên file gốc
  mimeType  String // Loại file (application/pdf, etc.)
  fileSize  Int // Kích thước file (bytes)
  data      Bytes // Dữ liệu file nhị phân
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  proposals Proposal[]

  @@index([createdAt])
}

model Employee {
  id           Int       @id @default(autoincrement())
  employeeCode String    @unique
  name         String
  gender       Sex       @default(MALE)
  birthDate    DateTime?
  password     String
  role         Role      @default(USER)
  avatar       String?
  isActive     Boolean   @default(true)
  managerId    Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  manager      Employee?  @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates Employee[] @relation("EmployeeManager")

  departmentHeadOf     Department? @relation("DepartmentHead")
  departmentDirectorOf Department? @relation("DepartmentDirector")

  workInfo     WorkInfo?
  personalInfo PersonalInfo?
  contactInfo  ContactInfo?
  otherInfo    OtherInfo?

  LeaveRequest       LeaveRequest[]
  LeaveApprovalSteps LeaveApprovalStepApprover[] @relation("ApproverSteps")
  Attendance         Attendance[]
  KPIEmployee        KPIEmployee[]

  proposalsCreated   Proposal[]         @relation("ProposalCreatedBy")
  proposalsProposed  Proposal[]         @relation("ProposalProposer")
  proposalSignatures ProposalSigner[]
  proposalApprovals  ProposalApprover[]

  @@index([employeeCode])
  @@index([managerId])
}

model Department {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  abbreviation String   @unique
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  headId     Int? @unique
  directorId Int? @unique

  head     Employee? @relation("DepartmentHead", fields: [headId], references: [id])
  director Employee? @relation("DepartmentDirector", fields: [directorId], references: [id])

  positions Position[]
  workInfos WorkInfo[]
}

model Position {
  id           Int     @id @default(autoincrement())
  name         String
  level        Int     @default(1)
  description  String?
  departmentId Int

  department Department @relation(fields: [departmentId], references: [id])
  employees  WorkInfo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([departmentId])
}

model WorkInfo {
  id           Int  @id @default(autoincrement())
  departmentId Int?
  positionId   Int?

  department Department? @relation(fields: [departmentId], references: [id])
  position   Position?   @relation(fields: [positionId], references: [id])

  specialization  String?
  joinedTBD       DateTime?
  joinedTeSCC     DateTime?
  seniorityStart  DateTime?
  seniority       String?
  contractNumber  String?
  contractDate    DateTime?
  contractType    String?
  contractEndDate DateTime?

  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([departmentId])
  @@index([positionId])
}

model PersonalInfo {
  id                Int       @id @default(autoincrement())
  identityNumber    String?   @unique
  issueDate         DateTime?
  issuePlace        String?
  hometown          String?
  idAddress         String?
  education         String?
  drivingLicense    String?
  toyotaCertificate String?
  taxCode           String?   @unique
  insuranceNumber   String?   @unique
  insuranceSalary   Int?

  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model ContactInfo {
  id            Int     @id @default(autoincrement())
  phoneNumber   String? @unique
  relativePhone String?
  companyPhone  String?
  email         String? @unique

  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model OtherInfo {
  id               Int        @id @default(autoincrement())
  workStatus       WorkStatus @default(OFFICIAL)
  resignedDate     DateTime?
  documentsChecked String?
  updatedAt        DateTime   @updatedAt
  VCB              String?
  MTCV             String?
  PNJ              String?

  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model LeaveRequest {
  id         Int           @id @default(autoincrement())
  employeeId Int
  leaveType  LeaveTypeEnum
  startDate  DateTime
  endDate    DateTime
  totalHours Float?
  reason     String?
  status     LeaveStatus   @default(pending)
  approvedBy String?
  approvedAt DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  employee      Employee            @relation(fields: [employeeId], references: [id])
  approvalSteps LeaveApprovalStep[]

  @@index([employeeId])
  @@index([status])
  @@index([startDate, endDate])
}

model LeaveApprovalStep {
  id             Int         @id @default(autoincrement())
  leaveRequestId Int
  level          Int
  status         LeaveStatus @default(pending)
  approvedAt     DateTime?

  leaveRequest LeaveRequest                @relation(fields: [leaveRequestId], references: [id], onDelete: Cascade)
  approvers    LeaveApprovalStepApprover[]

  @@unique([leaveRequestId, level])
}

model LeaveApprovalStepApprover {
  id                  Int         @id @default(autoincrement())
  leaveApprovalStepId Int
  approverId          Int
  status              LeaveStatus @default(pending)
  approvedAt          DateTime?

  leaveApprovalStep LeaveApprovalStep @relation(fields: [leaveApprovalStepId], references: [id], onDelete: Cascade)
  approver          Employee          @relation("ApproverSteps", fields: [approverId], references: [id])

  @@unique([leaveApprovalStepId, approverId])
}

model Attendance {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  date         DateTime  @db.Date
  checkInTime  DateTime?
  checkOutTime DateTime?
  workingHours Float?

  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
  @@index([date])
}

model KPI {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  period    String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kpiEmployees KPIEmployee[]
}

model KPIEmployee {
  id         Int      @id @default(autoincrement())
  kpiId      Int
  employeeId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  kpi      KPI        @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  employee Employee   @relation(fields: [employeeId], references: [id])
  entries  KPIEntry[]

  @@unique([kpiId, employeeId])
}

model KPIEntry {
  id            Int      @id @default(autoincrement())
  kpiEmployeeId Int
  name          String
  targetValue   Float
  achievedValue Float    @default(0)
  isAchieved    Boolean  @default(false)
  weight        Float    @default(1.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  kpiEmployee KPIEmployee @relation(fields: [kpiEmployeeId], references: [id], onDelete: Cascade)

  @@unique([kpiEmployeeId, name])
}

model Proposal {
  id          Int            @id @default(autoincrement())
  name        String
  title       String
  description String?
  fileId      Int? // Liên kết với model File mới
  status      ProposalStatus @default(pending_signatures)
  proposerId  Int
  createdById Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  proposer  Employee @relation("ProposalProposer", fields: [proposerId], references: [id])
  createdBy Employee @relation("ProposalCreatedBy", fields: [createdById], references: [id])
  file      File?    @relation(fields: [fileId], references: [id]) // Relation với File

  signers   ProposalSigner[]
  approvers ProposalApprover[]

  @@index([status])
  @@index([proposerId])
  @@index([createdById])
  @@index([fileId])
}

model ProposalSigner {
  id         Int         @id @default(autoincrement())
  proposalId Int
  signerId   Int
  status     LeaveStatus @default(pending)
  signedAt   DateTime?

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  signer   Employee @relation(fields: [signerId], references: [id])

  @@unique([proposalId, signerId])
}

model ProposalApprover {
  id         Int         @id @default(autoincrement())
  proposalId Int
  approverId Int
  status     LeaveStatus @default(pending)
  approvedAt DateTime?

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  approver Employee @relation(fields: [approverId], references: [id])

  @@unique([proposalId, approverId])
}
