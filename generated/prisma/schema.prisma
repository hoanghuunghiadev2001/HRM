generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum Sex {
  MALE
  FEMALE
}

enum WorkStatus {
  OFFICIAL
  PROBATION
  RESIGNED
}

enum LeaveTypeEnum {
  PN
  NB
  PC
  PT
  Cgt
  PB
  TS
  PR
}

enum LeaveStatus {
  pending
  approved
  rejected
}

model Employee {
  id           Int       @id @default(autoincrement())
  employeeCode String    @unique
  name         String
  gender       Sex       @default(MALE)
  birthDate    DateTime?
  password     String
  role         Role      @default(USER)
  avatar       String?
  isActive     Boolean   @default(false)

  managerId    Int?
  manager      Employee?  @relation("EmployeeManager", fields: [managerId], references: [id])
  subordinates Employee[] @relation("EmployeeManager")

  departmentHeadOf     Department? @relation("DepartmentHead")
  departmentDirectorOf Department? @relation("DepartmentDirector")

  workInfo     WorkInfo?
  personalInfo PersonalInfo?
  contactInfo  ContactInfo?
  otherInfo    OtherInfo?

  LeaveRequest       LeaveRequest[]
  LeaveApprovalSteps LeaveApprovalStepApprover[] @relation("ApproverSteps")

  Attendance  Attendance[]
  KPIEmployee KPIEmployee[]
}

model Department {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  abbreviation String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  headId     Int? @unique
  directorId Int? @unique

  head     Employee? @relation("DepartmentHead", fields: [headId], references: [id])
  director Employee? @relation("DepartmentDirector", fields: [directorId], references: [id])

  positions Position[]
  workInfos WorkInfo[]
}

model Position {
  id           Int        @id @default(autoincrement())
  name         String
  level        Int        @default(1)
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  employees    WorkInfo[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model WorkInfo {
  id           Int  @id @default(autoincrement())
  departmentId Int?
  positionId   Int?

  department Department? @relation(fields: [departmentId], references: [id])
  position   Position?   @relation(fields: [positionId], references: [id])

  specialization  String?
  joinedTBD       DateTime?
  joinedTeSCC     DateTime?
  seniorityStart  DateTime?
  seniority       String?
  contractNumber  String?
  contractDate    DateTime?
  contractType    String?
  contractEndDate DateTime?

  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], map: "WorkInfo_employee_fkey")
}

model PersonalInfo {
  id                Int       @id @default(autoincrement())
  identityNumber    String?
  issueDate         DateTime?
  issuePlace        String?
  hometown          String?
  idAddress         String?
  education         String?
  drivingLicense    String?
  toyotaCertificate String?
  taxCode           String?
  insuranceNumber   String?
  insuranceSalary   Int?

  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], map: "PersonalInfo_employee_fkey")
}

model ContactInfo {
  id            Int     @id @default(autoincrement())
  phoneNumber   String?
  relativePhone String?
  companyPhone  String?
  email         String?

  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], map: "ContactInfo_employee_fkey")
}

model OtherInfo {
  id               Int        @id @default(autoincrement())
  workStatus       WorkStatus @default(OFFICIAL)
  resignedDate     DateTime?
  documentsChecked String?
  updatedAt        DateTime?
  VCB              String?
  MTCV             String?
  PNJ              String?

  employeeId Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id], map: "OtherInfo_employee_fkey")
}

model LeaveRequest {
  id         Int           @id @default(autoincrement())
  employeeId Int
  leaveType  LeaveTypeEnum
  startDate  DateTime
  endDate    DateTime
  totalHours Float?
  reason     String?
  status     LeaveStatus   @default(pending)
  approvedBy String?
  approvedAt DateTime?
  createdAt  DateTime      @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])

  approvalSteps LeaveApprovalStep[]
}

model LeaveApprovalStep {
  id             Int         @id @default(autoincrement())
  leaveRequestId Int
  level          Int
  status         LeaveStatus @default(pending)
  approvedAt     DateTime?

  leaveRequest LeaveRequest                @relation(fields: [leaveRequestId], references: [id])
  approvers    LeaveApprovalStepApprover[]

  @@unique([leaveRequestId, level])
}

model LeaveApprovalStepApprover {
  id                  Int         @id @default(autoincrement())
  leaveApprovalStepId Int
  approverId          Int
  status              LeaveStatus @default(pending)
  approvedAt          DateTime?

  leaveApprovalStep LeaveApprovalStep @relation(fields: [leaveApprovalStepId], references: [id])
  approver          Employee          @relation("ApproverSteps", fields: [approverId], references: [id])

  @@unique([leaveApprovalStepId, approverId])
}

model Attendance {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  date         DateTime
  checkInTime  DateTime?
  checkOutTime DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId, date])
}

model KPI {
  id        Int      @id @default(autoincrement())
  name      String
  period    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kpiEmployees KPIEmployee[]
}

model KPIEmployee {
  id         Int @id @default(autoincrement())
  kpiId      Int
  employeeId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kpi      KPI      @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id])

  entries KPIEntry[]

  @@unique([kpiId, employeeId])
}

model KPIEntry {
  id            Int     @id @default(autoincrement())
  kpiEmployeeId Int
  name          String
  targetValue   Float
  achievedValue Float   @default(0)
  isAchieved    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kpiEmployee KPIEmployee @relation(fields: [kpiEmployeeId], references: [id], onDelete: Cascade)

  @@unique([kpiEmployeeId, name])
}
