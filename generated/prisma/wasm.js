
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  employeeCode: 'employeeCode',
  name: 'name',
  gender: 'gender',
  birthDate: 'birthDate',
  password: 'password',
  role: 'role',
  avatar: 'avatar'
};

exports.Prisma.WorkInfoScalarFieldEnum = {
  id: 'id',
  department: 'department',
  position: 'position',
  specialization: 'specialization',
  joinedTBD: 'joinedTBD',
  joinedTeSCC: 'joinedTeSCC',
  seniorityStart: 'seniorityStart',
  seniority: 'seniority',
  contractNumber: 'contractNumber',
  contractDate: 'contractDate',
  contractType: 'contractType',
  contractEndDate: 'contractEndDate',
  employeeId: 'employeeId'
};

exports.Prisma.PersonalInfoScalarFieldEnum = {
  id: 'id',
  identityNumber: 'identityNumber',
  issueDate: 'issueDate',
  issuePlace: 'issuePlace',
  hometown: 'hometown',
  idAddress: 'idAddress',
  education: 'education',
  drivingLicense: 'drivingLicense',
  toyotaCertificate: 'toyotaCertificate',
  taxCode: 'taxCode',
  insuranceNumber: 'insuranceNumber',
  insuranceSalary: 'insuranceSalary',
  employeeId: 'employeeId'
};

exports.Prisma.ContactInfoScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  relativePhone: 'relativePhone',
  companyPhone: 'companyPhone',
  email: 'email',
  employeeId: 'employeeId'
};

exports.Prisma.OtherInfoScalarFieldEnum = {
  id: 'id',
  workStatus: 'workStatus',
  resignedDate: 'resignedDate',
  documentsChecked: 'documentsChecked',
  updatedAt: 'updatedAt',
  VCB: 'VCB',
  MTCV: 'MTCV',
  PNJ: 'PNJ',
  employeeId: 'employeeId'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  leaveType: 'leaveType',
  startDate: 'startDate',
  endDate: 'endDate',
  totalHours: 'totalHours',
  reason: 'reason',
  status: 'status',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  date: 'date',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.EmployeeOrderByRelevanceFieldEnum = {
  employeeCode: 'employeeCode',
  name: 'name',
  password: 'password',
  avatar: 'avatar'
};

exports.Prisma.WorkInfoOrderByRelevanceFieldEnum = {
  department: 'department',
  position: 'position',
  specialization: 'specialization',
  seniority: 'seniority',
  contractNumber: 'contractNumber',
  contractType: 'contractType'
};

exports.Prisma.PersonalInfoOrderByRelevanceFieldEnum = {
  identityNumber: 'identityNumber',
  issuePlace: 'issuePlace',
  hometown: 'hometown',
  idAddress: 'idAddress',
  education: 'education',
  drivingLicense: 'drivingLicense',
  toyotaCertificate: 'toyotaCertificate',
  taxCode: 'taxCode',
  insuranceNumber: 'insuranceNumber'
};

exports.Prisma.ContactInfoOrderByRelevanceFieldEnum = {
  phoneNumber: 'phoneNumber',
  relativePhone: 'relativePhone',
  companyPhone: 'companyPhone',
  email: 'email'
};

exports.Prisma.OtherInfoOrderByRelevanceFieldEnum = {
  documentsChecked: 'documentsChecked',
  VCB: 'VCB',
  MTCV: 'MTCV',
  PNJ: 'PNJ'
};

exports.Prisma.LeaveRequestOrderByRelevanceFieldEnum = {
  reason: 'reason',
  approvedBy: 'approvedBy'
};
exports.Sex = exports.$Enums.Sex = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

exports.WorkStatus = exports.$Enums.WorkStatus = {
  OFFICIAL: 'OFFICIAL',
  PROBATION: 'PROBATION',
  RESIGNED: 'RESIGNED'
};

exports.LeaveTypeEnum = exports.$Enums.LeaveTypeEnum = {
  PN: 'PN',
  NB: 'NB',
  PC: 'PC',
  PT: 'PT',
  Cgt: 'Cgt',
  PB: 'PB',
  TS: 'TS',
  PR: 'PR'
};

exports.LeaveStatus = exports.$Enums.LeaveStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.Prisma.ModelName = {
  Employee: 'Employee',
  WorkInfo: 'WorkInfo',
  PersonalInfo: 'PersonalInfo',
  ContactInfo: 'ContactInfo',
  OtherInfo: 'OtherInfo',
  LeaveRequest: 'LeaveRequest',
  Attendance: 'Attendance'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
