
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Position
 * 
 */
export type Position = $Result.DefaultSelection<Prisma.$PositionPayload>
/**
 * Model WorkInfo
 * 
 */
export type WorkInfo = $Result.DefaultSelection<Prisma.$WorkInfoPayload>
/**
 * Model PersonalInfo
 * 
 */
export type PersonalInfo = $Result.DefaultSelection<Prisma.$PersonalInfoPayload>
/**
 * Model ContactInfo
 * 
 */
export type ContactInfo = $Result.DefaultSelection<Prisma.$ContactInfoPayload>
/**
 * Model OtherInfo
 * 
 */
export type OtherInfo = $Result.DefaultSelection<Prisma.$OtherInfoPayload>
/**
 * Model LeaveRequest
 * 
 */
export type LeaveRequest = $Result.DefaultSelection<Prisma.$LeaveRequestPayload>
/**
 * Model LeaveApprovalStep
 * 
 */
export type LeaveApprovalStep = $Result.DefaultSelection<Prisma.$LeaveApprovalStepPayload>
/**
 * Model LeaveApprovalStepApprover
 * 
 */
export type LeaveApprovalStepApprover = $Result.DefaultSelection<Prisma.$LeaveApprovalStepApproverPayload>
/**
 * Model Attendance
 * 
 */
export type Attendance = $Result.DefaultSelection<Prisma.$AttendancePayload>
/**
 * Model KPI
 * 
 */
export type KPI = $Result.DefaultSelection<Prisma.$KPIPayload>
/**
 * Model KPIEmployee
 * 
 */
export type KPIEmployee = $Result.DefaultSelection<Prisma.$KPIEmployeePayload>
/**
 * Model KPIEntry
 * 
 */
export type KPIEntry = $Result.DefaultSelection<Prisma.$KPIEntryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Sex: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type Sex = (typeof Sex)[keyof typeof Sex]


export const WorkStatus: {
  OFFICIAL: 'OFFICIAL',
  PROBATION: 'PROBATION',
  RESIGNED: 'RESIGNED'
};

export type WorkStatus = (typeof WorkStatus)[keyof typeof WorkStatus]


export const LeaveTypeEnum: {
  PN: 'PN',
  NB: 'NB',
  PC: 'PC',
  PT: 'PT',
  Cgt: 'Cgt',
  PB: 'PB',
  TS: 'TS',
  PR: 'PR'
};

export type LeaveTypeEnum = (typeof LeaveTypeEnum)[keyof typeof LeaveTypeEnum]


export const LeaveStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type LeaveStatus = (typeof LeaveStatus)[keyof typeof LeaveStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Sex = $Enums.Sex

export const Sex: typeof $Enums.Sex

export type WorkStatus = $Enums.WorkStatus

export const WorkStatus: typeof $Enums.WorkStatus

export type LeaveTypeEnum = $Enums.LeaveTypeEnum

export const LeaveTypeEnum: typeof $Enums.LeaveTypeEnum

export type LeaveStatus = $Enums.LeaveStatus

export const LeaveStatus: typeof $Enums.LeaveStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Employees
 * const employees = await prisma.employee.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Employees
   * const employees = await prisma.employee.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.position`: Exposes CRUD operations for the **Position** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Positions
    * const positions = await prisma.position.findMany()
    * ```
    */
  get position(): Prisma.PositionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workInfo`: Exposes CRUD operations for the **WorkInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkInfos
    * const workInfos = await prisma.workInfo.findMany()
    * ```
    */
  get workInfo(): Prisma.WorkInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.personalInfo`: Exposes CRUD operations for the **PersonalInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PersonalInfos
    * const personalInfos = await prisma.personalInfo.findMany()
    * ```
    */
  get personalInfo(): Prisma.PersonalInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactInfo`: Exposes CRUD operations for the **ContactInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactInfos
    * const contactInfos = await prisma.contactInfo.findMany()
    * ```
    */
  get contactInfo(): Prisma.ContactInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.otherInfo`: Exposes CRUD operations for the **OtherInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OtherInfos
    * const otherInfos = await prisma.otherInfo.findMany()
    * ```
    */
  get otherInfo(): Prisma.OtherInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leaveRequest`: Exposes CRUD operations for the **LeaveRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveRequests
    * const leaveRequests = await prisma.leaveRequest.findMany()
    * ```
    */
  get leaveRequest(): Prisma.LeaveRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leaveApprovalStep`: Exposes CRUD operations for the **LeaveApprovalStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveApprovalSteps
    * const leaveApprovalSteps = await prisma.leaveApprovalStep.findMany()
    * ```
    */
  get leaveApprovalStep(): Prisma.LeaveApprovalStepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leaveApprovalStepApprover`: Exposes CRUD operations for the **LeaveApprovalStepApprover** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveApprovalStepApprovers
    * const leaveApprovalStepApprovers = await prisma.leaveApprovalStepApprover.findMany()
    * ```
    */
  get leaveApprovalStepApprover(): Prisma.LeaveApprovalStepApproverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **Attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.AttendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kPI`: Exposes CRUD operations for the **KPI** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KPIS
    * const kPIS = await prisma.kPI.findMany()
    * ```
    */
  get kPI(): Prisma.KPIDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kPIEmployee`: Exposes CRUD operations for the **KPIEmployee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KPIEmployees
    * const kPIEmployees = await prisma.kPIEmployee.findMany()
    * ```
    */
  get kPIEmployee(): Prisma.KPIEmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kPIEntry`: Exposes CRUD operations for the **KPIEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KPIEntries
    * const kPIEntries = await prisma.kPIEntry.findMany()
    * ```
    */
  get kPIEntry(): Prisma.KPIEntryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.1
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Employee: 'Employee',
    Department: 'Department',
    Position: 'Position',
    WorkInfo: 'WorkInfo',
    PersonalInfo: 'PersonalInfo',
    ContactInfo: 'ContactInfo',
    OtherInfo: 'OtherInfo',
    LeaveRequest: 'LeaveRequest',
    LeaveApprovalStep: 'LeaveApprovalStep',
    LeaveApprovalStepApprover: 'LeaveApprovalStepApprover',
    Attendance: 'Attendance',
    KPI: 'KPI',
    KPIEmployee: 'KPIEmployee',
    KPIEntry: 'KPIEntry'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "employee" | "department" | "position" | "workInfo" | "personalInfo" | "contactInfo" | "otherInfo" | "leaveRequest" | "leaveApprovalStep" | "leaveApprovalStepApprover" | "attendance" | "kPI" | "kPIEmployee" | "kPIEntry"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Position: {
        payload: Prisma.$PositionPayload<ExtArgs>
        fields: Prisma.PositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findFirst: {
            args: Prisma.PositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findMany: {
            args: Prisma.PositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          create: {
            args: Prisma.PositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          createMany: {
            args: Prisma.PositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PositionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          delete: {
            args: Prisma.PositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          update: {
            args: Prisma.PositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          deleteMany: {
            args: Prisma.PositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PositionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          upsert: {
            args: Prisma.PositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          aggregate: {
            args: Prisma.PositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePosition>
          }
          groupBy: {
            args: Prisma.PositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PositionCountArgs<ExtArgs>
            result: $Utils.Optional<PositionCountAggregateOutputType> | number
          }
        }
      }
      WorkInfo: {
        payload: Prisma.$WorkInfoPayload<ExtArgs>
        fields: Prisma.WorkInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>
          }
          findFirst: {
            args: Prisma.WorkInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>
          }
          findMany: {
            args: Prisma.WorkInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>[]
          }
          create: {
            args: Prisma.WorkInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>
          }
          createMany: {
            args: Prisma.WorkInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>[]
          }
          delete: {
            args: Prisma.WorkInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>
          }
          update: {
            args: Prisma.WorkInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>
          }
          deleteMany: {
            args: Prisma.WorkInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>[]
          }
          upsert: {
            args: Prisma.WorkInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkInfoPayload>
          }
          aggregate: {
            args: Prisma.WorkInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkInfo>
          }
          groupBy: {
            args: Prisma.WorkInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkInfoCountArgs<ExtArgs>
            result: $Utils.Optional<WorkInfoCountAggregateOutputType> | number
          }
        }
      }
      PersonalInfo: {
        payload: Prisma.$PersonalInfoPayload<ExtArgs>
        fields: Prisma.PersonalInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonalInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonalInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          findFirst: {
            args: Prisma.PersonalInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonalInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          findMany: {
            args: Prisma.PersonalInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>[]
          }
          create: {
            args: Prisma.PersonalInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          createMany: {
            args: Prisma.PersonalInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonalInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>[]
          }
          delete: {
            args: Prisma.PersonalInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          update: {
            args: Prisma.PersonalInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          deleteMany: {
            args: Prisma.PersonalInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonalInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonalInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>[]
          }
          upsert: {
            args: Prisma.PersonalInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonalInfoPayload>
          }
          aggregate: {
            args: Prisma.PersonalInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonalInfo>
          }
          groupBy: {
            args: Prisma.PersonalInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonalInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonalInfoCountArgs<ExtArgs>
            result: $Utils.Optional<PersonalInfoCountAggregateOutputType> | number
          }
        }
      }
      ContactInfo: {
        payload: Prisma.$ContactInfoPayload<ExtArgs>
        fields: Prisma.ContactInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>
          }
          findFirst: {
            args: Prisma.ContactInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>
          }
          findMany: {
            args: Prisma.ContactInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>[]
          }
          create: {
            args: Prisma.ContactInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>
          }
          createMany: {
            args: Prisma.ContactInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>[]
          }
          delete: {
            args: Prisma.ContactInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>
          }
          update: {
            args: Prisma.ContactInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>
          }
          deleteMany: {
            args: Prisma.ContactInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>[]
          }
          upsert: {
            args: Prisma.ContactInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactInfoPayload>
          }
          aggregate: {
            args: Prisma.ContactInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactInfo>
          }
          groupBy: {
            args: Prisma.ContactInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactInfoCountArgs<ExtArgs>
            result: $Utils.Optional<ContactInfoCountAggregateOutputType> | number
          }
        }
      }
      OtherInfo: {
        payload: Prisma.$OtherInfoPayload<ExtArgs>
        fields: Prisma.OtherInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtherInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtherInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>
          }
          findFirst: {
            args: Prisma.OtherInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtherInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>
          }
          findMany: {
            args: Prisma.OtherInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>[]
          }
          create: {
            args: Prisma.OtherInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>
          }
          createMany: {
            args: Prisma.OtherInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OtherInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>[]
          }
          delete: {
            args: Prisma.OtherInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>
          }
          update: {
            args: Prisma.OtherInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>
          }
          deleteMany: {
            args: Prisma.OtherInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtherInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OtherInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>[]
          }
          upsert: {
            args: Prisma.OtherInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtherInfoPayload>
          }
          aggregate: {
            args: Prisma.OtherInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtherInfo>
          }
          groupBy: {
            args: Prisma.OtherInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtherInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtherInfoCountArgs<ExtArgs>
            result: $Utils.Optional<OtherInfoCountAggregateOutputType> | number
          }
        }
      }
      LeaveRequest: {
        payload: Prisma.$LeaveRequestPayload<ExtArgs>
        fields: Prisma.LeaveRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findFirst: {
            args: Prisma.LeaveRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          findMany: {
            args: Prisma.LeaveRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          create: {
            args: Prisma.LeaveRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          createMany: {
            args: Prisma.LeaveRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          delete: {
            args: Prisma.LeaveRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          update: {
            args: Prisma.LeaveRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          deleteMany: {
            args: Prisma.LeaveRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeaveRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>[]
          }
          upsert: {
            args: Prisma.LeaveRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveRequestPayload>
          }
          aggregate: {
            args: Prisma.LeaveRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveRequest>
          }
          groupBy: {
            args: Prisma.LeaveRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveRequestCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestCountAggregateOutputType> | number
          }
        }
      }
      LeaveApprovalStep: {
        payload: Prisma.$LeaveApprovalStepPayload<ExtArgs>
        fields: Prisma.LeaveApprovalStepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveApprovalStepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveApprovalStepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>
          }
          findFirst: {
            args: Prisma.LeaveApprovalStepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveApprovalStepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>
          }
          findMany: {
            args: Prisma.LeaveApprovalStepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>[]
          }
          create: {
            args: Prisma.LeaveApprovalStepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>
          }
          createMany: {
            args: Prisma.LeaveApprovalStepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveApprovalStepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>[]
          }
          delete: {
            args: Prisma.LeaveApprovalStepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>
          }
          update: {
            args: Prisma.LeaveApprovalStepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>
          }
          deleteMany: {
            args: Prisma.LeaveApprovalStepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveApprovalStepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeaveApprovalStepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>[]
          }
          upsert: {
            args: Prisma.LeaveApprovalStepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepPayload>
          }
          aggregate: {
            args: Prisma.LeaveApprovalStepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveApprovalStep>
          }
          groupBy: {
            args: Prisma.LeaveApprovalStepGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveApprovalStepGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveApprovalStepCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveApprovalStepCountAggregateOutputType> | number
          }
        }
      }
      LeaveApprovalStepApprover: {
        payload: Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>
        fields: Prisma.LeaveApprovalStepApproverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveApprovalStepApproverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveApprovalStepApproverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>
          }
          findFirst: {
            args: Prisma.LeaveApprovalStepApproverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveApprovalStepApproverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>
          }
          findMany: {
            args: Prisma.LeaveApprovalStepApproverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>[]
          }
          create: {
            args: Prisma.LeaveApprovalStepApproverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>
          }
          createMany: {
            args: Prisma.LeaveApprovalStepApproverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeaveApprovalStepApproverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>[]
          }
          delete: {
            args: Prisma.LeaveApprovalStepApproverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>
          }
          update: {
            args: Prisma.LeaveApprovalStepApproverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>
          }
          deleteMany: {
            args: Prisma.LeaveApprovalStepApproverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveApprovalStepApproverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeaveApprovalStepApproverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>[]
          }
          upsert: {
            args: Prisma.LeaveApprovalStepApproverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaveApprovalStepApproverPayload>
          }
          aggregate: {
            args: Prisma.LeaveApprovalStepApproverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveApprovalStepApprover>
          }
          groupBy: {
            args: Prisma.LeaveApprovalStepApproverGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveApprovalStepApproverGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveApprovalStepApproverCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveApprovalStepApproverCountAggregateOutputType> | number
          }
        }
      }
      Attendance: {
        payload: Prisma.$AttendancePayload<ExtArgs>
        fields: Prisma.AttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findFirst: {
            args: Prisma.AttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findMany: {
            args: Prisma.AttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          create: {
            args: Prisma.AttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          createMany: {
            args: Prisma.AttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          delete: {
            args: Prisma.AttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          update: {
            args: Prisma.AttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          deleteMany: {
            args: Prisma.AttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          upsert: {
            args: Prisma.AttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.AttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      KPI: {
        payload: Prisma.$KPIPayload<ExtArgs>
        fields: Prisma.KPIFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KPIFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KPIFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          findFirst: {
            args: Prisma.KPIFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KPIFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          findMany: {
            args: Prisma.KPIFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>[]
          }
          create: {
            args: Prisma.KPICreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          createMany: {
            args: Prisma.KPICreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KPICreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>[]
          }
          delete: {
            args: Prisma.KPIDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          update: {
            args: Prisma.KPIUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          deleteMany: {
            args: Prisma.KPIDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KPIUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KPIUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>[]
          }
          upsert: {
            args: Prisma.KPIUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          aggregate: {
            args: Prisma.KPIAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKPI>
          }
          groupBy: {
            args: Prisma.KPIGroupByArgs<ExtArgs>
            result: $Utils.Optional<KPIGroupByOutputType>[]
          }
          count: {
            args: Prisma.KPICountArgs<ExtArgs>
            result: $Utils.Optional<KPICountAggregateOutputType> | number
          }
        }
      }
      KPIEmployee: {
        payload: Prisma.$KPIEmployeePayload<ExtArgs>
        fields: Prisma.KPIEmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KPIEmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KPIEmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>
          }
          findFirst: {
            args: Prisma.KPIEmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KPIEmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>
          }
          findMany: {
            args: Prisma.KPIEmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>[]
          }
          create: {
            args: Prisma.KPIEmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>
          }
          createMany: {
            args: Prisma.KPIEmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KPIEmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>[]
          }
          delete: {
            args: Prisma.KPIEmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>
          }
          update: {
            args: Prisma.KPIEmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>
          }
          deleteMany: {
            args: Prisma.KPIEmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KPIEmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KPIEmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>[]
          }
          upsert: {
            args: Prisma.KPIEmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEmployeePayload>
          }
          aggregate: {
            args: Prisma.KPIEmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKPIEmployee>
          }
          groupBy: {
            args: Prisma.KPIEmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<KPIEmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.KPIEmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<KPIEmployeeCountAggregateOutputType> | number
          }
        }
      }
      KPIEntry: {
        payload: Prisma.$KPIEntryPayload<ExtArgs>
        fields: Prisma.KPIEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KPIEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KPIEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>
          }
          findFirst: {
            args: Prisma.KPIEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KPIEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>
          }
          findMany: {
            args: Prisma.KPIEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>[]
          }
          create: {
            args: Prisma.KPIEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>
          }
          createMany: {
            args: Prisma.KPIEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KPIEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>[]
          }
          delete: {
            args: Prisma.KPIEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>
          }
          update: {
            args: Prisma.KPIEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>
          }
          deleteMany: {
            args: Prisma.KPIEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KPIEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KPIEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>[]
          }
          upsert: {
            args: Prisma.KPIEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIEntryPayload>
          }
          aggregate: {
            args: Prisma.KPIEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKPIEntry>
          }
          groupBy: {
            args: Prisma.KPIEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<KPIEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.KPIEntryCountArgs<ExtArgs>
            result: $Utils.Optional<KPIEntryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    employee?: EmployeeOmit
    department?: DepartmentOmit
    position?: PositionOmit
    workInfo?: WorkInfoOmit
    personalInfo?: PersonalInfoOmit
    contactInfo?: ContactInfoOmit
    otherInfo?: OtherInfoOmit
    leaveRequest?: LeaveRequestOmit
    leaveApprovalStep?: LeaveApprovalStepOmit
    leaveApprovalStepApprover?: LeaveApprovalStepApproverOmit
    attendance?: AttendanceOmit
    kPI?: KPIOmit
    kPIEmployee?: KPIEmployeeOmit
    kPIEntry?: KPIEntryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    subordinates: number
    LeaveRequest: number
    LeaveApprovalSteps: number
    Attendance: number
    KPIEmployee: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subordinates?: boolean | EmployeeCountOutputTypeCountSubordinatesArgs
    LeaveRequest?: boolean | EmployeeCountOutputTypeCountLeaveRequestArgs
    LeaveApprovalSteps?: boolean | EmployeeCountOutputTypeCountLeaveApprovalStepsArgs
    Attendance?: boolean | EmployeeCountOutputTypeCountAttendanceArgs
    KPIEmployee?: boolean | EmployeeCountOutputTypeCountKPIEmployeeArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountSubordinatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountLeaveRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountLeaveApprovalStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveApprovalStepApproverWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountKPIEmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIEmployeeWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    positions: number
    workInfos: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    positions?: boolean | DepartmentCountOutputTypeCountPositionsArgs
    workInfos?: boolean | DepartmentCountOutputTypeCountWorkInfosArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountPositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountWorkInfosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkInfoWhereInput
  }


  /**
   * Count Type PositionCountOutputType
   */

  export type PositionCountOutputType = {
    employees: number
  }

  export type PositionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employees?: boolean | PositionCountOutputTypeCountEmployeesArgs
  }

  // Custom InputTypes
  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PositionCountOutputType
     */
    select?: PositionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PositionCountOutputType without action
   */
  export type PositionCountOutputTypeCountEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkInfoWhereInput
  }


  /**
   * Count Type LeaveRequestCountOutputType
   */

  export type LeaveRequestCountOutputType = {
    approvalSteps: number
  }

  export type LeaveRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvalSteps?: boolean | LeaveRequestCountOutputTypeCountApprovalStepsArgs
  }

  // Custom InputTypes
  /**
   * LeaveRequestCountOutputType without action
   */
  export type LeaveRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequestCountOutputType
     */
    select?: LeaveRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeaveRequestCountOutputType without action
   */
  export type LeaveRequestCountOutputTypeCountApprovalStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveApprovalStepWhereInput
  }


  /**
   * Count Type LeaveApprovalStepCountOutputType
   */

  export type LeaveApprovalStepCountOutputType = {
    approvers: number
  }

  export type LeaveApprovalStepCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvers?: boolean | LeaveApprovalStepCountOutputTypeCountApproversArgs
  }

  // Custom InputTypes
  /**
   * LeaveApprovalStepCountOutputType without action
   */
  export type LeaveApprovalStepCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepCountOutputType
     */
    select?: LeaveApprovalStepCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeaveApprovalStepCountOutputType without action
   */
  export type LeaveApprovalStepCountOutputTypeCountApproversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveApprovalStepApproverWhereInput
  }


  /**
   * Count Type KPICountOutputType
   */

  export type KPICountOutputType = {
    kpiEmployees: number
  }

  export type KPICountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpiEmployees?: boolean | KPICountOutputTypeCountKpiEmployeesArgs
  }

  // Custom InputTypes
  /**
   * KPICountOutputType without action
   */
  export type KPICountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPICountOutputType
     */
    select?: KPICountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KPICountOutputType without action
   */
  export type KPICountOutputTypeCountKpiEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIEmployeeWhereInput
  }


  /**
   * Count Type KPIEmployeeCountOutputType
   */

  export type KPIEmployeeCountOutputType = {
    entries: number
  }

  export type KPIEmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entries?: boolean | KPIEmployeeCountOutputTypeCountEntriesArgs
  }

  // Custom InputTypes
  /**
   * KPIEmployeeCountOutputType without action
   */
  export type KPIEmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployeeCountOutputType
     */
    select?: KPIEmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KPIEmployeeCountOutputType without action
   */
  export type KPIEmployeeCountOutputTypeCountEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIEntryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
    managerId: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
    managerId: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    employeeCode: string | null
    name: string | null
    gender: $Enums.Sex | null
    birthDate: Date | null
    password: string | null
    role: $Enums.Role | null
    avatar: string | null
    isActive: boolean | null
    managerId: number | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    employeeCode: string | null
    name: string | null
    gender: $Enums.Sex | null
    birthDate: Date | null
    password: string | null
    role: $Enums.Role | null
    avatar: string | null
    isActive: boolean | null
    managerId: number | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    employeeCode: number
    name: number
    gender: number
    birthDate: number
    password: number
    role: number
    avatar: number
    isActive: number
    managerId: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    managerId?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    managerId?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    employeeCode?: true
    name?: true
    gender?: true
    birthDate?: true
    password?: true
    role?: true
    avatar?: true
    isActive?: true
    managerId?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    employeeCode?: true
    name?: true
    gender?: true
    birthDate?: true
    password?: true
    role?: true
    avatar?: true
    isActive?: true
    managerId?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    employeeCode?: true
    name?: true
    gender?: true
    birthDate?: true
    password?: true
    role?: true
    avatar?: true
    isActive?: true
    managerId?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: number
    employeeCode: string
    name: string
    gender: $Enums.Sex
    birthDate: Date | null
    password: string
    role: $Enums.Role
    avatar: string | null
    isActive: boolean
    managerId: number | null
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeCode?: boolean
    name?: boolean
    gender?: boolean
    birthDate?: boolean
    password?: boolean
    role?: boolean
    avatar?: boolean
    isActive?: boolean
    managerId?: boolean
    manager?: boolean | Employee$managerArgs<ExtArgs>
    subordinates?: boolean | Employee$subordinatesArgs<ExtArgs>
    departmentHeadOf?: boolean | Employee$departmentHeadOfArgs<ExtArgs>
    departmentDirectorOf?: boolean | Employee$departmentDirectorOfArgs<ExtArgs>
    workInfo?: boolean | Employee$workInfoArgs<ExtArgs>
    personalInfo?: boolean | Employee$personalInfoArgs<ExtArgs>
    contactInfo?: boolean | Employee$contactInfoArgs<ExtArgs>
    otherInfo?: boolean | Employee$otherInfoArgs<ExtArgs>
    LeaveRequest?: boolean | Employee$LeaveRequestArgs<ExtArgs>
    LeaveApprovalSteps?: boolean | Employee$LeaveApprovalStepsArgs<ExtArgs>
    Attendance?: boolean | Employee$AttendanceArgs<ExtArgs>
    KPIEmployee?: boolean | Employee$KPIEmployeeArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeCode?: boolean
    name?: boolean
    gender?: boolean
    birthDate?: boolean
    password?: boolean
    role?: boolean
    avatar?: boolean
    isActive?: boolean
    managerId?: boolean
    manager?: boolean | Employee$managerArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeCode?: boolean
    name?: boolean
    gender?: boolean
    birthDate?: boolean
    password?: boolean
    role?: boolean
    avatar?: boolean
    isActive?: boolean
    managerId?: boolean
    manager?: boolean | Employee$managerArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    employeeCode?: boolean
    name?: boolean
    gender?: boolean
    birthDate?: boolean
    password?: boolean
    role?: boolean
    avatar?: boolean
    isActive?: boolean
    managerId?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeCode" | "name" | "gender" | "birthDate" | "password" | "role" | "avatar" | "isActive" | "managerId", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Employee$managerArgs<ExtArgs>
    subordinates?: boolean | Employee$subordinatesArgs<ExtArgs>
    departmentHeadOf?: boolean | Employee$departmentHeadOfArgs<ExtArgs>
    departmentDirectorOf?: boolean | Employee$departmentDirectorOfArgs<ExtArgs>
    workInfo?: boolean | Employee$workInfoArgs<ExtArgs>
    personalInfo?: boolean | Employee$personalInfoArgs<ExtArgs>
    contactInfo?: boolean | Employee$contactInfoArgs<ExtArgs>
    otherInfo?: boolean | Employee$otherInfoArgs<ExtArgs>
    LeaveRequest?: boolean | Employee$LeaveRequestArgs<ExtArgs>
    LeaveApprovalSteps?: boolean | Employee$LeaveApprovalStepsArgs<ExtArgs>
    Attendance?: boolean | Employee$AttendanceArgs<ExtArgs>
    KPIEmployee?: boolean | Employee$KPIEmployeeArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Employee$managerArgs<ExtArgs>
  }
  export type EmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | Employee$managerArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      manager: Prisma.$EmployeePayload<ExtArgs> | null
      subordinates: Prisma.$EmployeePayload<ExtArgs>[]
      departmentHeadOf: Prisma.$DepartmentPayload<ExtArgs> | null
      departmentDirectorOf: Prisma.$DepartmentPayload<ExtArgs> | null
      workInfo: Prisma.$WorkInfoPayload<ExtArgs> | null
      personalInfo: Prisma.$PersonalInfoPayload<ExtArgs> | null
      contactInfo: Prisma.$ContactInfoPayload<ExtArgs> | null
      otherInfo: Prisma.$OtherInfoPayload<ExtArgs> | null
      LeaveRequest: Prisma.$LeaveRequestPayload<ExtArgs>[]
      LeaveApprovalSteps: Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>[]
      Attendance: Prisma.$AttendancePayload<ExtArgs>[]
      KPIEmployee: Prisma.$KPIEmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeCode: string
      name: string
      gender: $Enums.Sex
      birthDate: Date | null
      password: string
      role: $Enums.Role
      avatar: string | null
      isActive: boolean
      managerId: number | null
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees and returns the data updated in the database.
     * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    manager<T extends Employee$managerArgs<ExtArgs> = {}>(args?: Subset<T, Employee$managerArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subordinates<T extends Employee$subordinatesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$subordinatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departmentHeadOf<T extends Employee$departmentHeadOfArgs<ExtArgs> = {}>(args?: Subset<T, Employee$departmentHeadOfArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    departmentDirectorOf<T extends Employee$departmentDirectorOfArgs<ExtArgs> = {}>(args?: Subset<T, Employee$departmentDirectorOfArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    workInfo<T extends Employee$workInfoArgs<ExtArgs> = {}>(args?: Subset<T, Employee$workInfoArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    personalInfo<T extends Employee$personalInfoArgs<ExtArgs> = {}>(args?: Subset<T, Employee$personalInfoArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    contactInfo<T extends Employee$contactInfoArgs<ExtArgs> = {}>(args?: Subset<T, Employee$contactInfoArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    otherInfo<T extends Employee$otherInfoArgs<ExtArgs> = {}>(args?: Subset<T, Employee$otherInfoArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    LeaveRequest<T extends Employee$LeaveRequestArgs<ExtArgs> = {}>(args?: Subset<T, Employee$LeaveRequestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    LeaveApprovalSteps<T extends Employee$LeaveApprovalStepsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$LeaveApprovalStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Attendance<T extends Employee$AttendanceArgs<ExtArgs> = {}>(args?: Subset<T, Employee$AttendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    KPIEmployee<T extends Employee$KPIEmployeeArgs<ExtArgs> = {}>(args?: Subset<T, Employee$KPIEmployeeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'Int'>
    readonly employeeCode: FieldRef<"Employee", 'String'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly gender: FieldRef<"Employee", 'Sex'>
    readonly birthDate: FieldRef<"Employee", 'DateTime'>
    readonly password: FieldRef<"Employee", 'String'>
    readonly role: FieldRef<"Employee", 'Role'>
    readonly avatar: FieldRef<"Employee", 'String'>
    readonly isActive: FieldRef<"Employee", 'Boolean'>
    readonly managerId: FieldRef<"Employee", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee updateManyAndReturn
   */
  export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee.manager
   */
  export type Employee$managerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * Employee.subordinates
   */
  export type Employee$subordinatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee.departmentHeadOf
   */
  export type Employee$departmentHeadOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Employee.departmentDirectorOf
   */
  export type Employee$departmentDirectorOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Employee.workInfo
   */
  export type Employee$workInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    where?: WorkInfoWhereInput
  }

  /**
   * Employee.personalInfo
   */
  export type Employee$personalInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    where?: PersonalInfoWhereInput
  }

  /**
   * Employee.contactInfo
   */
  export type Employee$contactInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    where?: ContactInfoWhereInput
  }

  /**
   * Employee.otherInfo
   */
  export type Employee$otherInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    where?: OtherInfoWhereInput
  }

  /**
   * Employee.LeaveRequest
   */
  export type Employee$LeaveRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    cursor?: LeaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * Employee.LeaveApprovalSteps
   */
  export type Employee$LeaveApprovalStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    where?: LeaveApprovalStepApproverWhereInput
    orderBy?: LeaveApprovalStepApproverOrderByWithRelationInput | LeaveApprovalStepApproverOrderByWithRelationInput[]
    cursor?: LeaveApprovalStepApproverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveApprovalStepApproverScalarFieldEnum | LeaveApprovalStepApproverScalarFieldEnum[]
  }

  /**
   * Employee.Attendance
   */
  export type Employee$AttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Employee.KPIEmployee
   */
  export type Employee$KPIEmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    where?: KPIEmployeeWhereInput
    orderBy?: KPIEmployeeOrderByWithRelationInput | KPIEmployeeOrderByWithRelationInput[]
    cursor?: KPIEmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIEmployeeScalarFieldEnum | KPIEmployeeScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
    headId: number | null
    directorId: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
    headId: number | null
    directorId: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    abbreviation: string | null
    createdAt: Date | null
    updatedAt: Date | null
    headId: number | null
    directorId: number | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    abbreviation: string | null
    createdAt: Date | null
    updatedAt: Date | null
    headId: number | null
    directorId: number | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    abbreviation: number
    createdAt: number
    updatedAt: number
    headId: number
    directorId: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
    headId?: true
    directorId?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
    headId?: true
    directorId?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    abbreviation?: true
    createdAt?: true
    updatedAt?: true
    headId?: true
    directorId?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    abbreviation?: true
    createdAt?: true
    updatedAt?: true
    headId?: true
    directorId?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    abbreviation?: true
    createdAt?: true
    updatedAt?: true
    headId?: true
    directorId?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    name: string
    abbreviation: string
    createdAt: Date
    updatedAt: Date
    headId: number | null
    directorId: number | null
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    abbreviation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    headId?: boolean
    directorId?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
    director?: boolean | Department$directorArgs<ExtArgs>
    positions?: boolean | Department$positionsArgs<ExtArgs>
    workInfos?: boolean | Department$workInfosArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    abbreviation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    headId?: boolean
    directorId?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
    director?: boolean | Department$directorArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    abbreviation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    headId?: boolean
    directorId?: boolean
    head?: boolean | Department$headArgs<ExtArgs>
    director?: boolean | Department$directorArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    abbreviation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    headId?: boolean
    directorId?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "abbreviation" | "createdAt" | "updatedAt" | "headId" | "directorId", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
    director?: boolean | Department$directorArgs<ExtArgs>
    positions?: boolean | Department$positionsArgs<ExtArgs>
    workInfos?: boolean | Department$workInfosArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
    director?: boolean | Department$directorArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    head?: boolean | Department$headArgs<ExtArgs>
    director?: boolean | Department$directorArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      head: Prisma.$EmployeePayload<ExtArgs> | null
      director: Prisma.$EmployeePayload<ExtArgs> | null
      positions: Prisma.$PositionPayload<ExtArgs>[]
      workInfos: Prisma.$WorkInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      abbreviation: string
      createdAt: Date
      updatedAt: Date
      headId: number | null
      directorId: number | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    head<T extends Department$headArgs<ExtArgs> = {}>(args?: Subset<T, Department$headArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    director<T extends Department$directorArgs<ExtArgs> = {}>(args?: Subset<T, Department$directorArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    positions<T extends Department$positionsArgs<ExtArgs> = {}>(args?: Subset<T, Department$positionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workInfos<T extends Department$workInfosArgs<ExtArgs> = {}>(args?: Subset<T, Department$workInfosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly name: FieldRef<"Department", 'String'>
    readonly abbreviation: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
    readonly headId: FieldRef<"Department", 'Int'>
    readonly directorId: FieldRef<"Department", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.head
   */
  export type Department$headArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * Department.director
   */
  export type Department$directorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * Department.positions
   */
  export type Department$positionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    cursor?: PositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Department.workInfos
   */
  export type Department$workInfosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    where?: WorkInfoWhereInput
    orderBy?: WorkInfoOrderByWithRelationInput | WorkInfoOrderByWithRelationInput[]
    cursor?: WorkInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkInfoScalarFieldEnum | WorkInfoScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Position
   */

  export type AggregatePosition = {
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  export type PositionAvgAggregateOutputType = {
    id: number | null
    level: number | null
    departmentId: number | null
  }

  export type PositionSumAggregateOutputType = {
    id: number | null
    level: number | null
    departmentId: number | null
  }

  export type PositionMinAggregateOutputType = {
    id: number | null
    name: string | null
    level: number | null
    departmentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PositionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    level: number | null
    departmentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PositionCountAggregateOutputType = {
    id: number
    name: number
    level: number
    departmentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PositionAvgAggregateInputType = {
    id?: true
    level?: true
    departmentId?: true
  }

  export type PositionSumAggregateInputType = {
    id?: true
    level?: true
    departmentId?: true
  }

  export type PositionMinAggregateInputType = {
    id?: true
    name?: true
    level?: true
    departmentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PositionMaxAggregateInputType = {
    id?: true
    name?: true
    level?: true
    departmentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PositionCountAggregateInputType = {
    id?: true
    name?: true
    level?: true
    departmentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Position to aggregate.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Positions
    **/
    _count?: true | PositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PositionMaxAggregateInputType
  }

  export type GetPositionAggregateType<T extends PositionAggregateArgs> = {
        [P in keyof T & keyof AggregatePosition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosition[P]>
      : GetScalarType<T[P], AggregatePosition[P]>
  }




  export type PositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithAggregationInput | PositionOrderByWithAggregationInput[]
    by: PositionScalarFieldEnum[] | PositionScalarFieldEnum
    having?: PositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PositionCountAggregateInputType | true
    _avg?: PositionAvgAggregateInputType
    _sum?: PositionSumAggregateInputType
    _min?: PositionMinAggregateInputType
    _max?: PositionMaxAggregateInputType
  }

  export type PositionGroupByOutputType = {
    id: number
    name: string
    level: number
    departmentId: number
    createdAt: Date
    updatedAt: Date
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  type GetPositionGroupByPayload<T extends PositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PositionGroupByOutputType[P]>
            : GetScalarType<T[P], PositionGroupByOutputType[P]>
        }
      >
    >


  export type PositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    departmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    employees?: boolean | Position$employeesArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    departmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    departmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectScalar = {
    id?: boolean
    name?: boolean
    level?: boolean
    departmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PositionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "level" | "departmentId" | "createdAt" | "updatedAt", ExtArgs["result"]["position"]>
  export type PositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    employees?: boolean | Position$employeesArgs<ExtArgs>
    _count?: boolean | PositionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PositionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type PositionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $PositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Position"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      employees: Prisma.$WorkInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      level: number
      departmentId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["position"]>
    composites: {}
  }

  type PositionGetPayload<S extends boolean | null | undefined | PositionDefaultArgs> = $Result.GetResult<Prisma.$PositionPayload, S>

  type PositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PositionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PositionCountAggregateInputType | true
    }

  export interface PositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Position'], meta: { name: 'Position' } }
    /**
     * Find zero or one Position that matches the filter.
     * @param {PositionFindUniqueArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PositionFindUniqueArgs>(args: SelectSubset<T, PositionFindUniqueArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Position that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PositionFindUniqueOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PositionFindUniqueOrThrowArgs>(args: SelectSubset<T, PositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Position that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PositionFindFirstArgs>(args?: SelectSubset<T, PositionFindFirstArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Position that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PositionFindFirstOrThrowArgs>(args?: SelectSubset<T, PositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Positions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Positions
     * const positions = await prisma.position.findMany()
     * 
     * // Get first 10 Positions
     * const positions = await prisma.position.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const positionWithIdOnly = await prisma.position.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PositionFindManyArgs>(args?: SelectSubset<T, PositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Position.
     * @param {PositionCreateArgs} args - Arguments to create a Position.
     * @example
     * // Create one Position
     * const Position = await prisma.position.create({
     *   data: {
     *     // ... data to create a Position
     *   }
     * })
     * 
     */
    create<T extends PositionCreateArgs>(args: SelectSubset<T, PositionCreateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Positions.
     * @param {PositionCreateManyArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PositionCreateManyArgs>(args?: SelectSubset<T, PositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Positions and returns the data saved in the database.
     * @param {PositionCreateManyAndReturnArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Positions and only return the `id`
     * const positionWithIdOnly = await prisma.position.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PositionCreateManyAndReturnArgs>(args?: SelectSubset<T, PositionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Position.
     * @param {PositionDeleteArgs} args - Arguments to delete one Position.
     * @example
     * // Delete one Position
     * const Position = await prisma.position.delete({
     *   where: {
     *     // ... filter to delete one Position
     *   }
     * })
     * 
     */
    delete<T extends PositionDeleteArgs>(args: SelectSubset<T, PositionDeleteArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Position.
     * @param {PositionUpdateArgs} args - Arguments to update one Position.
     * @example
     * // Update one Position
     * const position = await prisma.position.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PositionUpdateArgs>(args: SelectSubset<T, PositionUpdateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Positions.
     * @param {PositionDeleteManyArgs} args - Arguments to filter Positions to delete.
     * @example
     * // Delete a few Positions
     * const { count } = await prisma.position.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PositionDeleteManyArgs>(args?: SelectSubset<T, PositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PositionUpdateManyArgs>(args: SelectSubset<T, PositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions and returns the data updated in the database.
     * @param {PositionUpdateManyAndReturnArgs} args - Arguments to update many Positions.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Positions and only return the `id`
     * const positionWithIdOnly = await prisma.position.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PositionUpdateManyAndReturnArgs>(args: SelectSubset<T, PositionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Position.
     * @param {PositionUpsertArgs} args - Arguments to update or create a Position.
     * @example
     * // Update or create a Position
     * const position = await prisma.position.upsert({
     *   create: {
     *     // ... data to create a Position
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Position we want to update
     *   }
     * })
     */
    upsert<T extends PositionUpsertArgs>(args: SelectSubset<T, PositionUpsertArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionCountArgs} args - Arguments to filter Positions to count.
     * @example
     * // Count the number of Positions
     * const count = await prisma.position.count({
     *   where: {
     *     // ... the filter for the Positions we want to count
     *   }
     * })
    **/
    count<T extends PositionCountArgs>(
      args?: Subset<T, PositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PositionAggregateArgs>(args: Subset<T, PositionAggregateArgs>): Prisma.PrismaPromise<GetPositionAggregateType<T>>

    /**
     * Group by Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PositionGroupByArgs['orderBy'] }
        : { orderBy?: PositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Position model
   */
  readonly fields: PositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Position.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employees<T extends Position$employeesArgs<ExtArgs> = {}>(args?: Subset<T, Position$employeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Position model
   */
  interface PositionFieldRefs {
    readonly id: FieldRef<"Position", 'Int'>
    readonly name: FieldRef<"Position", 'String'>
    readonly level: FieldRef<"Position", 'Int'>
    readonly departmentId: FieldRef<"Position", 'Int'>
    readonly createdAt: FieldRef<"Position", 'DateTime'>
    readonly updatedAt: FieldRef<"Position", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Position findUnique
   */
  export type PositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findUniqueOrThrow
   */
  export type PositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findFirst
   */
  export type PositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findFirstOrThrow
   */
  export type PositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findMany
   */
  export type PositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Positions to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position create
   */
  export type PositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Position.
     */
    data: XOR<PositionCreateInput, PositionUncheckedCreateInput>
  }

  /**
   * Position createMany
   */
  export type PositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Position createManyAndReturn
   */
  export type PositionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Position update
   */
  export type PositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Position.
     */
    data: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
    /**
     * Choose, which Position to update.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position updateMany
   */
  export type PositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to update.
     */
    limit?: number
  }

  /**
   * Position updateManyAndReturn
   */
  export type PositionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Position upsert
   */
  export type PositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Position to update in case it exists.
     */
    where: PositionWhereUniqueInput
    /**
     * In case the Position found by the `where` argument doesn't exist, create a new Position with this data.
     */
    create: XOR<PositionCreateInput, PositionUncheckedCreateInput>
    /**
     * In case the Position was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
  }

  /**
   * Position delete
   */
  export type PositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter which Position to delete.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position deleteMany
   */
  export type PositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Positions to delete
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to delete.
     */
    limit?: number
  }

  /**
   * Position.employees
   */
  export type Position$employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    where?: WorkInfoWhereInput
    orderBy?: WorkInfoOrderByWithRelationInput | WorkInfoOrderByWithRelationInput[]
    cursor?: WorkInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkInfoScalarFieldEnum | WorkInfoScalarFieldEnum[]
  }

  /**
   * Position without action
   */
  export type PositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
  }


  /**
   * Model WorkInfo
   */

  export type AggregateWorkInfo = {
    _count: WorkInfoCountAggregateOutputType | null
    _avg: WorkInfoAvgAggregateOutputType | null
    _sum: WorkInfoSumAggregateOutputType | null
    _min: WorkInfoMinAggregateOutputType | null
    _max: WorkInfoMaxAggregateOutputType | null
  }

  export type WorkInfoAvgAggregateOutputType = {
    id: number | null
    departmentId: number | null
    positionId: number | null
    employeeId: number | null
  }

  export type WorkInfoSumAggregateOutputType = {
    id: number | null
    departmentId: number | null
    positionId: number | null
    employeeId: number | null
  }

  export type WorkInfoMinAggregateOutputType = {
    id: number | null
    departmentId: number | null
    positionId: number | null
    specialization: string | null
    joinedTBD: Date | null
    joinedTeSCC: Date | null
    seniorityStart: Date | null
    seniority: string | null
    contractNumber: string | null
    contractDate: Date | null
    contractType: string | null
    contractEndDate: Date | null
    employeeId: number | null
  }

  export type WorkInfoMaxAggregateOutputType = {
    id: number | null
    departmentId: number | null
    positionId: number | null
    specialization: string | null
    joinedTBD: Date | null
    joinedTeSCC: Date | null
    seniorityStart: Date | null
    seniority: string | null
    contractNumber: string | null
    contractDate: Date | null
    contractType: string | null
    contractEndDate: Date | null
    employeeId: number | null
  }

  export type WorkInfoCountAggregateOutputType = {
    id: number
    departmentId: number
    positionId: number
    specialization: number
    joinedTBD: number
    joinedTeSCC: number
    seniorityStart: number
    seniority: number
    contractNumber: number
    contractDate: number
    contractType: number
    contractEndDate: number
    employeeId: number
    _all: number
  }


  export type WorkInfoAvgAggregateInputType = {
    id?: true
    departmentId?: true
    positionId?: true
    employeeId?: true
  }

  export type WorkInfoSumAggregateInputType = {
    id?: true
    departmentId?: true
    positionId?: true
    employeeId?: true
  }

  export type WorkInfoMinAggregateInputType = {
    id?: true
    departmentId?: true
    positionId?: true
    specialization?: true
    joinedTBD?: true
    joinedTeSCC?: true
    seniorityStart?: true
    seniority?: true
    contractNumber?: true
    contractDate?: true
    contractType?: true
    contractEndDate?: true
    employeeId?: true
  }

  export type WorkInfoMaxAggregateInputType = {
    id?: true
    departmentId?: true
    positionId?: true
    specialization?: true
    joinedTBD?: true
    joinedTeSCC?: true
    seniorityStart?: true
    seniority?: true
    contractNumber?: true
    contractDate?: true
    contractType?: true
    contractEndDate?: true
    employeeId?: true
  }

  export type WorkInfoCountAggregateInputType = {
    id?: true
    departmentId?: true
    positionId?: true
    specialization?: true
    joinedTBD?: true
    joinedTeSCC?: true
    seniorityStart?: true
    seniority?: true
    contractNumber?: true
    contractDate?: true
    contractType?: true
    contractEndDate?: true
    employeeId?: true
    _all?: true
  }

  export type WorkInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkInfo to aggregate.
     */
    where?: WorkInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkInfos to fetch.
     */
    orderBy?: WorkInfoOrderByWithRelationInput | WorkInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkInfos
    **/
    _count?: true | WorkInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkInfoMaxAggregateInputType
  }

  export type GetWorkInfoAggregateType<T extends WorkInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkInfo[P]>
      : GetScalarType<T[P], AggregateWorkInfo[P]>
  }




  export type WorkInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkInfoWhereInput
    orderBy?: WorkInfoOrderByWithAggregationInput | WorkInfoOrderByWithAggregationInput[]
    by: WorkInfoScalarFieldEnum[] | WorkInfoScalarFieldEnum
    having?: WorkInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkInfoCountAggregateInputType | true
    _avg?: WorkInfoAvgAggregateInputType
    _sum?: WorkInfoSumAggregateInputType
    _min?: WorkInfoMinAggregateInputType
    _max?: WorkInfoMaxAggregateInputType
  }

  export type WorkInfoGroupByOutputType = {
    id: number
    departmentId: number | null
    positionId: number | null
    specialization: string | null
    joinedTBD: Date | null
    joinedTeSCC: Date | null
    seniorityStart: Date | null
    seniority: string | null
    contractNumber: string | null
    contractDate: Date | null
    contractType: string | null
    contractEndDate: Date | null
    employeeId: number
    _count: WorkInfoCountAggregateOutputType | null
    _avg: WorkInfoAvgAggregateOutputType | null
    _sum: WorkInfoSumAggregateOutputType | null
    _min: WorkInfoMinAggregateOutputType | null
    _max: WorkInfoMaxAggregateOutputType | null
  }

  type GetWorkInfoGroupByPayload<T extends WorkInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkInfoGroupByOutputType[P]>
            : GetScalarType<T[P], WorkInfoGroupByOutputType[P]>
        }
      >
    >


  export type WorkInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentId?: boolean
    positionId?: boolean
    specialization?: boolean
    joinedTBD?: boolean
    joinedTeSCC?: boolean
    seniorityStart?: boolean
    seniority?: boolean
    contractNumber?: boolean
    contractDate?: boolean
    contractType?: boolean
    contractEndDate?: boolean
    employeeId?: boolean
    department?: boolean | WorkInfo$departmentArgs<ExtArgs>
    position?: boolean | WorkInfo$positionArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workInfo"]>

  export type WorkInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentId?: boolean
    positionId?: boolean
    specialization?: boolean
    joinedTBD?: boolean
    joinedTeSCC?: boolean
    seniorityStart?: boolean
    seniority?: boolean
    contractNumber?: boolean
    contractDate?: boolean
    contractType?: boolean
    contractEndDate?: boolean
    employeeId?: boolean
    department?: boolean | WorkInfo$departmentArgs<ExtArgs>
    position?: boolean | WorkInfo$positionArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workInfo"]>

  export type WorkInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentId?: boolean
    positionId?: boolean
    specialization?: boolean
    joinedTBD?: boolean
    joinedTeSCC?: boolean
    seniorityStart?: boolean
    seniority?: boolean
    contractNumber?: boolean
    contractDate?: boolean
    contractType?: boolean
    contractEndDate?: boolean
    employeeId?: boolean
    department?: boolean | WorkInfo$departmentArgs<ExtArgs>
    position?: boolean | WorkInfo$positionArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workInfo"]>

  export type WorkInfoSelectScalar = {
    id?: boolean
    departmentId?: boolean
    positionId?: boolean
    specialization?: boolean
    joinedTBD?: boolean
    joinedTeSCC?: boolean
    seniorityStart?: boolean
    seniority?: boolean
    contractNumber?: boolean
    contractDate?: boolean
    contractType?: boolean
    contractEndDate?: boolean
    employeeId?: boolean
  }

  export type WorkInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "departmentId" | "positionId" | "specialization" | "joinedTBD" | "joinedTeSCC" | "seniorityStart" | "seniority" | "contractNumber" | "contractDate" | "contractType" | "contractEndDate" | "employeeId", ExtArgs["result"]["workInfo"]>
  export type WorkInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | WorkInfo$departmentArgs<ExtArgs>
    position?: boolean | WorkInfo$positionArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type WorkInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | WorkInfo$departmentArgs<ExtArgs>
    position?: boolean | WorkInfo$positionArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type WorkInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | WorkInfo$departmentArgs<ExtArgs>
    position?: boolean | WorkInfo$positionArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $WorkInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkInfo"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      position: Prisma.$PositionPayload<ExtArgs> | null
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      departmentId: number | null
      positionId: number | null
      specialization: string | null
      joinedTBD: Date | null
      joinedTeSCC: Date | null
      seniorityStart: Date | null
      seniority: string | null
      contractNumber: string | null
      contractDate: Date | null
      contractType: string | null
      contractEndDate: Date | null
      employeeId: number
    }, ExtArgs["result"]["workInfo"]>
    composites: {}
  }

  type WorkInfoGetPayload<S extends boolean | null | undefined | WorkInfoDefaultArgs> = $Result.GetResult<Prisma.$WorkInfoPayload, S>

  type WorkInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkInfoCountAggregateInputType | true
    }

  export interface WorkInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkInfo'], meta: { name: 'WorkInfo' } }
    /**
     * Find zero or one WorkInfo that matches the filter.
     * @param {WorkInfoFindUniqueArgs} args - Arguments to find a WorkInfo
     * @example
     * // Get one WorkInfo
     * const workInfo = await prisma.workInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkInfoFindUniqueArgs>(args: SelectSubset<T, WorkInfoFindUniqueArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkInfoFindUniqueOrThrowArgs} args - Arguments to find a WorkInfo
     * @example
     * // Get one WorkInfo
     * const workInfo = await prisma.workInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkInfoFindFirstArgs} args - Arguments to find a WorkInfo
     * @example
     * // Get one WorkInfo
     * const workInfo = await prisma.workInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkInfoFindFirstArgs>(args?: SelectSubset<T, WorkInfoFindFirstArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkInfoFindFirstOrThrowArgs} args - Arguments to find a WorkInfo
     * @example
     * // Get one WorkInfo
     * const workInfo = await prisma.workInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkInfos
     * const workInfos = await prisma.workInfo.findMany()
     * 
     * // Get first 10 WorkInfos
     * const workInfos = await prisma.workInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workInfoWithIdOnly = await prisma.workInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkInfoFindManyArgs>(args?: SelectSubset<T, WorkInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkInfo.
     * @param {WorkInfoCreateArgs} args - Arguments to create a WorkInfo.
     * @example
     * // Create one WorkInfo
     * const WorkInfo = await prisma.workInfo.create({
     *   data: {
     *     // ... data to create a WorkInfo
     *   }
     * })
     * 
     */
    create<T extends WorkInfoCreateArgs>(args: SelectSubset<T, WorkInfoCreateArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkInfos.
     * @param {WorkInfoCreateManyArgs} args - Arguments to create many WorkInfos.
     * @example
     * // Create many WorkInfos
     * const workInfo = await prisma.workInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkInfoCreateManyArgs>(args?: SelectSubset<T, WorkInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkInfos and returns the data saved in the database.
     * @param {WorkInfoCreateManyAndReturnArgs} args - Arguments to create many WorkInfos.
     * @example
     * // Create many WorkInfos
     * const workInfo = await prisma.workInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkInfos and only return the `id`
     * const workInfoWithIdOnly = await prisma.workInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkInfo.
     * @param {WorkInfoDeleteArgs} args - Arguments to delete one WorkInfo.
     * @example
     * // Delete one WorkInfo
     * const WorkInfo = await prisma.workInfo.delete({
     *   where: {
     *     // ... filter to delete one WorkInfo
     *   }
     * })
     * 
     */
    delete<T extends WorkInfoDeleteArgs>(args: SelectSubset<T, WorkInfoDeleteArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkInfo.
     * @param {WorkInfoUpdateArgs} args - Arguments to update one WorkInfo.
     * @example
     * // Update one WorkInfo
     * const workInfo = await prisma.workInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkInfoUpdateArgs>(args: SelectSubset<T, WorkInfoUpdateArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkInfos.
     * @param {WorkInfoDeleteManyArgs} args - Arguments to filter WorkInfos to delete.
     * @example
     * // Delete a few WorkInfos
     * const { count } = await prisma.workInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkInfoDeleteManyArgs>(args?: SelectSubset<T, WorkInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkInfos
     * const workInfo = await prisma.workInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkInfoUpdateManyArgs>(args: SelectSubset<T, WorkInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkInfos and returns the data updated in the database.
     * @param {WorkInfoUpdateManyAndReturnArgs} args - Arguments to update many WorkInfos.
     * @example
     * // Update many WorkInfos
     * const workInfo = await prisma.workInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkInfos and only return the `id`
     * const workInfoWithIdOnly = await prisma.workInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkInfo.
     * @param {WorkInfoUpsertArgs} args - Arguments to update or create a WorkInfo.
     * @example
     * // Update or create a WorkInfo
     * const workInfo = await prisma.workInfo.upsert({
     *   create: {
     *     // ... data to create a WorkInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkInfo we want to update
     *   }
     * })
     */
    upsert<T extends WorkInfoUpsertArgs>(args: SelectSubset<T, WorkInfoUpsertArgs<ExtArgs>>): Prisma__WorkInfoClient<$Result.GetResult<Prisma.$WorkInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkInfoCountArgs} args - Arguments to filter WorkInfos to count.
     * @example
     * // Count the number of WorkInfos
     * const count = await prisma.workInfo.count({
     *   where: {
     *     // ... the filter for the WorkInfos we want to count
     *   }
     * })
    **/
    count<T extends WorkInfoCountArgs>(
      args?: Subset<T, WorkInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkInfoAggregateArgs>(args: Subset<T, WorkInfoAggregateArgs>): Prisma.PrismaPromise<GetWorkInfoAggregateType<T>>

    /**
     * Group by WorkInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkInfoGroupByArgs['orderBy'] }
        : { orderBy?: WorkInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkInfo model
   */
  readonly fields: WorkInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends WorkInfo$departmentArgs<ExtArgs> = {}>(args?: Subset<T, WorkInfo$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    position<T extends WorkInfo$positionArgs<ExtArgs> = {}>(args?: Subset<T, WorkInfo$positionArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkInfo model
   */
  interface WorkInfoFieldRefs {
    readonly id: FieldRef<"WorkInfo", 'Int'>
    readonly departmentId: FieldRef<"WorkInfo", 'Int'>
    readonly positionId: FieldRef<"WorkInfo", 'Int'>
    readonly specialization: FieldRef<"WorkInfo", 'String'>
    readonly joinedTBD: FieldRef<"WorkInfo", 'DateTime'>
    readonly joinedTeSCC: FieldRef<"WorkInfo", 'DateTime'>
    readonly seniorityStart: FieldRef<"WorkInfo", 'DateTime'>
    readonly seniority: FieldRef<"WorkInfo", 'String'>
    readonly contractNumber: FieldRef<"WorkInfo", 'String'>
    readonly contractDate: FieldRef<"WorkInfo", 'DateTime'>
    readonly contractType: FieldRef<"WorkInfo", 'String'>
    readonly contractEndDate: FieldRef<"WorkInfo", 'DateTime'>
    readonly employeeId: FieldRef<"WorkInfo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WorkInfo findUnique
   */
  export type WorkInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * Filter, which WorkInfo to fetch.
     */
    where: WorkInfoWhereUniqueInput
  }

  /**
   * WorkInfo findUniqueOrThrow
   */
  export type WorkInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * Filter, which WorkInfo to fetch.
     */
    where: WorkInfoWhereUniqueInput
  }

  /**
   * WorkInfo findFirst
   */
  export type WorkInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * Filter, which WorkInfo to fetch.
     */
    where?: WorkInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkInfos to fetch.
     */
    orderBy?: WorkInfoOrderByWithRelationInput | WorkInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkInfos.
     */
    cursor?: WorkInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkInfos.
     */
    distinct?: WorkInfoScalarFieldEnum | WorkInfoScalarFieldEnum[]
  }

  /**
   * WorkInfo findFirstOrThrow
   */
  export type WorkInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * Filter, which WorkInfo to fetch.
     */
    where?: WorkInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkInfos to fetch.
     */
    orderBy?: WorkInfoOrderByWithRelationInput | WorkInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkInfos.
     */
    cursor?: WorkInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkInfos.
     */
    distinct?: WorkInfoScalarFieldEnum | WorkInfoScalarFieldEnum[]
  }

  /**
   * WorkInfo findMany
   */
  export type WorkInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * Filter, which WorkInfos to fetch.
     */
    where?: WorkInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkInfos to fetch.
     */
    orderBy?: WorkInfoOrderByWithRelationInput | WorkInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkInfos.
     */
    cursor?: WorkInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkInfos.
     */
    skip?: number
    distinct?: WorkInfoScalarFieldEnum | WorkInfoScalarFieldEnum[]
  }

  /**
   * WorkInfo create
   */
  export type WorkInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkInfo.
     */
    data: XOR<WorkInfoCreateInput, WorkInfoUncheckedCreateInput>
  }

  /**
   * WorkInfo createMany
   */
  export type WorkInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkInfos.
     */
    data: WorkInfoCreateManyInput | WorkInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkInfo createManyAndReturn
   */
  export type WorkInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * The data used to create many WorkInfos.
     */
    data: WorkInfoCreateManyInput | WorkInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkInfo update
   */
  export type WorkInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkInfo.
     */
    data: XOR<WorkInfoUpdateInput, WorkInfoUncheckedUpdateInput>
    /**
     * Choose, which WorkInfo to update.
     */
    where: WorkInfoWhereUniqueInput
  }

  /**
   * WorkInfo updateMany
   */
  export type WorkInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkInfos.
     */
    data: XOR<WorkInfoUpdateManyMutationInput, WorkInfoUncheckedUpdateManyInput>
    /**
     * Filter which WorkInfos to update
     */
    where?: WorkInfoWhereInput
    /**
     * Limit how many WorkInfos to update.
     */
    limit?: number
  }

  /**
   * WorkInfo updateManyAndReturn
   */
  export type WorkInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * The data used to update WorkInfos.
     */
    data: XOR<WorkInfoUpdateManyMutationInput, WorkInfoUncheckedUpdateManyInput>
    /**
     * Filter which WorkInfos to update
     */
    where?: WorkInfoWhereInput
    /**
     * Limit how many WorkInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkInfo upsert
   */
  export type WorkInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkInfo to update in case it exists.
     */
    where: WorkInfoWhereUniqueInput
    /**
     * In case the WorkInfo found by the `where` argument doesn't exist, create a new WorkInfo with this data.
     */
    create: XOR<WorkInfoCreateInput, WorkInfoUncheckedCreateInput>
    /**
     * In case the WorkInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkInfoUpdateInput, WorkInfoUncheckedUpdateInput>
  }

  /**
   * WorkInfo delete
   */
  export type WorkInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
    /**
     * Filter which WorkInfo to delete.
     */
    where: WorkInfoWhereUniqueInput
  }

  /**
   * WorkInfo deleteMany
   */
  export type WorkInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkInfos to delete
     */
    where?: WorkInfoWhereInput
    /**
     * Limit how many WorkInfos to delete.
     */
    limit?: number
  }

  /**
   * WorkInfo.department
   */
  export type WorkInfo$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * WorkInfo.position
   */
  export type WorkInfo$positionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
  }

  /**
   * WorkInfo without action
   */
  export type WorkInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkInfo
     */
    select?: WorkInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkInfo
     */
    omit?: WorkInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkInfoInclude<ExtArgs> | null
  }


  /**
   * Model PersonalInfo
   */

  export type AggregatePersonalInfo = {
    _count: PersonalInfoCountAggregateOutputType | null
    _avg: PersonalInfoAvgAggregateOutputType | null
    _sum: PersonalInfoSumAggregateOutputType | null
    _min: PersonalInfoMinAggregateOutputType | null
    _max: PersonalInfoMaxAggregateOutputType | null
  }

  export type PersonalInfoAvgAggregateOutputType = {
    id: number | null
    insuranceSalary: number | null
    employeeId: number | null
  }

  export type PersonalInfoSumAggregateOutputType = {
    id: number | null
    insuranceSalary: number | null
    employeeId: number | null
  }

  export type PersonalInfoMinAggregateOutputType = {
    id: number | null
    identityNumber: string | null
    issueDate: Date | null
    issuePlace: string | null
    hometown: string | null
    idAddress: string | null
    education: string | null
    drivingLicense: string | null
    toyotaCertificate: string | null
    taxCode: string | null
    insuranceNumber: string | null
    insuranceSalary: number | null
    employeeId: number | null
  }

  export type PersonalInfoMaxAggregateOutputType = {
    id: number | null
    identityNumber: string | null
    issueDate: Date | null
    issuePlace: string | null
    hometown: string | null
    idAddress: string | null
    education: string | null
    drivingLicense: string | null
    toyotaCertificate: string | null
    taxCode: string | null
    insuranceNumber: string | null
    insuranceSalary: number | null
    employeeId: number | null
  }

  export type PersonalInfoCountAggregateOutputType = {
    id: number
    identityNumber: number
    issueDate: number
    issuePlace: number
    hometown: number
    idAddress: number
    education: number
    drivingLicense: number
    toyotaCertificate: number
    taxCode: number
    insuranceNumber: number
    insuranceSalary: number
    employeeId: number
    _all: number
  }


  export type PersonalInfoAvgAggregateInputType = {
    id?: true
    insuranceSalary?: true
    employeeId?: true
  }

  export type PersonalInfoSumAggregateInputType = {
    id?: true
    insuranceSalary?: true
    employeeId?: true
  }

  export type PersonalInfoMinAggregateInputType = {
    id?: true
    identityNumber?: true
    issueDate?: true
    issuePlace?: true
    hometown?: true
    idAddress?: true
    education?: true
    drivingLicense?: true
    toyotaCertificate?: true
    taxCode?: true
    insuranceNumber?: true
    insuranceSalary?: true
    employeeId?: true
  }

  export type PersonalInfoMaxAggregateInputType = {
    id?: true
    identityNumber?: true
    issueDate?: true
    issuePlace?: true
    hometown?: true
    idAddress?: true
    education?: true
    drivingLicense?: true
    toyotaCertificate?: true
    taxCode?: true
    insuranceNumber?: true
    insuranceSalary?: true
    employeeId?: true
  }

  export type PersonalInfoCountAggregateInputType = {
    id?: true
    identityNumber?: true
    issueDate?: true
    issuePlace?: true
    hometown?: true
    idAddress?: true
    education?: true
    drivingLicense?: true
    toyotaCertificate?: true
    taxCode?: true
    insuranceNumber?: true
    insuranceSalary?: true
    employeeId?: true
    _all?: true
  }

  export type PersonalInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalInfo to aggregate.
     */
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     */
    orderBy?: PersonalInfoOrderByWithRelationInput | PersonalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PersonalInfos
    **/
    _count?: true | PersonalInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonalInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonalInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonalInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonalInfoMaxAggregateInputType
  }

  export type GetPersonalInfoAggregateType<T extends PersonalInfoAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonalInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonalInfo[P]>
      : GetScalarType<T[P], AggregatePersonalInfo[P]>
  }




  export type PersonalInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonalInfoWhereInput
    orderBy?: PersonalInfoOrderByWithAggregationInput | PersonalInfoOrderByWithAggregationInput[]
    by: PersonalInfoScalarFieldEnum[] | PersonalInfoScalarFieldEnum
    having?: PersonalInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonalInfoCountAggregateInputType | true
    _avg?: PersonalInfoAvgAggregateInputType
    _sum?: PersonalInfoSumAggregateInputType
    _min?: PersonalInfoMinAggregateInputType
    _max?: PersonalInfoMaxAggregateInputType
  }

  export type PersonalInfoGroupByOutputType = {
    id: number
    identityNumber: string | null
    issueDate: Date | null
    issuePlace: string | null
    hometown: string | null
    idAddress: string | null
    education: string | null
    drivingLicense: string | null
    toyotaCertificate: string | null
    taxCode: string | null
    insuranceNumber: string | null
    insuranceSalary: number | null
    employeeId: number
    _count: PersonalInfoCountAggregateOutputType | null
    _avg: PersonalInfoAvgAggregateOutputType | null
    _sum: PersonalInfoSumAggregateOutputType | null
    _min: PersonalInfoMinAggregateOutputType | null
    _max: PersonalInfoMaxAggregateOutputType | null
  }

  type GetPersonalInfoGroupByPayload<T extends PersonalInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonalInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonalInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonalInfoGroupByOutputType[P]>
            : GetScalarType<T[P], PersonalInfoGroupByOutputType[P]>
        }
      >
    >


  export type PersonalInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identityNumber?: boolean
    issueDate?: boolean
    issuePlace?: boolean
    hometown?: boolean
    idAddress?: boolean
    education?: boolean
    drivingLicense?: boolean
    toyotaCertificate?: boolean
    taxCode?: boolean
    insuranceNumber?: boolean
    insuranceSalary?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalInfo"]>

  export type PersonalInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identityNumber?: boolean
    issueDate?: boolean
    issuePlace?: boolean
    hometown?: boolean
    idAddress?: boolean
    education?: boolean
    drivingLicense?: boolean
    toyotaCertificate?: boolean
    taxCode?: boolean
    insuranceNumber?: boolean
    insuranceSalary?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalInfo"]>

  export type PersonalInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identityNumber?: boolean
    issueDate?: boolean
    issuePlace?: boolean
    hometown?: boolean
    idAddress?: boolean
    education?: boolean
    drivingLicense?: boolean
    toyotaCertificate?: boolean
    taxCode?: boolean
    insuranceNumber?: boolean
    insuranceSalary?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personalInfo"]>

  export type PersonalInfoSelectScalar = {
    id?: boolean
    identityNumber?: boolean
    issueDate?: boolean
    issuePlace?: boolean
    hometown?: boolean
    idAddress?: boolean
    education?: boolean
    drivingLicense?: boolean
    toyotaCertificate?: boolean
    taxCode?: boolean
    insuranceNumber?: boolean
    insuranceSalary?: boolean
    employeeId?: boolean
  }

  export type PersonalInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identityNumber" | "issueDate" | "issuePlace" | "hometown" | "idAddress" | "education" | "drivingLicense" | "toyotaCertificate" | "taxCode" | "insuranceNumber" | "insuranceSalary" | "employeeId", ExtArgs["result"]["personalInfo"]>
  export type PersonalInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PersonalInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PersonalInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PersonalInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PersonalInfo"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      identityNumber: string | null
      issueDate: Date | null
      issuePlace: string | null
      hometown: string | null
      idAddress: string | null
      education: string | null
      drivingLicense: string | null
      toyotaCertificate: string | null
      taxCode: string | null
      insuranceNumber: string | null
      insuranceSalary: number | null
      employeeId: number
    }, ExtArgs["result"]["personalInfo"]>
    composites: {}
  }

  type PersonalInfoGetPayload<S extends boolean | null | undefined | PersonalInfoDefaultArgs> = $Result.GetResult<Prisma.$PersonalInfoPayload, S>

  type PersonalInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonalInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonalInfoCountAggregateInputType | true
    }

  export interface PersonalInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PersonalInfo'], meta: { name: 'PersonalInfo' } }
    /**
     * Find zero or one PersonalInfo that matches the filter.
     * @param {PersonalInfoFindUniqueArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonalInfoFindUniqueArgs>(args: SelectSubset<T, PersonalInfoFindUniqueArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PersonalInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonalInfoFindUniqueOrThrowArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonalInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonalInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PersonalInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoFindFirstArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonalInfoFindFirstArgs>(args?: SelectSubset<T, PersonalInfoFindFirstArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PersonalInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoFindFirstOrThrowArgs} args - Arguments to find a PersonalInfo
     * @example
     * // Get one PersonalInfo
     * const personalInfo = await prisma.personalInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonalInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonalInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PersonalInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PersonalInfos
     * const personalInfos = await prisma.personalInfo.findMany()
     * 
     * // Get first 10 PersonalInfos
     * const personalInfos = await prisma.personalInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personalInfoWithIdOnly = await prisma.personalInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonalInfoFindManyArgs>(args?: SelectSubset<T, PersonalInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PersonalInfo.
     * @param {PersonalInfoCreateArgs} args - Arguments to create a PersonalInfo.
     * @example
     * // Create one PersonalInfo
     * const PersonalInfo = await prisma.personalInfo.create({
     *   data: {
     *     // ... data to create a PersonalInfo
     *   }
     * })
     * 
     */
    create<T extends PersonalInfoCreateArgs>(args: SelectSubset<T, PersonalInfoCreateArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PersonalInfos.
     * @param {PersonalInfoCreateManyArgs} args - Arguments to create many PersonalInfos.
     * @example
     * // Create many PersonalInfos
     * const personalInfo = await prisma.personalInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonalInfoCreateManyArgs>(args?: SelectSubset<T, PersonalInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PersonalInfos and returns the data saved in the database.
     * @param {PersonalInfoCreateManyAndReturnArgs} args - Arguments to create many PersonalInfos.
     * @example
     * // Create many PersonalInfos
     * const personalInfo = await prisma.personalInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PersonalInfos and only return the `id`
     * const personalInfoWithIdOnly = await prisma.personalInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonalInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonalInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PersonalInfo.
     * @param {PersonalInfoDeleteArgs} args - Arguments to delete one PersonalInfo.
     * @example
     * // Delete one PersonalInfo
     * const PersonalInfo = await prisma.personalInfo.delete({
     *   where: {
     *     // ... filter to delete one PersonalInfo
     *   }
     * })
     * 
     */
    delete<T extends PersonalInfoDeleteArgs>(args: SelectSubset<T, PersonalInfoDeleteArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PersonalInfo.
     * @param {PersonalInfoUpdateArgs} args - Arguments to update one PersonalInfo.
     * @example
     * // Update one PersonalInfo
     * const personalInfo = await prisma.personalInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonalInfoUpdateArgs>(args: SelectSubset<T, PersonalInfoUpdateArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PersonalInfos.
     * @param {PersonalInfoDeleteManyArgs} args - Arguments to filter PersonalInfos to delete.
     * @example
     * // Delete a few PersonalInfos
     * const { count } = await prisma.personalInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonalInfoDeleteManyArgs>(args?: SelectSubset<T, PersonalInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PersonalInfos
     * const personalInfo = await prisma.personalInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonalInfoUpdateManyArgs>(args: SelectSubset<T, PersonalInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PersonalInfos and returns the data updated in the database.
     * @param {PersonalInfoUpdateManyAndReturnArgs} args - Arguments to update many PersonalInfos.
     * @example
     * // Update many PersonalInfos
     * const personalInfo = await prisma.personalInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PersonalInfos and only return the `id`
     * const personalInfoWithIdOnly = await prisma.personalInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonalInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonalInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PersonalInfo.
     * @param {PersonalInfoUpsertArgs} args - Arguments to update or create a PersonalInfo.
     * @example
     * // Update or create a PersonalInfo
     * const personalInfo = await prisma.personalInfo.upsert({
     *   create: {
     *     // ... data to create a PersonalInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PersonalInfo we want to update
     *   }
     * })
     */
    upsert<T extends PersonalInfoUpsertArgs>(args: SelectSubset<T, PersonalInfoUpsertArgs<ExtArgs>>): Prisma__PersonalInfoClient<$Result.GetResult<Prisma.$PersonalInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PersonalInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoCountArgs} args - Arguments to filter PersonalInfos to count.
     * @example
     * // Count the number of PersonalInfos
     * const count = await prisma.personalInfo.count({
     *   where: {
     *     // ... the filter for the PersonalInfos we want to count
     *   }
     * })
    **/
    count<T extends PersonalInfoCountArgs>(
      args?: Subset<T, PersonalInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonalInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PersonalInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonalInfoAggregateArgs>(args: Subset<T, PersonalInfoAggregateArgs>): Prisma.PrismaPromise<GetPersonalInfoAggregateType<T>>

    /**
     * Group by PersonalInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonalInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonalInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonalInfoGroupByArgs['orderBy'] }
        : { orderBy?: PersonalInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonalInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonalInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PersonalInfo model
   */
  readonly fields: PersonalInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PersonalInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonalInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PersonalInfo model
   */
  interface PersonalInfoFieldRefs {
    readonly id: FieldRef<"PersonalInfo", 'Int'>
    readonly identityNumber: FieldRef<"PersonalInfo", 'String'>
    readonly issueDate: FieldRef<"PersonalInfo", 'DateTime'>
    readonly issuePlace: FieldRef<"PersonalInfo", 'String'>
    readonly hometown: FieldRef<"PersonalInfo", 'String'>
    readonly idAddress: FieldRef<"PersonalInfo", 'String'>
    readonly education: FieldRef<"PersonalInfo", 'String'>
    readonly drivingLicense: FieldRef<"PersonalInfo", 'String'>
    readonly toyotaCertificate: FieldRef<"PersonalInfo", 'String'>
    readonly taxCode: FieldRef<"PersonalInfo", 'String'>
    readonly insuranceNumber: FieldRef<"PersonalInfo", 'String'>
    readonly insuranceSalary: FieldRef<"PersonalInfo", 'Int'>
    readonly employeeId: FieldRef<"PersonalInfo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PersonalInfo findUnique
   */
  export type PersonalInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfo to fetch.
     */
    where: PersonalInfoWhereUniqueInput
  }

  /**
   * PersonalInfo findUniqueOrThrow
   */
  export type PersonalInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfo to fetch.
     */
    where: PersonalInfoWhereUniqueInput
  }

  /**
   * PersonalInfo findFirst
   */
  export type PersonalInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfo to fetch.
     */
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     */
    orderBy?: PersonalInfoOrderByWithRelationInput | PersonalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalInfos.
     */
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalInfos.
     */
    distinct?: PersonalInfoScalarFieldEnum | PersonalInfoScalarFieldEnum[]
  }

  /**
   * PersonalInfo findFirstOrThrow
   */
  export type PersonalInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfo to fetch.
     */
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     */
    orderBy?: PersonalInfoOrderByWithRelationInput | PersonalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PersonalInfos.
     */
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PersonalInfos.
     */
    distinct?: PersonalInfoScalarFieldEnum | PersonalInfoScalarFieldEnum[]
  }

  /**
   * PersonalInfo findMany
   */
  export type PersonalInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter, which PersonalInfos to fetch.
     */
    where?: PersonalInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PersonalInfos to fetch.
     */
    orderBy?: PersonalInfoOrderByWithRelationInput | PersonalInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PersonalInfos.
     */
    cursor?: PersonalInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PersonalInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PersonalInfos.
     */
    skip?: number
    distinct?: PersonalInfoScalarFieldEnum | PersonalInfoScalarFieldEnum[]
  }

  /**
   * PersonalInfo create
   */
  export type PersonalInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a PersonalInfo.
     */
    data: XOR<PersonalInfoCreateInput, PersonalInfoUncheckedCreateInput>
  }

  /**
   * PersonalInfo createMany
   */
  export type PersonalInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PersonalInfos.
     */
    data: PersonalInfoCreateManyInput | PersonalInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PersonalInfo createManyAndReturn
   */
  export type PersonalInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * The data used to create many PersonalInfos.
     */
    data: PersonalInfoCreateManyInput | PersonalInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonalInfo update
   */
  export type PersonalInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a PersonalInfo.
     */
    data: XOR<PersonalInfoUpdateInput, PersonalInfoUncheckedUpdateInput>
    /**
     * Choose, which PersonalInfo to update.
     */
    where: PersonalInfoWhereUniqueInput
  }

  /**
   * PersonalInfo updateMany
   */
  export type PersonalInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PersonalInfos.
     */
    data: XOR<PersonalInfoUpdateManyMutationInput, PersonalInfoUncheckedUpdateManyInput>
    /**
     * Filter which PersonalInfos to update
     */
    where?: PersonalInfoWhereInput
    /**
     * Limit how many PersonalInfos to update.
     */
    limit?: number
  }

  /**
   * PersonalInfo updateManyAndReturn
   */
  export type PersonalInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * The data used to update PersonalInfos.
     */
    data: XOR<PersonalInfoUpdateManyMutationInput, PersonalInfoUncheckedUpdateManyInput>
    /**
     * Filter which PersonalInfos to update
     */
    where?: PersonalInfoWhereInput
    /**
     * Limit how many PersonalInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PersonalInfo upsert
   */
  export type PersonalInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the PersonalInfo to update in case it exists.
     */
    where: PersonalInfoWhereUniqueInput
    /**
     * In case the PersonalInfo found by the `where` argument doesn't exist, create a new PersonalInfo with this data.
     */
    create: XOR<PersonalInfoCreateInput, PersonalInfoUncheckedCreateInput>
    /**
     * In case the PersonalInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonalInfoUpdateInput, PersonalInfoUncheckedUpdateInput>
  }

  /**
   * PersonalInfo delete
   */
  export type PersonalInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
    /**
     * Filter which PersonalInfo to delete.
     */
    where: PersonalInfoWhereUniqueInput
  }

  /**
   * PersonalInfo deleteMany
   */
  export type PersonalInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PersonalInfos to delete
     */
    where?: PersonalInfoWhereInput
    /**
     * Limit how many PersonalInfos to delete.
     */
    limit?: number
  }

  /**
   * PersonalInfo without action
   */
  export type PersonalInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonalInfo
     */
    select?: PersonalInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PersonalInfo
     */
    omit?: PersonalInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonalInfoInclude<ExtArgs> | null
  }


  /**
   * Model ContactInfo
   */

  export type AggregateContactInfo = {
    _count: ContactInfoCountAggregateOutputType | null
    _avg: ContactInfoAvgAggregateOutputType | null
    _sum: ContactInfoSumAggregateOutputType | null
    _min: ContactInfoMinAggregateOutputType | null
    _max: ContactInfoMaxAggregateOutputType | null
  }

  export type ContactInfoAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type ContactInfoSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type ContactInfoMinAggregateOutputType = {
    id: number | null
    phoneNumber: string | null
    relativePhone: string | null
    companyPhone: string | null
    email: string | null
    employeeId: number | null
  }

  export type ContactInfoMaxAggregateOutputType = {
    id: number | null
    phoneNumber: string | null
    relativePhone: string | null
    companyPhone: string | null
    email: string | null
    employeeId: number | null
  }

  export type ContactInfoCountAggregateOutputType = {
    id: number
    phoneNumber: number
    relativePhone: number
    companyPhone: number
    email: number
    employeeId: number
    _all: number
  }


  export type ContactInfoAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type ContactInfoSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type ContactInfoMinAggregateInputType = {
    id?: true
    phoneNumber?: true
    relativePhone?: true
    companyPhone?: true
    email?: true
    employeeId?: true
  }

  export type ContactInfoMaxAggregateInputType = {
    id?: true
    phoneNumber?: true
    relativePhone?: true
    companyPhone?: true
    email?: true
    employeeId?: true
  }

  export type ContactInfoCountAggregateInputType = {
    id?: true
    phoneNumber?: true
    relativePhone?: true
    companyPhone?: true
    email?: true
    employeeId?: true
    _all?: true
  }

  export type ContactInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactInfo to aggregate.
     */
    where?: ContactInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactInfos to fetch.
     */
    orderBy?: ContactInfoOrderByWithRelationInput | ContactInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactInfos
    **/
    _count?: true | ContactInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactInfoMaxAggregateInputType
  }

  export type GetContactInfoAggregateType<T extends ContactInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateContactInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactInfo[P]>
      : GetScalarType<T[P], AggregateContactInfo[P]>
  }




  export type ContactInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactInfoWhereInput
    orderBy?: ContactInfoOrderByWithAggregationInput | ContactInfoOrderByWithAggregationInput[]
    by: ContactInfoScalarFieldEnum[] | ContactInfoScalarFieldEnum
    having?: ContactInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactInfoCountAggregateInputType | true
    _avg?: ContactInfoAvgAggregateInputType
    _sum?: ContactInfoSumAggregateInputType
    _min?: ContactInfoMinAggregateInputType
    _max?: ContactInfoMaxAggregateInputType
  }

  export type ContactInfoGroupByOutputType = {
    id: number
    phoneNumber: string | null
    relativePhone: string | null
    companyPhone: string | null
    email: string | null
    employeeId: number
    _count: ContactInfoCountAggregateOutputType | null
    _avg: ContactInfoAvgAggregateOutputType | null
    _sum: ContactInfoSumAggregateOutputType | null
    _min: ContactInfoMinAggregateOutputType | null
    _max: ContactInfoMaxAggregateOutputType | null
  }

  type GetContactInfoGroupByPayload<T extends ContactInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactInfoGroupByOutputType[P]>
            : GetScalarType<T[P], ContactInfoGroupByOutputType[P]>
        }
      >
    >


  export type ContactInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    relativePhone?: boolean
    companyPhone?: boolean
    email?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactInfo"]>

  export type ContactInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    relativePhone?: boolean
    companyPhone?: boolean
    email?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactInfo"]>

  export type ContactInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    relativePhone?: boolean
    companyPhone?: boolean
    email?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contactInfo"]>

  export type ContactInfoSelectScalar = {
    id?: boolean
    phoneNumber?: boolean
    relativePhone?: boolean
    companyPhone?: boolean
    email?: boolean
    employeeId?: boolean
  }

  export type ContactInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "phoneNumber" | "relativePhone" | "companyPhone" | "email" | "employeeId", ExtArgs["result"]["contactInfo"]>
  export type ContactInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type ContactInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type ContactInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $ContactInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactInfo"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      phoneNumber: string | null
      relativePhone: string | null
      companyPhone: string | null
      email: string | null
      employeeId: number
    }, ExtArgs["result"]["contactInfo"]>
    composites: {}
  }

  type ContactInfoGetPayload<S extends boolean | null | undefined | ContactInfoDefaultArgs> = $Result.GetResult<Prisma.$ContactInfoPayload, S>

  type ContactInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactInfoCountAggregateInputType | true
    }

  export interface ContactInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactInfo'], meta: { name: 'ContactInfo' } }
    /**
     * Find zero or one ContactInfo that matches the filter.
     * @param {ContactInfoFindUniqueArgs} args - Arguments to find a ContactInfo
     * @example
     * // Get one ContactInfo
     * const contactInfo = await prisma.contactInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactInfoFindUniqueArgs>(args: SelectSubset<T, ContactInfoFindUniqueArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactInfoFindUniqueOrThrowArgs} args - Arguments to find a ContactInfo
     * @example
     * // Get one ContactInfo
     * const contactInfo = await prisma.contactInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactInfoFindFirstArgs} args - Arguments to find a ContactInfo
     * @example
     * // Get one ContactInfo
     * const contactInfo = await prisma.contactInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactInfoFindFirstArgs>(args?: SelectSubset<T, ContactInfoFindFirstArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactInfoFindFirstOrThrowArgs} args - Arguments to find a ContactInfo
     * @example
     * // Get one ContactInfo
     * const contactInfo = await prisma.contactInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactInfos
     * const contactInfos = await prisma.contactInfo.findMany()
     * 
     * // Get first 10 ContactInfos
     * const contactInfos = await prisma.contactInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactInfoWithIdOnly = await prisma.contactInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactInfoFindManyArgs>(args?: SelectSubset<T, ContactInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactInfo.
     * @param {ContactInfoCreateArgs} args - Arguments to create a ContactInfo.
     * @example
     * // Create one ContactInfo
     * const ContactInfo = await prisma.contactInfo.create({
     *   data: {
     *     // ... data to create a ContactInfo
     *   }
     * })
     * 
     */
    create<T extends ContactInfoCreateArgs>(args: SelectSubset<T, ContactInfoCreateArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactInfos.
     * @param {ContactInfoCreateManyArgs} args - Arguments to create many ContactInfos.
     * @example
     * // Create many ContactInfos
     * const contactInfo = await prisma.contactInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactInfoCreateManyArgs>(args?: SelectSubset<T, ContactInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactInfos and returns the data saved in the database.
     * @param {ContactInfoCreateManyAndReturnArgs} args - Arguments to create many ContactInfos.
     * @example
     * // Create many ContactInfos
     * const contactInfo = await prisma.contactInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactInfos and only return the `id`
     * const contactInfoWithIdOnly = await prisma.contactInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactInfo.
     * @param {ContactInfoDeleteArgs} args - Arguments to delete one ContactInfo.
     * @example
     * // Delete one ContactInfo
     * const ContactInfo = await prisma.contactInfo.delete({
     *   where: {
     *     // ... filter to delete one ContactInfo
     *   }
     * })
     * 
     */
    delete<T extends ContactInfoDeleteArgs>(args: SelectSubset<T, ContactInfoDeleteArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactInfo.
     * @param {ContactInfoUpdateArgs} args - Arguments to update one ContactInfo.
     * @example
     * // Update one ContactInfo
     * const contactInfo = await prisma.contactInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactInfoUpdateArgs>(args: SelectSubset<T, ContactInfoUpdateArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactInfos.
     * @param {ContactInfoDeleteManyArgs} args - Arguments to filter ContactInfos to delete.
     * @example
     * // Delete a few ContactInfos
     * const { count } = await prisma.contactInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactInfoDeleteManyArgs>(args?: SelectSubset<T, ContactInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactInfos
     * const contactInfo = await prisma.contactInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactInfoUpdateManyArgs>(args: SelectSubset<T, ContactInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactInfos and returns the data updated in the database.
     * @param {ContactInfoUpdateManyAndReturnArgs} args - Arguments to update many ContactInfos.
     * @example
     * // Update many ContactInfos
     * const contactInfo = await prisma.contactInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactInfos and only return the `id`
     * const contactInfoWithIdOnly = await prisma.contactInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactInfo.
     * @param {ContactInfoUpsertArgs} args - Arguments to update or create a ContactInfo.
     * @example
     * // Update or create a ContactInfo
     * const contactInfo = await prisma.contactInfo.upsert({
     *   create: {
     *     // ... data to create a ContactInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactInfo we want to update
     *   }
     * })
     */
    upsert<T extends ContactInfoUpsertArgs>(args: SelectSubset<T, ContactInfoUpsertArgs<ExtArgs>>): Prisma__ContactInfoClient<$Result.GetResult<Prisma.$ContactInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactInfoCountArgs} args - Arguments to filter ContactInfos to count.
     * @example
     * // Count the number of ContactInfos
     * const count = await prisma.contactInfo.count({
     *   where: {
     *     // ... the filter for the ContactInfos we want to count
     *   }
     * })
    **/
    count<T extends ContactInfoCountArgs>(
      args?: Subset<T, ContactInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactInfoAggregateArgs>(args: Subset<T, ContactInfoAggregateArgs>): Prisma.PrismaPromise<GetContactInfoAggregateType<T>>

    /**
     * Group by ContactInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactInfoGroupByArgs['orderBy'] }
        : { orderBy?: ContactInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactInfo model
   */
  readonly fields: ContactInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactInfo model
   */
  interface ContactInfoFieldRefs {
    readonly id: FieldRef<"ContactInfo", 'Int'>
    readonly phoneNumber: FieldRef<"ContactInfo", 'String'>
    readonly relativePhone: FieldRef<"ContactInfo", 'String'>
    readonly companyPhone: FieldRef<"ContactInfo", 'String'>
    readonly email: FieldRef<"ContactInfo", 'String'>
    readonly employeeId: FieldRef<"ContactInfo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ContactInfo findUnique
   */
  export type ContactInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * Filter, which ContactInfo to fetch.
     */
    where: ContactInfoWhereUniqueInput
  }

  /**
   * ContactInfo findUniqueOrThrow
   */
  export type ContactInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * Filter, which ContactInfo to fetch.
     */
    where: ContactInfoWhereUniqueInput
  }

  /**
   * ContactInfo findFirst
   */
  export type ContactInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * Filter, which ContactInfo to fetch.
     */
    where?: ContactInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactInfos to fetch.
     */
    orderBy?: ContactInfoOrderByWithRelationInput | ContactInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactInfos.
     */
    cursor?: ContactInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactInfos.
     */
    distinct?: ContactInfoScalarFieldEnum | ContactInfoScalarFieldEnum[]
  }

  /**
   * ContactInfo findFirstOrThrow
   */
  export type ContactInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * Filter, which ContactInfo to fetch.
     */
    where?: ContactInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactInfos to fetch.
     */
    orderBy?: ContactInfoOrderByWithRelationInput | ContactInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactInfos.
     */
    cursor?: ContactInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactInfos.
     */
    distinct?: ContactInfoScalarFieldEnum | ContactInfoScalarFieldEnum[]
  }

  /**
   * ContactInfo findMany
   */
  export type ContactInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * Filter, which ContactInfos to fetch.
     */
    where?: ContactInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactInfos to fetch.
     */
    orderBy?: ContactInfoOrderByWithRelationInput | ContactInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactInfos.
     */
    cursor?: ContactInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactInfos.
     */
    skip?: number
    distinct?: ContactInfoScalarFieldEnum | ContactInfoScalarFieldEnum[]
  }

  /**
   * ContactInfo create
   */
  export type ContactInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a ContactInfo.
     */
    data: XOR<ContactInfoCreateInput, ContactInfoUncheckedCreateInput>
  }

  /**
   * ContactInfo createMany
   */
  export type ContactInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactInfos.
     */
    data: ContactInfoCreateManyInput | ContactInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactInfo createManyAndReturn
   */
  export type ContactInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * The data used to create many ContactInfos.
     */
    data: ContactInfoCreateManyInput | ContactInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactInfo update
   */
  export type ContactInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a ContactInfo.
     */
    data: XOR<ContactInfoUpdateInput, ContactInfoUncheckedUpdateInput>
    /**
     * Choose, which ContactInfo to update.
     */
    where: ContactInfoWhereUniqueInput
  }

  /**
   * ContactInfo updateMany
   */
  export type ContactInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactInfos.
     */
    data: XOR<ContactInfoUpdateManyMutationInput, ContactInfoUncheckedUpdateManyInput>
    /**
     * Filter which ContactInfos to update
     */
    where?: ContactInfoWhereInput
    /**
     * Limit how many ContactInfos to update.
     */
    limit?: number
  }

  /**
   * ContactInfo updateManyAndReturn
   */
  export type ContactInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * The data used to update ContactInfos.
     */
    data: XOR<ContactInfoUpdateManyMutationInput, ContactInfoUncheckedUpdateManyInput>
    /**
     * Filter which ContactInfos to update
     */
    where?: ContactInfoWhereInput
    /**
     * Limit how many ContactInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContactInfo upsert
   */
  export type ContactInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the ContactInfo to update in case it exists.
     */
    where: ContactInfoWhereUniqueInput
    /**
     * In case the ContactInfo found by the `where` argument doesn't exist, create a new ContactInfo with this data.
     */
    create: XOR<ContactInfoCreateInput, ContactInfoUncheckedCreateInput>
    /**
     * In case the ContactInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactInfoUpdateInput, ContactInfoUncheckedUpdateInput>
  }

  /**
   * ContactInfo delete
   */
  export type ContactInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
    /**
     * Filter which ContactInfo to delete.
     */
    where: ContactInfoWhereUniqueInput
  }

  /**
   * ContactInfo deleteMany
   */
  export type ContactInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactInfos to delete
     */
    where?: ContactInfoWhereInput
    /**
     * Limit how many ContactInfos to delete.
     */
    limit?: number
  }

  /**
   * ContactInfo without action
   */
  export type ContactInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactInfo
     */
    select?: ContactInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactInfo
     */
    omit?: ContactInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInfoInclude<ExtArgs> | null
  }


  /**
   * Model OtherInfo
   */

  export type AggregateOtherInfo = {
    _count: OtherInfoCountAggregateOutputType | null
    _avg: OtherInfoAvgAggregateOutputType | null
    _sum: OtherInfoSumAggregateOutputType | null
    _min: OtherInfoMinAggregateOutputType | null
    _max: OtherInfoMaxAggregateOutputType | null
  }

  export type OtherInfoAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type OtherInfoSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type OtherInfoMinAggregateOutputType = {
    id: number | null
    workStatus: $Enums.WorkStatus | null
    resignedDate: Date | null
    documentsChecked: string | null
    updatedAt: Date | null
    VCB: string | null
    MTCV: string | null
    PNJ: string | null
    employeeId: number | null
  }

  export type OtherInfoMaxAggregateOutputType = {
    id: number | null
    workStatus: $Enums.WorkStatus | null
    resignedDate: Date | null
    documentsChecked: string | null
    updatedAt: Date | null
    VCB: string | null
    MTCV: string | null
    PNJ: string | null
    employeeId: number | null
  }

  export type OtherInfoCountAggregateOutputType = {
    id: number
    workStatus: number
    resignedDate: number
    documentsChecked: number
    updatedAt: number
    VCB: number
    MTCV: number
    PNJ: number
    employeeId: number
    _all: number
  }


  export type OtherInfoAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type OtherInfoSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type OtherInfoMinAggregateInputType = {
    id?: true
    workStatus?: true
    resignedDate?: true
    documentsChecked?: true
    updatedAt?: true
    VCB?: true
    MTCV?: true
    PNJ?: true
    employeeId?: true
  }

  export type OtherInfoMaxAggregateInputType = {
    id?: true
    workStatus?: true
    resignedDate?: true
    documentsChecked?: true
    updatedAt?: true
    VCB?: true
    MTCV?: true
    PNJ?: true
    employeeId?: true
  }

  export type OtherInfoCountAggregateInputType = {
    id?: true
    workStatus?: true
    resignedDate?: true
    documentsChecked?: true
    updatedAt?: true
    VCB?: true
    MTCV?: true
    PNJ?: true
    employeeId?: true
    _all?: true
  }

  export type OtherInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtherInfo to aggregate.
     */
    where?: OtherInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtherInfos to fetch.
     */
    orderBy?: OtherInfoOrderByWithRelationInput | OtherInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtherInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtherInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtherInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OtherInfos
    **/
    _count?: true | OtherInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OtherInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OtherInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtherInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtherInfoMaxAggregateInputType
  }

  export type GetOtherInfoAggregateType<T extends OtherInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateOtherInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtherInfo[P]>
      : GetScalarType<T[P], AggregateOtherInfo[P]>
  }




  export type OtherInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtherInfoWhereInput
    orderBy?: OtherInfoOrderByWithAggregationInput | OtherInfoOrderByWithAggregationInput[]
    by: OtherInfoScalarFieldEnum[] | OtherInfoScalarFieldEnum
    having?: OtherInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtherInfoCountAggregateInputType | true
    _avg?: OtherInfoAvgAggregateInputType
    _sum?: OtherInfoSumAggregateInputType
    _min?: OtherInfoMinAggregateInputType
    _max?: OtherInfoMaxAggregateInputType
  }

  export type OtherInfoGroupByOutputType = {
    id: number
    workStatus: $Enums.WorkStatus
    resignedDate: Date | null
    documentsChecked: string | null
    updatedAt: Date | null
    VCB: string | null
    MTCV: string | null
    PNJ: string | null
    employeeId: number
    _count: OtherInfoCountAggregateOutputType | null
    _avg: OtherInfoAvgAggregateOutputType | null
    _sum: OtherInfoSumAggregateOutputType | null
    _min: OtherInfoMinAggregateOutputType | null
    _max: OtherInfoMaxAggregateOutputType | null
  }

  type GetOtherInfoGroupByPayload<T extends OtherInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtherInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtherInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtherInfoGroupByOutputType[P]>
            : GetScalarType<T[P], OtherInfoGroupByOutputType[P]>
        }
      >
    >


  export type OtherInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workStatus?: boolean
    resignedDate?: boolean
    documentsChecked?: boolean
    updatedAt?: boolean
    VCB?: boolean
    MTCV?: boolean
    PNJ?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otherInfo"]>

  export type OtherInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workStatus?: boolean
    resignedDate?: boolean
    documentsChecked?: boolean
    updatedAt?: boolean
    VCB?: boolean
    MTCV?: boolean
    PNJ?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otherInfo"]>

  export type OtherInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workStatus?: boolean
    resignedDate?: boolean
    documentsChecked?: boolean
    updatedAt?: boolean
    VCB?: boolean
    MTCV?: boolean
    PNJ?: boolean
    employeeId?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["otherInfo"]>

  export type OtherInfoSelectScalar = {
    id?: boolean
    workStatus?: boolean
    resignedDate?: boolean
    documentsChecked?: boolean
    updatedAt?: boolean
    VCB?: boolean
    MTCV?: boolean
    PNJ?: boolean
    employeeId?: boolean
  }

  export type OtherInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workStatus" | "resignedDate" | "documentsChecked" | "updatedAt" | "VCB" | "MTCV" | "PNJ" | "employeeId", ExtArgs["result"]["otherInfo"]>
  export type OtherInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type OtherInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type OtherInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $OtherInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OtherInfo"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workStatus: $Enums.WorkStatus
      resignedDate: Date | null
      documentsChecked: string | null
      updatedAt: Date | null
      VCB: string | null
      MTCV: string | null
      PNJ: string | null
      employeeId: number
    }, ExtArgs["result"]["otherInfo"]>
    composites: {}
  }

  type OtherInfoGetPayload<S extends boolean | null | undefined | OtherInfoDefaultArgs> = $Result.GetResult<Prisma.$OtherInfoPayload, S>

  type OtherInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OtherInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OtherInfoCountAggregateInputType | true
    }

  export interface OtherInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OtherInfo'], meta: { name: 'OtherInfo' } }
    /**
     * Find zero or one OtherInfo that matches the filter.
     * @param {OtherInfoFindUniqueArgs} args - Arguments to find a OtherInfo
     * @example
     * // Get one OtherInfo
     * const otherInfo = await prisma.otherInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtherInfoFindUniqueArgs>(args: SelectSubset<T, OtherInfoFindUniqueArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OtherInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OtherInfoFindUniqueOrThrowArgs} args - Arguments to find a OtherInfo
     * @example
     * // Get one OtherInfo
     * const otherInfo = await prisma.otherInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtherInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, OtherInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OtherInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherInfoFindFirstArgs} args - Arguments to find a OtherInfo
     * @example
     * // Get one OtherInfo
     * const otherInfo = await prisma.otherInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtherInfoFindFirstArgs>(args?: SelectSubset<T, OtherInfoFindFirstArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OtherInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherInfoFindFirstOrThrowArgs} args - Arguments to find a OtherInfo
     * @example
     * // Get one OtherInfo
     * const otherInfo = await prisma.otherInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtherInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, OtherInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OtherInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OtherInfos
     * const otherInfos = await prisma.otherInfo.findMany()
     * 
     * // Get first 10 OtherInfos
     * const otherInfos = await prisma.otherInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otherInfoWithIdOnly = await prisma.otherInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OtherInfoFindManyArgs>(args?: SelectSubset<T, OtherInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OtherInfo.
     * @param {OtherInfoCreateArgs} args - Arguments to create a OtherInfo.
     * @example
     * // Create one OtherInfo
     * const OtherInfo = await prisma.otherInfo.create({
     *   data: {
     *     // ... data to create a OtherInfo
     *   }
     * })
     * 
     */
    create<T extends OtherInfoCreateArgs>(args: SelectSubset<T, OtherInfoCreateArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OtherInfos.
     * @param {OtherInfoCreateManyArgs} args - Arguments to create many OtherInfos.
     * @example
     * // Create many OtherInfos
     * const otherInfo = await prisma.otherInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtherInfoCreateManyArgs>(args?: SelectSubset<T, OtherInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OtherInfos and returns the data saved in the database.
     * @param {OtherInfoCreateManyAndReturnArgs} args - Arguments to create many OtherInfos.
     * @example
     * // Create many OtherInfos
     * const otherInfo = await prisma.otherInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OtherInfos and only return the `id`
     * const otherInfoWithIdOnly = await prisma.otherInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OtherInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, OtherInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OtherInfo.
     * @param {OtherInfoDeleteArgs} args - Arguments to delete one OtherInfo.
     * @example
     * // Delete one OtherInfo
     * const OtherInfo = await prisma.otherInfo.delete({
     *   where: {
     *     // ... filter to delete one OtherInfo
     *   }
     * })
     * 
     */
    delete<T extends OtherInfoDeleteArgs>(args: SelectSubset<T, OtherInfoDeleteArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OtherInfo.
     * @param {OtherInfoUpdateArgs} args - Arguments to update one OtherInfo.
     * @example
     * // Update one OtherInfo
     * const otherInfo = await prisma.otherInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtherInfoUpdateArgs>(args: SelectSubset<T, OtherInfoUpdateArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OtherInfos.
     * @param {OtherInfoDeleteManyArgs} args - Arguments to filter OtherInfos to delete.
     * @example
     * // Delete a few OtherInfos
     * const { count } = await prisma.otherInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtherInfoDeleteManyArgs>(args?: SelectSubset<T, OtherInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtherInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OtherInfos
     * const otherInfo = await prisma.otherInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtherInfoUpdateManyArgs>(args: SelectSubset<T, OtherInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtherInfos and returns the data updated in the database.
     * @param {OtherInfoUpdateManyAndReturnArgs} args - Arguments to update many OtherInfos.
     * @example
     * // Update many OtherInfos
     * const otherInfo = await prisma.otherInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OtherInfos and only return the `id`
     * const otherInfoWithIdOnly = await prisma.otherInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OtherInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, OtherInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OtherInfo.
     * @param {OtherInfoUpsertArgs} args - Arguments to update or create a OtherInfo.
     * @example
     * // Update or create a OtherInfo
     * const otherInfo = await prisma.otherInfo.upsert({
     *   create: {
     *     // ... data to create a OtherInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OtherInfo we want to update
     *   }
     * })
     */
    upsert<T extends OtherInfoUpsertArgs>(args: SelectSubset<T, OtherInfoUpsertArgs<ExtArgs>>): Prisma__OtherInfoClient<$Result.GetResult<Prisma.$OtherInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OtherInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherInfoCountArgs} args - Arguments to filter OtherInfos to count.
     * @example
     * // Count the number of OtherInfos
     * const count = await prisma.otherInfo.count({
     *   where: {
     *     // ... the filter for the OtherInfos we want to count
     *   }
     * })
    **/
    count<T extends OtherInfoCountArgs>(
      args?: Subset<T, OtherInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtherInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OtherInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtherInfoAggregateArgs>(args: Subset<T, OtherInfoAggregateArgs>): Prisma.PrismaPromise<GetOtherInfoAggregateType<T>>

    /**
     * Group by OtherInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtherInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtherInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtherInfoGroupByArgs['orderBy'] }
        : { orderBy?: OtherInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtherInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtherInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OtherInfo model
   */
  readonly fields: OtherInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OtherInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtherInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OtherInfo model
   */
  interface OtherInfoFieldRefs {
    readonly id: FieldRef<"OtherInfo", 'Int'>
    readonly workStatus: FieldRef<"OtherInfo", 'WorkStatus'>
    readonly resignedDate: FieldRef<"OtherInfo", 'DateTime'>
    readonly documentsChecked: FieldRef<"OtherInfo", 'String'>
    readonly updatedAt: FieldRef<"OtherInfo", 'DateTime'>
    readonly VCB: FieldRef<"OtherInfo", 'String'>
    readonly MTCV: FieldRef<"OtherInfo", 'String'>
    readonly PNJ: FieldRef<"OtherInfo", 'String'>
    readonly employeeId: FieldRef<"OtherInfo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OtherInfo findUnique
   */
  export type OtherInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * Filter, which OtherInfo to fetch.
     */
    where: OtherInfoWhereUniqueInput
  }

  /**
   * OtherInfo findUniqueOrThrow
   */
  export type OtherInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * Filter, which OtherInfo to fetch.
     */
    where: OtherInfoWhereUniqueInput
  }

  /**
   * OtherInfo findFirst
   */
  export type OtherInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * Filter, which OtherInfo to fetch.
     */
    where?: OtherInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtherInfos to fetch.
     */
    orderBy?: OtherInfoOrderByWithRelationInput | OtherInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtherInfos.
     */
    cursor?: OtherInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtherInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtherInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtherInfos.
     */
    distinct?: OtherInfoScalarFieldEnum | OtherInfoScalarFieldEnum[]
  }

  /**
   * OtherInfo findFirstOrThrow
   */
  export type OtherInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * Filter, which OtherInfo to fetch.
     */
    where?: OtherInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtherInfos to fetch.
     */
    orderBy?: OtherInfoOrderByWithRelationInput | OtherInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtherInfos.
     */
    cursor?: OtherInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtherInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtherInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtherInfos.
     */
    distinct?: OtherInfoScalarFieldEnum | OtherInfoScalarFieldEnum[]
  }

  /**
   * OtherInfo findMany
   */
  export type OtherInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * Filter, which OtherInfos to fetch.
     */
    where?: OtherInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtherInfos to fetch.
     */
    orderBy?: OtherInfoOrderByWithRelationInput | OtherInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OtherInfos.
     */
    cursor?: OtherInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtherInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtherInfos.
     */
    skip?: number
    distinct?: OtherInfoScalarFieldEnum | OtherInfoScalarFieldEnum[]
  }

  /**
   * OtherInfo create
   */
  export type OtherInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a OtherInfo.
     */
    data: XOR<OtherInfoCreateInput, OtherInfoUncheckedCreateInput>
  }

  /**
   * OtherInfo createMany
   */
  export type OtherInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OtherInfos.
     */
    data: OtherInfoCreateManyInput | OtherInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OtherInfo createManyAndReturn
   */
  export type OtherInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * The data used to create many OtherInfos.
     */
    data: OtherInfoCreateManyInput | OtherInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OtherInfo update
   */
  export type OtherInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a OtherInfo.
     */
    data: XOR<OtherInfoUpdateInput, OtherInfoUncheckedUpdateInput>
    /**
     * Choose, which OtherInfo to update.
     */
    where: OtherInfoWhereUniqueInput
  }

  /**
   * OtherInfo updateMany
   */
  export type OtherInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OtherInfos.
     */
    data: XOR<OtherInfoUpdateManyMutationInput, OtherInfoUncheckedUpdateManyInput>
    /**
     * Filter which OtherInfos to update
     */
    where?: OtherInfoWhereInput
    /**
     * Limit how many OtherInfos to update.
     */
    limit?: number
  }

  /**
   * OtherInfo updateManyAndReturn
   */
  export type OtherInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * The data used to update OtherInfos.
     */
    data: XOR<OtherInfoUpdateManyMutationInput, OtherInfoUncheckedUpdateManyInput>
    /**
     * Filter which OtherInfos to update
     */
    where?: OtherInfoWhereInput
    /**
     * Limit how many OtherInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OtherInfo upsert
   */
  export type OtherInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the OtherInfo to update in case it exists.
     */
    where: OtherInfoWhereUniqueInput
    /**
     * In case the OtherInfo found by the `where` argument doesn't exist, create a new OtherInfo with this data.
     */
    create: XOR<OtherInfoCreateInput, OtherInfoUncheckedCreateInput>
    /**
     * In case the OtherInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtherInfoUpdateInput, OtherInfoUncheckedUpdateInput>
  }

  /**
   * OtherInfo delete
   */
  export type OtherInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
    /**
     * Filter which OtherInfo to delete.
     */
    where: OtherInfoWhereUniqueInput
  }

  /**
   * OtherInfo deleteMany
   */
  export type OtherInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtherInfos to delete
     */
    where?: OtherInfoWhereInput
    /**
     * Limit how many OtherInfos to delete.
     */
    limit?: number
  }

  /**
   * OtherInfo without action
   */
  export type OtherInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtherInfo
     */
    select?: OtherInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OtherInfo
     */
    omit?: OtherInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtherInfoInclude<ExtArgs> | null
  }


  /**
   * Model LeaveRequest
   */

  export type AggregateLeaveRequest = {
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  export type LeaveRequestAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    totalHours: number | null
  }

  export type LeaveRequestSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    totalHours: number | null
  }

  export type LeaveRequestMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    leaveType: $Enums.LeaveTypeEnum | null
    startDate: Date | null
    endDate: Date | null
    totalHours: number | null
    reason: string | null
    status: $Enums.LeaveStatus | null
    approvedBy: string | null
    approvedAt: Date | null
    createdAt: Date | null
  }

  export type LeaveRequestMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    leaveType: $Enums.LeaveTypeEnum | null
    startDate: Date | null
    endDate: Date | null
    totalHours: number | null
    reason: string | null
    status: $Enums.LeaveStatus | null
    approvedBy: string | null
    approvedAt: Date | null
    createdAt: Date | null
  }

  export type LeaveRequestCountAggregateOutputType = {
    id: number
    employeeId: number
    leaveType: number
    startDate: number
    endDate: number
    totalHours: number
    reason: number
    status: number
    approvedBy: number
    approvedAt: number
    createdAt: number
    _all: number
  }


  export type LeaveRequestAvgAggregateInputType = {
    id?: true
    employeeId?: true
    totalHours?: true
  }

  export type LeaveRequestSumAggregateInputType = {
    id?: true
    employeeId?: true
    totalHours?: true
  }

  export type LeaveRequestMinAggregateInputType = {
    id?: true
    employeeId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    totalHours?: true
    reason?: true
    status?: true
    approvedBy?: true
    approvedAt?: true
    createdAt?: true
  }

  export type LeaveRequestMaxAggregateInputType = {
    id?: true
    employeeId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    totalHours?: true
    reason?: true
    status?: true
    approvedBy?: true
    approvedAt?: true
    createdAt?: true
  }

  export type LeaveRequestCountAggregateInputType = {
    id?: true
    employeeId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    totalHours?: true
    reason?: true
    status?: true
    approvedBy?: true
    approvedAt?: true
    createdAt?: true
    _all?: true
  }

  export type LeaveRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequest to aggregate.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveRequests
    **/
    _count?: true | LeaveRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type GetLeaveRequestAggregateType<T extends LeaveRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveRequest[P]>
      : GetScalarType<T[P], AggregateLeaveRequest[P]>
  }




  export type LeaveRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveRequestWhereInput
    orderBy?: LeaveRequestOrderByWithAggregationInput | LeaveRequestOrderByWithAggregationInput[]
    by: LeaveRequestScalarFieldEnum[] | LeaveRequestScalarFieldEnum
    having?: LeaveRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveRequestCountAggregateInputType | true
    _avg?: LeaveRequestAvgAggregateInputType
    _sum?: LeaveRequestSumAggregateInputType
    _min?: LeaveRequestMinAggregateInputType
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type LeaveRequestGroupByOutputType = {
    id: number
    employeeId: number
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date
    endDate: Date
    totalHours: number | null
    reason: string | null
    status: $Enums.LeaveStatus
    approvedBy: string | null
    approvedAt: Date | null
    createdAt: Date
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  type GetLeaveRequestGroupByPayload<T extends LeaveRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
        }
      >
    >


  export type LeaveRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    leaveType?: boolean
    startDate?: boolean
    endDate?: boolean
    totalHours?: boolean
    reason?: boolean
    status?: boolean
    approvedBy?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    approvalSteps?: boolean | LeaveRequest$approvalStepsArgs<ExtArgs>
    _count?: boolean | LeaveRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    leaveType?: boolean
    startDate?: boolean
    endDate?: boolean
    totalHours?: boolean
    reason?: boolean
    status?: boolean
    approvedBy?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    leaveType?: boolean
    startDate?: boolean
    endDate?: boolean
    totalHours?: boolean
    reason?: boolean
    status?: boolean
    approvedBy?: boolean
    approvedAt?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>

  export type LeaveRequestSelectScalar = {
    id?: boolean
    employeeId?: boolean
    leaveType?: boolean
    startDate?: boolean
    endDate?: boolean
    totalHours?: boolean
    reason?: boolean
    status?: boolean
    approvedBy?: boolean
    approvedAt?: boolean
    createdAt?: boolean
  }

  export type LeaveRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "leaveType" | "startDate" | "endDate" | "totalHours" | "reason" | "status" | "approvedBy" | "approvedAt" | "createdAt", ExtArgs["result"]["leaveRequest"]>
  export type LeaveRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    approvalSteps?: boolean | LeaveRequest$approvalStepsArgs<ExtArgs>
    _count?: boolean | LeaveRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeaveRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type LeaveRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $LeaveRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveRequest"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      approvalSteps: Prisma.$LeaveApprovalStepPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      leaveType: $Enums.LeaveTypeEnum
      startDate: Date
      endDate: Date
      totalHours: number | null
      reason: string | null
      status: $Enums.LeaveStatus
      approvedBy: string | null
      approvedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["leaveRequest"]>
    composites: {}
  }

  type LeaveRequestGetPayload<S extends boolean | null | undefined | LeaveRequestDefaultArgs> = $Result.GetResult<Prisma.$LeaveRequestPayload, S>

  type LeaveRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaveRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaveRequestCountAggregateInputType | true
    }

  export interface LeaveRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveRequest'], meta: { name: 'LeaveRequest' } }
    /**
     * Find zero or one LeaveRequest that matches the filter.
     * @param {LeaveRequestFindUniqueArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveRequestFindUniqueArgs>(args: SelectSubset<T, LeaveRequestFindUniqueArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeaveRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaveRequestFindUniqueOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveRequestFindFirstArgs>(args?: SelectSubset<T, LeaveRequestFindFirstArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindFirstOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeaveRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany()
     * 
     * // Get first 10 LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveRequestFindManyArgs>(args?: SelectSubset<T, LeaveRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeaveRequest.
     * @param {LeaveRequestCreateArgs} args - Arguments to create a LeaveRequest.
     * @example
     * // Create one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.create({
     *   data: {
     *     // ... data to create a LeaveRequest
     *   }
     * })
     * 
     */
    create<T extends LeaveRequestCreateArgs>(args: SelectSubset<T, LeaveRequestCreateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeaveRequests.
     * @param {LeaveRequestCreateManyArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveRequestCreateManyArgs>(args?: SelectSubset<T, LeaveRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveRequests and returns the data saved in the database.
     * @param {LeaveRequestCreateManyAndReturnArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveRequests and only return the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeaveRequest.
     * @param {LeaveRequestDeleteArgs} args - Arguments to delete one LeaveRequest.
     * @example
     * // Delete one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.delete({
     *   where: {
     *     // ... filter to delete one LeaveRequest
     *   }
     * })
     * 
     */
    delete<T extends LeaveRequestDeleteArgs>(args: SelectSubset<T, LeaveRequestDeleteArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeaveRequest.
     * @param {LeaveRequestUpdateArgs} args - Arguments to update one LeaveRequest.
     * @example
     * // Update one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveRequestUpdateArgs>(args: SelectSubset<T, LeaveRequestUpdateArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeaveRequests.
     * @param {LeaveRequestDeleteManyArgs} args - Arguments to filter LeaveRequests to delete.
     * @example
     * // Delete a few LeaveRequests
     * const { count } = await prisma.leaveRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveRequestDeleteManyArgs>(args?: SelectSubset<T, LeaveRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveRequestUpdateManyArgs>(args: SelectSubset<T, LeaveRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveRequests and returns the data updated in the database.
     * @param {LeaveRequestUpdateManyAndReturnArgs} args - Arguments to update many LeaveRequests.
     * @example
     * // Update many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeaveRequests and only return the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeaveRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, LeaveRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeaveRequest.
     * @param {LeaveRequestUpsertArgs} args - Arguments to update or create a LeaveRequest.
     * @example
     * // Update or create a LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.upsert({
     *   create: {
     *     // ... data to create a LeaveRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveRequest we want to update
     *   }
     * })
     */
    upsert<T extends LeaveRequestUpsertArgs>(args: SelectSubset<T, LeaveRequestUpsertArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestCountArgs} args - Arguments to filter LeaveRequests to count.
     * @example
     * // Count the number of LeaveRequests
     * const count = await prisma.leaveRequest.count({
     *   where: {
     *     // ... the filter for the LeaveRequests we want to count
     *   }
     * })
    **/
    count<T extends LeaveRequestCountArgs>(
      args?: Subset<T, LeaveRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveRequestAggregateArgs>(args: Subset<T, LeaveRequestAggregateArgs>): Prisma.PrismaPromise<GetLeaveRequestAggregateType<T>>

    /**
     * Group by LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveRequestGroupByArgs['orderBy'] }
        : { orderBy?: LeaveRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveRequest model
   */
  readonly fields: LeaveRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    approvalSteps<T extends LeaveRequest$approvalStepsArgs<ExtArgs> = {}>(args?: Subset<T, LeaveRequest$approvalStepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveRequest model
   */
  interface LeaveRequestFieldRefs {
    readonly id: FieldRef<"LeaveRequest", 'Int'>
    readonly employeeId: FieldRef<"LeaveRequest", 'Int'>
    readonly leaveType: FieldRef<"LeaveRequest", 'LeaveTypeEnum'>
    readonly startDate: FieldRef<"LeaveRequest", 'DateTime'>
    readonly endDate: FieldRef<"LeaveRequest", 'DateTime'>
    readonly totalHours: FieldRef<"LeaveRequest", 'Float'>
    readonly reason: FieldRef<"LeaveRequest", 'String'>
    readonly status: FieldRef<"LeaveRequest", 'LeaveStatus'>
    readonly approvedBy: FieldRef<"LeaveRequest", 'String'>
    readonly approvedAt: FieldRef<"LeaveRequest", 'DateTime'>
    readonly createdAt: FieldRef<"LeaveRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeaveRequest findUnique
   */
  export type LeaveRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findUniqueOrThrow
   */
  export type LeaveRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest findFirst
   */
  export type LeaveRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findFirstOrThrow
   */
  export type LeaveRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequest to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest findMany
   */
  export type LeaveRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which LeaveRequests to fetch.
     */
    where?: LeaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveRequests to fetch.
     */
    orderBy?: LeaveRequestOrderByWithRelationInput | LeaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveRequests.
     */
    cursor?: LeaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveRequests.
     */
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * LeaveRequest create
   */
  export type LeaveRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveRequest.
     */
    data: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
  }

  /**
   * LeaveRequest createMany
   */
  export type LeaveRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaveRequest createManyAndReturn
   */
  export type LeaveRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * The data used to create many LeaveRequests.
     */
    data: LeaveRequestCreateManyInput | LeaveRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveRequest update
   */
  export type LeaveRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveRequest.
     */
    data: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
    /**
     * Choose, which LeaveRequest to update.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest updateMany
   */
  export type LeaveRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveRequests.
     */
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyInput>
    /**
     * Filter which LeaveRequests to update
     */
    where?: LeaveRequestWhereInput
    /**
     * Limit how many LeaveRequests to update.
     */
    limit?: number
  }

  /**
   * LeaveRequest updateManyAndReturn
   */
  export type LeaveRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * The data used to update LeaveRequests.
     */
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyInput>
    /**
     * Filter which LeaveRequests to update
     */
    where?: LeaveRequestWhereInput
    /**
     * Limit how many LeaveRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveRequest upsert
   */
  export type LeaveRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveRequest to update in case it exists.
     */
    where: LeaveRequestWhereUniqueInput
    /**
     * In case the LeaveRequest found by the `where` argument doesn't exist, create a new LeaveRequest with this data.
     */
    create: XOR<LeaveRequestCreateInput, LeaveRequestUncheckedCreateInput>
    /**
     * In case the LeaveRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveRequestUpdateInput, LeaveRequestUncheckedUpdateInput>
  }

  /**
   * LeaveRequest delete
   */
  export type LeaveRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
    /**
     * Filter which LeaveRequest to delete.
     */
    where: LeaveRequestWhereUniqueInput
  }

  /**
   * LeaveRequest deleteMany
   */
  export type LeaveRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveRequests to delete
     */
    where?: LeaveRequestWhereInput
    /**
     * Limit how many LeaveRequests to delete.
     */
    limit?: number
  }

  /**
   * LeaveRequest.approvalSteps
   */
  export type LeaveRequest$approvalStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    where?: LeaveApprovalStepWhereInput
    orderBy?: LeaveApprovalStepOrderByWithRelationInput | LeaveApprovalStepOrderByWithRelationInput[]
    cursor?: LeaveApprovalStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveApprovalStepScalarFieldEnum | LeaveApprovalStepScalarFieldEnum[]
  }

  /**
   * LeaveRequest without action
   */
  export type LeaveRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveRequest
     */
    select?: LeaveRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveRequest
     */
    omit?: LeaveRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveRequestInclude<ExtArgs> | null
  }


  /**
   * Model LeaveApprovalStep
   */

  export type AggregateLeaveApprovalStep = {
    _count: LeaveApprovalStepCountAggregateOutputType | null
    _avg: LeaveApprovalStepAvgAggregateOutputType | null
    _sum: LeaveApprovalStepSumAggregateOutputType | null
    _min: LeaveApprovalStepMinAggregateOutputType | null
    _max: LeaveApprovalStepMaxAggregateOutputType | null
  }

  export type LeaveApprovalStepAvgAggregateOutputType = {
    id: number | null
    leaveRequestId: number | null
    level: number | null
  }

  export type LeaveApprovalStepSumAggregateOutputType = {
    id: number | null
    leaveRequestId: number | null
    level: number | null
  }

  export type LeaveApprovalStepMinAggregateOutputType = {
    id: number | null
    leaveRequestId: number | null
    level: number | null
    status: $Enums.LeaveStatus | null
    approvedAt: Date | null
  }

  export type LeaveApprovalStepMaxAggregateOutputType = {
    id: number | null
    leaveRequestId: number | null
    level: number | null
    status: $Enums.LeaveStatus | null
    approvedAt: Date | null
  }

  export type LeaveApprovalStepCountAggregateOutputType = {
    id: number
    leaveRequestId: number
    level: number
    status: number
    approvedAt: number
    _all: number
  }


  export type LeaveApprovalStepAvgAggregateInputType = {
    id?: true
    leaveRequestId?: true
    level?: true
  }

  export type LeaveApprovalStepSumAggregateInputType = {
    id?: true
    leaveRequestId?: true
    level?: true
  }

  export type LeaveApprovalStepMinAggregateInputType = {
    id?: true
    leaveRequestId?: true
    level?: true
    status?: true
    approvedAt?: true
  }

  export type LeaveApprovalStepMaxAggregateInputType = {
    id?: true
    leaveRequestId?: true
    level?: true
    status?: true
    approvedAt?: true
  }

  export type LeaveApprovalStepCountAggregateInputType = {
    id?: true
    leaveRequestId?: true
    level?: true
    status?: true
    approvedAt?: true
    _all?: true
  }

  export type LeaveApprovalStepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveApprovalStep to aggregate.
     */
    where?: LeaveApprovalStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveApprovalSteps to fetch.
     */
    orderBy?: LeaveApprovalStepOrderByWithRelationInput | LeaveApprovalStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveApprovalStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveApprovalSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveApprovalSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveApprovalSteps
    **/
    _count?: true | LeaveApprovalStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveApprovalStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveApprovalStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveApprovalStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveApprovalStepMaxAggregateInputType
  }

  export type GetLeaveApprovalStepAggregateType<T extends LeaveApprovalStepAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveApprovalStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveApprovalStep[P]>
      : GetScalarType<T[P], AggregateLeaveApprovalStep[P]>
  }




  export type LeaveApprovalStepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveApprovalStepWhereInput
    orderBy?: LeaveApprovalStepOrderByWithAggregationInput | LeaveApprovalStepOrderByWithAggregationInput[]
    by: LeaveApprovalStepScalarFieldEnum[] | LeaveApprovalStepScalarFieldEnum
    having?: LeaveApprovalStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveApprovalStepCountAggregateInputType | true
    _avg?: LeaveApprovalStepAvgAggregateInputType
    _sum?: LeaveApprovalStepSumAggregateInputType
    _min?: LeaveApprovalStepMinAggregateInputType
    _max?: LeaveApprovalStepMaxAggregateInputType
  }

  export type LeaveApprovalStepGroupByOutputType = {
    id: number
    leaveRequestId: number
    level: number
    status: $Enums.LeaveStatus
    approvedAt: Date | null
    _count: LeaveApprovalStepCountAggregateOutputType | null
    _avg: LeaveApprovalStepAvgAggregateOutputType | null
    _sum: LeaveApprovalStepSumAggregateOutputType | null
    _min: LeaveApprovalStepMinAggregateOutputType | null
    _max: LeaveApprovalStepMaxAggregateOutputType | null
  }

  type GetLeaveApprovalStepGroupByPayload<T extends LeaveApprovalStepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveApprovalStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveApprovalStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveApprovalStepGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveApprovalStepGroupByOutputType[P]>
        }
      >
    >


  export type LeaveApprovalStepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveRequestId?: boolean
    level?: boolean
    status?: boolean
    approvedAt?: boolean
    leaveRequest?: boolean | LeaveRequestDefaultArgs<ExtArgs>
    approvers?: boolean | LeaveApprovalStep$approversArgs<ExtArgs>
    _count?: boolean | LeaveApprovalStepCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveApprovalStep"]>

  export type LeaveApprovalStepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveRequestId?: boolean
    level?: boolean
    status?: boolean
    approvedAt?: boolean
    leaveRequest?: boolean | LeaveRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveApprovalStep"]>

  export type LeaveApprovalStepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveRequestId?: boolean
    level?: boolean
    status?: boolean
    approvedAt?: boolean
    leaveRequest?: boolean | LeaveRequestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveApprovalStep"]>

  export type LeaveApprovalStepSelectScalar = {
    id?: boolean
    leaveRequestId?: boolean
    level?: boolean
    status?: boolean
    approvedAt?: boolean
  }

  export type LeaveApprovalStepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "leaveRequestId" | "level" | "status" | "approvedAt", ExtArgs["result"]["leaveApprovalStep"]>
  export type LeaveApprovalStepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveRequest?: boolean | LeaveRequestDefaultArgs<ExtArgs>
    approvers?: boolean | LeaveApprovalStep$approversArgs<ExtArgs>
    _count?: boolean | LeaveApprovalStepCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeaveApprovalStepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveRequest?: boolean | LeaveRequestDefaultArgs<ExtArgs>
  }
  export type LeaveApprovalStepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveRequest?: boolean | LeaveRequestDefaultArgs<ExtArgs>
  }

  export type $LeaveApprovalStepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveApprovalStep"
    objects: {
      leaveRequest: Prisma.$LeaveRequestPayload<ExtArgs>
      approvers: Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      leaveRequestId: number
      level: number
      status: $Enums.LeaveStatus
      approvedAt: Date | null
    }, ExtArgs["result"]["leaveApprovalStep"]>
    composites: {}
  }

  type LeaveApprovalStepGetPayload<S extends boolean | null | undefined | LeaveApprovalStepDefaultArgs> = $Result.GetResult<Prisma.$LeaveApprovalStepPayload, S>

  type LeaveApprovalStepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaveApprovalStepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaveApprovalStepCountAggregateInputType | true
    }

  export interface LeaveApprovalStepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveApprovalStep'], meta: { name: 'LeaveApprovalStep' } }
    /**
     * Find zero or one LeaveApprovalStep that matches the filter.
     * @param {LeaveApprovalStepFindUniqueArgs} args - Arguments to find a LeaveApprovalStep
     * @example
     * // Get one LeaveApprovalStep
     * const leaveApprovalStep = await prisma.leaveApprovalStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveApprovalStepFindUniqueArgs>(args: SelectSubset<T, LeaveApprovalStepFindUniqueArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeaveApprovalStep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaveApprovalStepFindUniqueOrThrowArgs} args - Arguments to find a LeaveApprovalStep
     * @example
     * // Get one LeaveApprovalStep
     * const leaveApprovalStep = await prisma.leaveApprovalStep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveApprovalStepFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveApprovalStepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveApprovalStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepFindFirstArgs} args - Arguments to find a LeaveApprovalStep
     * @example
     * // Get one LeaveApprovalStep
     * const leaveApprovalStep = await prisma.leaveApprovalStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveApprovalStepFindFirstArgs>(args?: SelectSubset<T, LeaveApprovalStepFindFirstArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveApprovalStep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepFindFirstOrThrowArgs} args - Arguments to find a LeaveApprovalStep
     * @example
     * // Get one LeaveApprovalStep
     * const leaveApprovalStep = await prisma.leaveApprovalStep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveApprovalStepFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveApprovalStepFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeaveApprovalSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveApprovalSteps
     * const leaveApprovalSteps = await prisma.leaveApprovalStep.findMany()
     * 
     * // Get first 10 LeaveApprovalSteps
     * const leaveApprovalSteps = await prisma.leaveApprovalStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveApprovalStepWithIdOnly = await prisma.leaveApprovalStep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveApprovalStepFindManyArgs>(args?: SelectSubset<T, LeaveApprovalStepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeaveApprovalStep.
     * @param {LeaveApprovalStepCreateArgs} args - Arguments to create a LeaveApprovalStep.
     * @example
     * // Create one LeaveApprovalStep
     * const LeaveApprovalStep = await prisma.leaveApprovalStep.create({
     *   data: {
     *     // ... data to create a LeaveApprovalStep
     *   }
     * })
     * 
     */
    create<T extends LeaveApprovalStepCreateArgs>(args: SelectSubset<T, LeaveApprovalStepCreateArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeaveApprovalSteps.
     * @param {LeaveApprovalStepCreateManyArgs} args - Arguments to create many LeaveApprovalSteps.
     * @example
     * // Create many LeaveApprovalSteps
     * const leaveApprovalStep = await prisma.leaveApprovalStep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveApprovalStepCreateManyArgs>(args?: SelectSubset<T, LeaveApprovalStepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveApprovalSteps and returns the data saved in the database.
     * @param {LeaveApprovalStepCreateManyAndReturnArgs} args - Arguments to create many LeaveApprovalSteps.
     * @example
     * // Create many LeaveApprovalSteps
     * const leaveApprovalStep = await prisma.leaveApprovalStep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveApprovalSteps and only return the `id`
     * const leaveApprovalStepWithIdOnly = await prisma.leaveApprovalStep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveApprovalStepCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveApprovalStepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeaveApprovalStep.
     * @param {LeaveApprovalStepDeleteArgs} args - Arguments to delete one LeaveApprovalStep.
     * @example
     * // Delete one LeaveApprovalStep
     * const LeaveApprovalStep = await prisma.leaveApprovalStep.delete({
     *   where: {
     *     // ... filter to delete one LeaveApprovalStep
     *   }
     * })
     * 
     */
    delete<T extends LeaveApprovalStepDeleteArgs>(args: SelectSubset<T, LeaveApprovalStepDeleteArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeaveApprovalStep.
     * @param {LeaveApprovalStepUpdateArgs} args - Arguments to update one LeaveApprovalStep.
     * @example
     * // Update one LeaveApprovalStep
     * const leaveApprovalStep = await prisma.leaveApprovalStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveApprovalStepUpdateArgs>(args: SelectSubset<T, LeaveApprovalStepUpdateArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeaveApprovalSteps.
     * @param {LeaveApprovalStepDeleteManyArgs} args - Arguments to filter LeaveApprovalSteps to delete.
     * @example
     * // Delete a few LeaveApprovalSteps
     * const { count } = await prisma.leaveApprovalStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveApprovalStepDeleteManyArgs>(args?: SelectSubset<T, LeaveApprovalStepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveApprovalSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveApprovalSteps
     * const leaveApprovalStep = await prisma.leaveApprovalStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveApprovalStepUpdateManyArgs>(args: SelectSubset<T, LeaveApprovalStepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveApprovalSteps and returns the data updated in the database.
     * @param {LeaveApprovalStepUpdateManyAndReturnArgs} args - Arguments to update many LeaveApprovalSteps.
     * @example
     * // Update many LeaveApprovalSteps
     * const leaveApprovalStep = await prisma.leaveApprovalStep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeaveApprovalSteps and only return the `id`
     * const leaveApprovalStepWithIdOnly = await prisma.leaveApprovalStep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeaveApprovalStepUpdateManyAndReturnArgs>(args: SelectSubset<T, LeaveApprovalStepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeaveApprovalStep.
     * @param {LeaveApprovalStepUpsertArgs} args - Arguments to update or create a LeaveApprovalStep.
     * @example
     * // Update or create a LeaveApprovalStep
     * const leaveApprovalStep = await prisma.leaveApprovalStep.upsert({
     *   create: {
     *     // ... data to create a LeaveApprovalStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveApprovalStep we want to update
     *   }
     * })
     */
    upsert<T extends LeaveApprovalStepUpsertArgs>(args: SelectSubset<T, LeaveApprovalStepUpsertArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeaveApprovalSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepCountArgs} args - Arguments to filter LeaveApprovalSteps to count.
     * @example
     * // Count the number of LeaveApprovalSteps
     * const count = await prisma.leaveApprovalStep.count({
     *   where: {
     *     // ... the filter for the LeaveApprovalSteps we want to count
     *   }
     * })
    **/
    count<T extends LeaveApprovalStepCountArgs>(
      args?: Subset<T, LeaveApprovalStepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveApprovalStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveApprovalStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveApprovalStepAggregateArgs>(args: Subset<T, LeaveApprovalStepAggregateArgs>): Prisma.PrismaPromise<GetLeaveApprovalStepAggregateType<T>>

    /**
     * Group by LeaveApprovalStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveApprovalStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveApprovalStepGroupByArgs['orderBy'] }
        : { orderBy?: LeaveApprovalStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveApprovalStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveApprovalStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveApprovalStep model
   */
  readonly fields: LeaveApprovalStepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveApprovalStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveApprovalStepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leaveRequest<T extends LeaveRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeaveRequestDefaultArgs<ExtArgs>>): Prisma__LeaveRequestClient<$Result.GetResult<Prisma.$LeaveRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    approvers<T extends LeaveApprovalStep$approversArgs<ExtArgs> = {}>(args?: Subset<T, LeaveApprovalStep$approversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveApprovalStep model
   */
  interface LeaveApprovalStepFieldRefs {
    readonly id: FieldRef<"LeaveApprovalStep", 'Int'>
    readonly leaveRequestId: FieldRef<"LeaveApprovalStep", 'Int'>
    readonly level: FieldRef<"LeaveApprovalStep", 'Int'>
    readonly status: FieldRef<"LeaveApprovalStep", 'LeaveStatus'>
    readonly approvedAt: FieldRef<"LeaveApprovalStep", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeaveApprovalStep findUnique
   */
  export type LeaveApprovalStepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStep to fetch.
     */
    where: LeaveApprovalStepWhereUniqueInput
  }

  /**
   * LeaveApprovalStep findUniqueOrThrow
   */
  export type LeaveApprovalStepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStep to fetch.
     */
    where: LeaveApprovalStepWhereUniqueInput
  }

  /**
   * LeaveApprovalStep findFirst
   */
  export type LeaveApprovalStepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStep to fetch.
     */
    where?: LeaveApprovalStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveApprovalSteps to fetch.
     */
    orderBy?: LeaveApprovalStepOrderByWithRelationInput | LeaveApprovalStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveApprovalSteps.
     */
    cursor?: LeaveApprovalStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveApprovalSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveApprovalSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveApprovalSteps.
     */
    distinct?: LeaveApprovalStepScalarFieldEnum | LeaveApprovalStepScalarFieldEnum[]
  }

  /**
   * LeaveApprovalStep findFirstOrThrow
   */
  export type LeaveApprovalStepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStep to fetch.
     */
    where?: LeaveApprovalStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveApprovalSteps to fetch.
     */
    orderBy?: LeaveApprovalStepOrderByWithRelationInput | LeaveApprovalStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveApprovalSteps.
     */
    cursor?: LeaveApprovalStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveApprovalSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveApprovalSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveApprovalSteps.
     */
    distinct?: LeaveApprovalStepScalarFieldEnum | LeaveApprovalStepScalarFieldEnum[]
  }

  /**
   * LeaveApprovalStep findMany
   */
  export type LeaveApprovalStepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalSteps to fetch.
     */
    where?: LeaveApprovalStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveApprovalSteps to fetch.
     */
    orderBy?: LeaveApprovalStepOrderByWithRelationInput | LeaveApprovalStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveApprovalSteps.
     */
    cursor?: LeaveApprovalStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveApprovalSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveApprovalSteps.
     */
    skip?: number
    distinct?: LeaveApprovalStepScalarFieldEnum | LeaveApprovalStepScalarFieldEnum[]
  }

  /**
   * LeaveApprovalStep create
   */
  export type LeaveApprovalStepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveApprovalStep.
     */
    data: XOR<LeaveApprovalStepCreateInput, LeaveApprovalStepUncheckedCreateInput>
  }

  /**
   * LeaveApprovalStep createMany
   */
  export type LeaveApprovalStepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveApprovalSteps.
     */
    data: LeaveApprovalStepCreateManyInput | LeaveApprovalStepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaveApprovalStep createManyAndReturn
   */
  export type LeaveApprovalStepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * The data used to create many LeaveApprovalSteps.
     */
    data: LeaveApprovalStepCreateManyInput | LeaveApprovalStepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveApprovalStep update
   */
  export type LeaveApprovalStepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveApprovalStep.
     */
    data: XOR<LeaveApprovalStepUpdateInput, LeaveApprovalStepUncheckedUpdateInput>
    /**
     * Choose, which LeaveApprovalStep to update.
     */
    where: LeaveApprovalStepWhereUniqueInput
  }

  /**
   * LeaveApprovalStep updateMany
   */
  export type LeaveApprovalStepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveApprovalSteps.
     */
    data: XOR<LeaveApprovalStepUpdateManyMutationInput, LeaveApprovalStepUncheckedUpdateManyInput>
    /**
     * Filter which LeaveApprovalSteps to update
     */
    where?: LeaveApprovalStepWhereInput
    /**
     * Limit how many LeaveApprovalSteps to update.
     */
    limit?: number
  }

  /**
   * LeaveApprovalStep updateManyAndReturn
   */
  export type LeaveApprovalStepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * The data used to update LeaveApprovalSteps.
     */
    data: XOR<LeaveApprovalStepUpdateManyMutationInput, LeaveApprovalStepUncheckedUpdateManyInput>
    /**
     * Filter which LeaveApprovalSteps to update
     */
    where?: LeaveApprovalStepWhereInput
    /**
     * Limit how many LeaveApprovalSteps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveApprovalStep upsert
   */
  export type LeaveApprovalStepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveApprovalStep to update in case it exists.
     */
    where: LeaveApprovalStepWhereUniqueInput
    /**
     * In case the LeaveApprovalStep found by the `where` argument doesn't exist, create a new LeaveApprovalStep with this data.
     */
    create: XOR<LeaveApprovalStepCreateInput, LeaveApprovalStepUncheckedCreateInput>
    /**
     * In case the LeaveApprovalStep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveApprovalStepUpdateInput, LeaveApprovalStepUncheckedUpdateInput>
  }

  /**
   * LeaveApprovalStep delete
   */
  export type LeaveApprovalStepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
    /**
     * Filter which LeaveApprovalStep to delete.
     */
    where: LeaveApprovalStepWhereUniqueInput
  }

  /**
   * LeaveApprovalStep deleteMany
   */
  export type LeaveApprovalStepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveApprovalSteps to delete
     */
    where?: LeaveApprovalStepWhereInput
    /**
     * Limit how many LeaveApprovalSteps to delete.
     */
    limit?: number
  }

  /**
   * LeaveApprovalStep.approvers
   */
  export type LeaveApprovalStep$approversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    where?: LeaveApprovalStepApproverWhereInput
    orderBy?: LeaveApprovalStepApproverOrderByWithRelationInput | LeaveApprovalStepApproverOrderByWithRelationInput[]
    cursor?: LeaveApprovalStepApproverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveApprovalStepApproverScalarFieldEnum | LeaveApprovalStepApproverScalarFieldEnum[]
  }

  /**
   * LeaveApprovalStep without action
   */
  export type LeaveApprovalStepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStep
     */
    select?: LeaveApprovalStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStep
     */
    omit?: LeaveApprovalStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepInclude<ExtArgs> | null
  }


  /**
   * Model LeaveApprovalStepApprover
   */

  export type AggregateLeaveApprovalStepApprover = {
    _count: LeaveApprovalStepApproverCountAggregateOutputType | null
    _avg: LeaveApprovalStepApproverAvgAggregateOutputType | null
    _sum: LeaveApprovalStepApproverSumAggregateOutputType | null
    _min: LeaveApprovalStepApproverMinAggregateOutputType | null
    _max: LeaveApprovalStepApproverMaxAggregateOutputType | null
  }

  export type LeaveApprovalStepApproverAvgAggregateOutputType = {
    id: number | null
    leaveApprovalStepId: number | null
    approverId: number | null
  }

  export type LeaveApprovalStepApproverSumAggregateOutputType = {
    id: number | null
    leaveApprovalStepId: number | null
    approverId: number | null
  }

  export type LeaveApprovalStepApproverMinAggregateOutputType = {
    id: number | null
    leaveApprovalStepId: number | null
    approverId: number | null
    status: $Enums.LeaveStatus | null
    approvedAt: Date | null
  }

  export type LeaveApprovalStepApproverMaxAggregateOutputType = {
    id: number | null
    leaveApprovalStepId: number | null
    approverId: number | null
    status: $Enums.LeaveStatus | null
    approvedAt: Date | null
  }

  export type LeaveApprovalStepApproverCountAggregateOutputType = {
    id: number
    leaveApprovalStepId: number
    approverId: number
    status: number
    approvedAt: number
    _all: number
  }


  export type LeaveApprovalStepApproverAvgAggregateInputType = {
    id?: true
    leaveApprovalStepId?: true
    approverId?: true
  }

  export type LeaveApprovalStepApproverSumAggregateInputType = {
    id?: true
    leaveApprovalStepId?: true
    approverId?: true
  }

  export type LeaveApprovalStepApproverMinAggregateInputType = {
    id?: true
    leaveApprovalStepId?: true
    approverId?: true
    status?: true
    approvedAt?: true
  }

  export type LeaveApprovalStepApproverMaxAggregateInputType = {
    id?: true
    leaveApprovalStepId?: true
    approverId?: true
    status?: true
    approvedAt?: true
  }

  export type LeaveApprovalStepApproverCountAggregateInputType = {
    id?: true
    leaveApprovalStepId?: true
    approverId?: true
    status?: true
    approvedAt?: true
    _all?: true
  }

  export type LeaveApprovalStepApproverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveApprovalStepApprover to aggregate.
     */
    where?: LeaveApprovalStepApproverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveApprovalStepApprovers to fetch.
     */
    orderBy?: LeaveApprovalStepApproverOrderByWithRelationInput | LeaveApprovalStepApproverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveApprovalStepApproverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveApprovalStepApprovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveApprovalStepApprovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeaveApprovalStepApprovers
    **/
    _count?: true | LeaveApprovalStepApproverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveApprovalStepApproverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveApprovalStepApproverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveApprovalStepApproverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveApprovalStepApproverMaxAggregateInputType
  }

  export type GetLeaveApprovalStepApproverAggregateType<T extends LeaveApprovalStepApproverAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveApprovalStepApprover]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveApprovalStepApprover[P]>
      : GetScalarType<T[P], AggregateLeaveApprovalStepApprover[P]>
  }




  export type LeaveApprovalStepApproverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveApprovalStepApproverWhereInput
    orderBy?: LeaveApprovalStepApproverOrderByWithAggregationInput | LeaveApprovalStepApproverOrderByWithAggregationInput[]
    by: LeaveApprovalStepApproverScalarFieldEnum[] | LeaveApprovalStepApproverScalarFieldEnum
    having?: LeaveApprovalStepApproverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveApprovalStepApproverCountAggregateInputType | true
    _avg?: LeaveApprovalStepApproverAvgAggregateInputType
    _sum?: LeaveApprovalStepApproverSumAggregateInputType
    _min?: LeaveApprovalStepApproverMinAggregateInputType
    _max?: LeaveApprovalStepApproverMaxAggregateInputType
  }

  export type LeaveApprovalStepApproverGroupByOutputType = {
    id: number
    leaveApprovalStepId: number
    approverId: number
    status: $Enums.LeaveStatus
    approvedAt: Date | null
    _count: LeaveApprovalStepApproverCountAggregateOutputType | null
    _avg: LeaveApprovalStepApproverAvgAggregateOutputType | null
    _sum: LeaveApprovalStepApproverSumAggregateOutputType | null
    _min: LeaveApprovalStepApproverMinAggregateOutputType | null
    _max: LeaveApprovalStepApproverMaxAggregateOutputType | null
  }

  type GetLeaveApprovalStepApproverGroupByPayload<T extends LeaveApprovalStepApproverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveApprovalStepApproverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveApprovalStepApproverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveApprovalStepApproverGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveApprovalStepApproverGroupByOutputType[P]>
        }
      >
    >


  export type LeaveApprovalStepApproverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveApprovalStepId?: boolean
    approverId?: boolean
    status?: boolean
    approvedAt?: boolean
    leaveApprovalStep?: boolean | LeaveApprovalStepDefaultArgs<ExtArgs>
    approver?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveApprovalStepApprover"]>

  export type LeaveApprovalStepApproverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveApprovalStepId?: boolean
    approverId?: boolean
    status?: boolean
    approvedAt?: boolean
    leaveApprovalStep?: boolean | LeaveApprovalStepDefaultArgs<ExtArgs>
    approver?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveApprovalStepApprover"]>

  export type LeaveApprovalStepApproverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leaveApprovalStepId?: boolean
    approverId?: boolean
    status?: boolean
    approvedAt?: boolean
    leaveApprovalStep?: boolean | LeaveApprovalStepDefaultArgs<ExtArgs>
    approver?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leaveApprovalStepApprover"]>

  export type LeaveApprovalStepApproverSelectScalar = {
    id?: boolean
    leaveApprovalStepId?: boolean
    approverId?: boolean
    status?: boolean
    approvedAt?: boolean
  }

  export type LeaveApprovalStepApproverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "leaveApprovalStepId" | "approverId" | "status" | "approvedAt", ExtArgs["result"]["leaveApprovalStepApprover"]>
  export type LeaveApprovalStepApproverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveApprovalStep?: boolean | LeaveApprovalStepDefaultArgs<ExtArgs>
    approver?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type LeaveApprovalStepApproverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveApprovalStep?: boolean | LeaveApprovalStepDefaultArgs<ExtArgs>
    approver?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type LeaveApprovalStepApproverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leaveApprovalStep?: boolean | LeaveApprovalStepDefaultArgs<ExtArgs>
    approver?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $LeaveApprovalStepApproverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeaveApprovalStepApprover"
    objects: {
      leaveApprovalStep: Prisma.$LeaveApprovalStepPayload<ExtArgs>
      approver: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      leaveApprovalStepId: number
      approverId: number
      status: $Enums.LeaveStatus
      approvedAt: Date | null
    }, ExtArgs["result"]["leaveApprovalStepApprover"]>
    composites: {}
  }

  type LeaveApprovalStepApproverGetPayload<S extends boolean | null | undefined | LeaveApprovalStepApproverDefaultArgs> = $Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload, S>

  type LeaveApprovalStepApproverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeaveApprovalStepApproverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeaveApprovalStepApproverCountAggregateInputType | true
    }

  export interface LeaveApprovalStepApproverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeaveApprovalStepApprover'], meta: { name: 'LeaveApprovalStepApprover' } }
    /**
     * Find zero or one LeaveApprovalStepApprover that matches the filter.
     * @param {LeaveApprovalStepApproverFindUniqueArgs} args - Arguments to find a LeaveApprovalStepApprover
     * @example
     * // Get one LeaveApprovalStepApprover
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveApprovalStepApproverFindUniqueArgs>(args: SelectSubset<T, LeaveApprovalStepApproverFindUniqueArgs<ExtArgs>>): Prisma__LeaveApprovalStepApproverClient<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LeaveApprovalStepApprover that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeaveApprovalStepApproverFindUniqueOrThrowArgs} args - Arguments to find a LeaveApprovalStepApprover
     * @example
     * // Get one LeaveApprovalStepApprover
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveApprovalStepApproverFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveApprovalStepApproverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveApprovalStepApproverClient<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveApprovalStepApprover that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepApproverFindFirstArgs} args - Arguments to find a LeaveApprovalStepApprover
     * @example
     * // Get one LeaveApprovalStepApprover
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveApprovalStepApproverFindFirstArgs>(args?: SelectSubset<T, LeaveApprovalStepApproverFindFirstArgs<ExtArgs>>): Prisma__LeaveApprovalStepApproverClient<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LeaveApprovalStepApprover that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepApproverFindFirstOrThrowArgs} args - Arguments to find a LeaveApprovalStepApprover
     * @example
     * // Get one LeaveApprovalStepApprover
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveApprovalStepApproverFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveApprovalStepApproverFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveApprovalStepApproverClient<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LeaveApprovalStepApprovers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepApproverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveApprovalStepApprovers
     * const leaveApprovalStepApprovers = await prisma.leaveApprovalStepApprover.findMany()
     * 
     * // Get first 10 LeaveApprovalStepApprovers
     * const leaveApprovalStepApprovers = await prisma.leaveApprovalStepApprover.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveApprovalStepApproverWithIdOnly = await prisma.leaveApprovalStepApprover.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveApprovalStepApproverFindManyArgs>(args?: SelectSubset<T, LeaveApprovalStepApproverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LeaveApprovalStepApprover.
     * @param {LeaveApprovalStepApproverCreateArgs} args - Arguments to create a LeaveApprovalStepApprover.
     * @example
     * // Create one LeaveApprovalStepApprover
     * const LeaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.create({
     *   data: {
     *     // ... data to create a LeaveApprovalStepApprover
     *   }
     * })
     * 
     */
    create<T extends LeaveApprovalStepApproverCreateArgs>(args: SelectSubset<T, LeaveApprovalStepApproverCreateArgs<ExtArgs>>): Prisma__LeaveApprovalStepApproverClient<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LeaveApprovalStepApprovers.
     * @param {LeaveApprovalStepApproverCreateManyArgs} args - Arguments to create many LeaveApprovalStepApprovers.
     * @example
     * // Create many LeaveApprovalStepApprovers
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveApprovalStepApproverCreateManyArgs>(args?: SelectSubset<T, LeaveApprovalStepApproverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeaveApprovalStepApprovers and returns the data saved in the database.
     * @param {LeaveApprovalStepApproverCreateManyAndReturnArgs} args - Arguments to create many LeaveApprovalStepApprovers.
     * @example
     * // Create many LeaveApprovalStepApprovers
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeaveApprovalStepApprovers and only return the `id`
     * const leaveApprovalStepApproverWithIdOnly = await prisma.leaveApprovalStepApprover.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeaveApprovalStepApproverCreateManyAndReturnArgs>(args?: SelectSubset<T, LeaveApprovalStepApproverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LeaveApprovalStepApprover.
     * @param {LeaveApprovalStepApproverDeleteArgs} args - Arguments to delete one LeaveApprovalStepApprover.
     * @example
     * // Delete one LeaveApprovalStepApprover
     * const LeaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.delete({
     *   where: {
     *     // ... filter to delete one LeaveApprovalStepApprover
     *   }
     * })
     * 
     */
    delete<T extends LeaveApprovalStepApproverDeleteArgs>(args: SelectSubset<T, LeaveApprovalStepApproverDeleteArgs<ExtArgs>>): Prisma__LeaveApprovalStepApproverClient<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LeaveApprovalStepApprover.
     * @param {LeaveApprovalStepApproverUpdateArgs} args - Arguments to update one LeaveApprovalStepApprover.
     * @example
     * // Update one LeaveApprovalStepApprover
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveApprovalStepApproverUpdateArgs>(args: SelectSubset<T, LeaveApprovalStepApproverUpdateArgs<ExtArgs>>): Prisma__LeaveApprovalStepApproverClient<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LeaveApprovalStepApprovers.
     * @param {LeaveApprovalStepApproverDeleteManyArgs} args - Arguments to filter LeaveApprovalStepApprovers to delete.
     * @example
     * // Delete a few LeaveApprovalStepApprovers
     * const { count } = await prisma.leaveApprovalStepApprover.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveApprovalStepApproverDeleteManyArgs>(args?: SelectSubset<T, LeaveApprovalStepApproverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveApprovalStepApprovers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepApproverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveApprovalStepApprovers
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveApprovalStepApproverUpdateManyArgs>(args: SelectSubset<T, LeaveApprovalStepApproverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveApprovalStepApprovers and returns the data updated in the database.
     * @param {LeaveApprovalStepApproverUpdateManyAndReturnArgs} args - Arguments to update many LeaveApprovalStepApprovers.
     * @example
     * // Update many LeaveApprovalStepApprovers
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LeaveApprovalStepApprovers and only return the `id`
     * const leaveApprovalStepApproverWithIdOnly = await prisma.leaveApprovalStepApprover.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeaveApprovalStepApproverUpdateManyAndReturnArgs>(args: SelectSubset<T, LeaveApprovalStepApproverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LeaveApprovalStepApprover.
     * @param {LeaveApprovalStepApproverUpsertArgs} args - Arguments to update or create a LeaveApprovalStepApprover.
     * @example
     * // Update or create a LeaveApprovalStepApprover
     * const leaveApprovalStepApprover = await prisma.leaveApprovalStepApprover.upsert({
     *   create: {
     *     // ... data to create a LeaveApprovalStepApprover
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveApprovalStepApprover we want to update
     *   }
     * })
     */
    upsert<T extends LeaveApprovalStepApproverUpsertArgs>(args: SelectSubset<T, LeaveApprovalStepApproverUpsertArgs<ExtArgs>>): Prisma__LeaveApprovalStepApproverClient<$Result.GetResult<Prisma.$LeaveApprovalStepApproverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LeaveApprovalStepApprovers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepApproverCountArgs} args - Arguments to filter LeaveApprovalStepApprovers to count.
     * @example
     * // Count the number of LeaveApprovalStepApprovers
     * const count = await prisma.leaveApprovalStepApprover.count({
     *   where: {
     *     // ... the filter for the LeaveApprovalStepApprovers we want to count
     *   }
     * })
    **/
    count<T extends LeaveApprovalStepApproverCountArgs>(
      args?: Subset<T, LeaveApprovalStepApproverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveApprovalStepApproverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveApprovalStepApprover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepApproverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveApprovalStepApproverAggregateArgs>(args: Subset<T, LeaveApprovalStepApproverAggregateArgs>): Prisma.PrismaPromise<GetLeaveApprovalStepApproverAggregateType<T>>

    /**
     * Group by LeaveApprovalStepApprover.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveApprovalStepApproverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveApprovalStepApproverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveApprovalStepApproverGroupByArgs['orderBy'] }
        : { orderBy?: LeaveApprovalStepApproverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveApprovalStepApproverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveApprovalStepApproverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeaveApprovalStepApprover model
   */
  readonly fields: LeaveApprovalStepApproverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeaveApprovalStepApprover.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveApprovalStepApproverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leaveApprovalStep<T extends LeaveApprovalStepDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeaveApprovalStepDefaultArgs<ExtArgs>>): Prisma__LeaveApprovalStepClient<$Result.GetResult<Prisma.$LeaveApprovalStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    approver<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeaveApprovalStepApprover model
   */
  interface LeaveApprovalStepApproverFieldRefs {
    readonly id: FieldRef<"LeaveApprovalStepApprover", 'Int'>
    readonly leaveApprovalStepId: FieldRef<"LeaveApprovalStepApprover", 'Int'>
    readonly approverId: FieldRef<"LeaveApprovalStepApprover", 'Int'>
    readonly status: FieldRef<"LeaveApprovalStepApprover", 'LeaveStatus'>
    readonly approvedAt: FieldRef<"LeaveApprovalStepApprover", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LeaveApprovalStepApprover findUnique
   */
  export type LeaveApprovalStepApproverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStepApprover to fetch.
     */
    where: LeaveApprovalStepApproverWhereUniqueInput
  }

  /**
   * LeaveApprovalStepApprover findUniqueOrThrow
   */
  export type LeaveApprovalStepApproverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStepApprover to fetch.
     */
    where: LeaveApprovalStepApproverWhereUniqueInput
  }

  /**
   * LeaveApprovalStepApprover findFirst
   */
  export type LeaveApprovalStepApproverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStepApprover to fetch.
     */
    where?: LeaveApprovalStepApproverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveApprovalStepApprovers to fetch.
     */
    orderBy?: LeaveApprovalStepApproverOrderByWithRelationInput | LeaveApprovalStepApproverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveApprovalStepApprovers.
     */
    cursor?: LeaveApprovalStepApproverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveApprovalStepApprovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveApprovalStepApprovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveApprovalStepApprovers.
     */
    distinct?: LeaveApprovalStepApproverScalarFieldEnum | LeaveApprovalStepApproverScalarFieldEnum[]
  }

  /**
   * LeaveApprovalStepApprover findFirstOrThrow
   */
  export type LeaveApprovalStepApproverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStepApprover to fetch.
     */
    where?: LeaveApprovalStepApproverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveApprovalStepApprovers to fetch.
     */
    orderBy?: LeaveApprovalStepApproverOrderByWithRelationInput | LeaveApprovalStepApproverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeaveApprovalStepApprovers.
     */
    cursor?: LeaveApprovalStepApproverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveApprovalStepApprovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveApprovalStepApprovers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeaveApprovalStepApprovers.
     */
    distinct?: LeaveApprovalStepApproverScalarFieldEnum | LeaveApprovalStepApproverScalarFieldEnum[]
  }

  /**
   * LeaveApprovalStepApprover findMany
   */
  export type LeaveApprovalStepApproverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * Filter, which LeaveApprovalStepApprovers to fetch.
     */
    where?: LeaveApprovalStepApproverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeaveApprovalStepApprovers to fetch.
     */
    orderBy?: LeaveApprovalStepApproverOrderByWithRelationInput | LeaveApprovalStepApproverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeaveApprovalStepApprovers.
     */
    cursor?: LeaveApprovalStepApproverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeaveApprovalStepApprovers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeaveApprovalStepApprovers.
     */
    skip?: number
    distinct?: LeaveApprovalStepApproverScalarFieldEnum | LeaveApprovalStepApproverScalarFieldEnum[]
  }

  /**
   * LeaveApprovalStepApprover create
   */
  export type LeaveApprovalStepApproverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * The data needed to create a LeaveApprovalStepApprover.
     */
    data: XOR<LeaveApprovalStepApproverCreateInput, LeaveApprovalStepApproverUncheckedCreateInput>
  }

  /**
   * LeaveApprovalStepApprover createMany
   */
  export type LeaveApprovalStepApproverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeaveApprovalStepApprovers.
     */
    data: LeaveApprovalStepApproverCreateManyInput | LeaveApprovalStepApproverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeaveApprovalStepApprover createManyAndReturn
   */
  export type LeaveApprovalStepApproverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * The data used to create many LeaveApprovalStepApprovers.
     */
    data: LeaveApprovalStepApproverCreateManyInput | LeaveApprovalStepApproverCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveApprovalStepApprover update
   */
  export type LeaveApprovalStepApproverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * The data needed to update a LeaveApprovalStepApprover.
     */
    data: XOR<LeaveApprovalStepApproverUpdateInput, LeaveApprovalStepApproverUncheckedUpdateInput>
    /**
     * Choose, which LeaveApprovalStepApprover to update.
     */
    where: LeaveApprovalStepApproverWhereUniqueInput
  }

  /**
   * LeaveApprovalStepApprover updateMany
   */
  export type LeaveApprovalStepApproverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeaveApprovalStepApprovers.
     */
    data: XOR<LeaveApprovalStepApproverUpdateManyMutationInput, LeaveApprovalStepApproverUncheckedUpdateManyInput>
    /**
     * Filter which LeaveApprovalStepApprovers to update
     */
    where?: LeaveApprovalStepApproverWhereInput
    /**
     * Limit how many LeaveApprovalStepApprovers to update.
     */
    limit?: number
  }

  /**
   * LeaveApprovalStepApprover updateManyAndReturn
   */
  export type LeaveApprovalStepApproverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * The data used to update LeaveApprovalStepApprovers.
     */
    data: XOR<LeaveApprovalStepApproverUpdateManyMutationInput, LeaveApprovalStepApproverUncheckedUpdateManyInput>
    /**
     * Filter which LeaveApprovalStepApprovers to update
     */
    where?: LeaveApprovalStepApproverWhereInput
    /**
     * Limit how many LeaveApprovalStepApprovers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeaveApprovalStepApprover upsert
   */
  export type LeaveApprovalStepApproverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * The filter to search for the LeaveApprovalStepApprover to update in case it exists.
     */
    where: LeaveApprovalStepApproverWhereUniqueInput
    /**
     * In case the LeaveApprovalStepApprover found by the `where` argument doesn't exist, create a new LeaveApprovalStepApprover with this data.
     */
    create: XOR<LeaveApprovalStepApproverCreateInput, LeaveApprovalStepApproverUncheckedCreateInput>
    /**
     * In case the LeaveApprovalStepApprover was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveApprovalStepApproverUpdateInput, LeaveApprovalStepApproverUncheckedUpdateInput>
  }

  /**
   * LeaveApprovalStepApprover delete
   */
  export type LeaveApprovalStepApproverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
    /**
     * Filter which LeaveApprovalStepApprover to delete.
     */
    where: LeaveApprovalStepApproverWhereUniqueInput
  }

  /**
   * LeaveApprovalStepApprover deleteMany
   */
  export type LeaveApprovalStepApproverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeaveApprovalStepApprovers to delete
     */
    where?: LeaveApprovalStepApproverWhereInput
    /**
     * Limit how many LeaveApprovalStepApprovers to delete.
     */
    limit?: number
  }

  /**
   * LeaveApprovalStepApprover without action
   */
  export type LeaveApprovalStepApproverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeaveApprovalStepApprover
     */
    select?: LeaveApprovalStepApproverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LeaveApprovalStepApprover
     */
    omit?: LeaveApprovalStepApproverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveApprovalStepApproverInclude<ExtArgs> | null
  }


  /**
   * Model Attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type AttendanceSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    date: Date | null
    checkInTime: Date | null
    checkOutTime: Date | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    date: Date | null
    checkInTime: Date | null
    checkOutTime: Date | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    employeeId: number
    date: number
    checkInTime: number
    checkOutTime: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type AttendanceSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type AttendanceMinAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    checkInTime?: true
    checkOutTime?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    checkInTime?: true
    checkOutTime?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    checkInTime?: true
    checkOutTime?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance to aggregate.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type AttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithAggregationInput | AttendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: AttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: number
    employeeId: number
    date: Date
    checkInTime: Date | null
    checkOutTime: Date | null
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends AttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    date?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    date?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    date?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectScalar = {
    id?: boolean
    employeeId?: boolean
    date?: boolean
    checkInTime?: boolean
    checkOutTime?: boolean
  }

  export type AttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "employeeId" | "date" | "checkInTime" | "checkOutTime", ExtArgs["result"]["attendance"]>
  export type AttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $AttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendance"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      date: Date
      checkInTime: Date | null
      checkOutTime: Date | null
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type AttendanceGetPayload<S extends boolean | null | undefined | AttendanceDefaultArgs> = $Result.GetResult<Prisma.$AttendancePayload, S>

  type AttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface AttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance'], meta: { name: 'Attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {AttendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceFindUniqueArgs>(args: SelectSubset<T, AttendanceFindUniqueArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceFindFirstArgs>(args?: SelectSubset<T, AttendanceFindFirstArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceFindManyArgs>(args?: SelectSubset<T, AttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attendance.
     * @param {AttendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends AttendanceCreateArgs>(args: SelectSubset<T, AttendanceCreateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attendances.
     * @param {AttendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceCreateManyArgs>(args?: SelectSubset<T, AttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attendances and returns the data saved in the database.
     * @param {AttendanceCreateManyAndReturnArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Attendance.
     * @param {AttendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends AttendanceDeleteArgs>(args: SelectSubset<T, AttendanceDeleteArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attendance.
     * @param {AttendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceUpdateArgs>(args: SelectSubset<T, AttendanceUpdateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attendances.
     * @param {AttendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceDeleteManyArgs>(args?: SelectSubset<T, AttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceUpdateManyArgs>(args: SelectSubset<T, AttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances and returns the data updated in the database.
     * @param {AttendanceUpdateManyAndReturnArgs} args - Arguments to update many Attendances.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Attendance.
     * @param {AttendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceUpsertArgs>(args: SelectSubset<T, AttendanceUpsertArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends AttendanceCountArgs>(
      args?: Subset<T, AttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendance model
   */
  readonly fields: AttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendance model
   */
  interface AttendanceFieldRefs {
    readonly id: FieldRef<"Attendance", 'Int'>
    readonly employeeId: FieldRef<"Attendance", 'Int'>
    readonly date: FieldRef<"Attendance", 'DateTime'>
    readonly checkInTime: FieldRef<"Attendance", 'DateTime'>
    readonly checkOutTime: FieldRef<"Attendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attendance findUnique
   */
  export type AttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findUniqueOrThrow
   */
  export type AttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findFirst
   */
  export type AttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findFirstOrThrow
   */
  export type AttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findMany
   */
  export type AttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendances to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance create
   */
  export type AttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendance.
     */
    data: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
  }

  /**
   * Attendance createMany
   */
  export type AttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attendance createManyAndReturn
   */
  export type AttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance update
   */
  export type AttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendance.
     */
    data: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
    /**
     * Choose, which Attendance to update.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance updateMany
   */
  export type AttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
  }

  /**
   * Attendance updateManyAndReturn
   */
  export type AttendanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance upsert
   */
  export type AttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendance to update in case it exists.
     */
    where: AttendanceWhereUniqueInput
    /**
     * In case the Attendance found by the `where` argument doesn't exist, create a new Attendance with this data.
     */
    create: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
    /**
     * In case the Attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
  }

  /**
   * Attendance delete
   */
  export type AttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter which Attendance to delete.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance deleteMany
   */
  export type AttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendances to delete
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to delete.
     */
    limit?: number
  }

  /**
   * Attendance without action
   */
  export type AttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
  }


  /**
   * Model KPI
   */

  export type AggregateKPI = {
    _count: KPICountAggregateOutputType | null
    _avg: KPIAvgAggregateOutputType | null
    _sum: KPISumAggregateOutputType | null
    _min: KPIMinAggregateOutputType | null
    _max: KPIMaxAggregateOutputType | null
  }

  export type KPIAvgAggregateOutputType = {
    id: number | null
  }

  export type KPISumAggregateOutputType = {
    id: number | null
  }

  export type KPIMinAggregateOutputType = {
    id: number | null
    name: string | null
    period: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KPIMaxAggregateOutputType = {
    id: number | null
    name: string | null
    period: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KPICountAggregateOutputType = {
    id: number
    name: number
    period: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KPIAvgAggregateInputType = {
    id?: true
  }

  export type KPISumAggregateInputType = {
    id?: true
  }

  export type KPIMinAggregateInputType = {
    id?: true
    name?: true
    period?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KPIMaxAggregateInputType = {
    id?: true
    name?: true
    period?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KPICountAggregateInputType = {
    id?: true
    name?: true
    period?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KPIAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPI to aggregate.
     */
    where?: KPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIS to fetch.
     */
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KPIS
    **/
    _count?: true | KPICountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KPIAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KPISumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KPIMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KPIMaxAggregateInputType
  }

  export type GetKPIAggregateType<T extends KPIAggregateArgs> = {
        [P in keyof T & keyof AggregateKPI]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKPI[P]>
      : GetScalarType<T[P], AggregateKPI[P]>
  }




  export type KPIGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIWhereInput
    orderBy?: KPIOrderByWithAggregationInput | KPIOrderByWithAggregationInput[]
    by: KPIScalarFieldEnum[] | KPIScalarFieldEnum
    having?: KPIScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KPICountAggregateInputType | true
    _avg?: KPIAvgAggregateInputType
    _sum?: KPISumAggregateInputType
    _min?: KPIMinAggregateInputType
    _max?: KPIMaxAggregateInputType
  }

  export type KPIGroupByOutputType = {
    id: number
    name: string
    period: string
    createdAt: Date
    updatedAt: Date
    _count: KPICountAggregateOutputType | null
    _avg: KPIAvgAggregateOutputType | null
    _sum: KPISumAggregateOutputType | null
    _min: KPIMinAggregateOutputType | null
    _max: KPIMaxAggregateOutputType | null
  }

  type GetKPIGroupByPayload<T extends KPIGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KPIGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KPIGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KPIGroupByOutputType[P]>
            : GetScalarType<T[P], KPIGroupByOutputType[P]>
        }
      >
    >


  export type KPISelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    period?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kpiEmployees?: boolean | KPI$kpiEmployeesArgs<ExtArgs>
    _count?: boolean | KPICountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kPI"]>

  export type KPISelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    period?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["kPI"]>

  export type KPISelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    period?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["kPI"]>

  export type KPISelectScalar = {
    id?: boolean
    name?: boolean
    period?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KPIOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "period" | "createdAt" | "updatedAt", ExtArgs["result"]["kPI"]>
  export type KPIInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpiEmployees?: boolean | KPI$kpiEmployeesArgs<ExtArgs>
    _count?: boolean | KPICountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KPIIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type KPIIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $KPIPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KPI"
    objects: {
      kpiEmployees: Prisma.$KPIEmployeePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      period: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kPI"]>
    composites: {}
  }

  type KPIGetPayload<S extends boolean | null | undefined | KPIDefaultArgs> = $Result.GetResult<Prisma.$KPIPayload, S>

  type KPICountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KPIFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KPICountAggregateInputType | true
    }

  export interface KPIDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KPI'], meta: { name: 'KPI' } }
    /**
     * Find zero or one KPI that matches the filter.
     * @param {KPIFindUniqueArgs} args - Arguments to find a KPI
     * @example
     * // Get one KPI
     * const kPI = await prisma.kPI.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KPIFindUniqueArgs>(args: SelectSubset<T, KPIFindUniqueArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KPI that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KPIFindUniqueOrThrowArgs} args - Arguments to find a KPI
     * @example
     * // Get one KPI
     * const kPI = await prisma.kPI.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KPIFindUniqueOrThrowArgs>(args: SelectSubset<T, KPIFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPI that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIFindFirstArgs} args - Arguments to find a KPI
     * @example
     * // Get one KPI
     * const kPI = await prisma.kPI.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KPIFindFirstArgs>(args?: SelectSubset<T, KPIFindFirstArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPI that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIFindFirstOrThrowArgs} args - Arguments to find a KPI
     * @example
     * // Get one KPI
     * const kPI = await prisma.kPI.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KPIFindFirstOrThrowArgs>(args?: SelectSubset<T, KPIFindFirstOrThrowArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KPIS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KPIS
     * const kPIS = await prisma.kPI.findMany()
     * 
     * // Get first 10 KPIS
     * const kPIS = await prisma.kPI.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kPIWithIdOnly = await prisma.kPI.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KPIFindManyArgs>(args?: SelectSubset<T, KPIFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KPI.
     * @param {KPICreateArgs} args - Arguments to create a KPI.
     * @example
     * // Create one KPI
     * const KPI = await prisma.kPI.create({
     *   data: {
     *     // ... data to create a KPI
     *   }
     * })
     * 
     */
    create<T extends KPICreateArgs>(args: SelectSubset<T, KPICreateArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KPIS.
     * @param {KPICreateManyArgs} args - Arguments to create many KPIS.
     * @example
     * // Create many KPIS
     * const kPI = await prisma.kPI.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KPICreateManyArgs>(args?: SelectSubset<T, KPICreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KPIS and returns the data saved in the database.
     * @param {KPICreateManyAndReturnArgs} args - Arguments to create many KPIS.
     * @example
     * // Create many KPIS
     * const kPI = await prisma.kPI.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KPIS and only return the `id`
     * const kPIWithIdOnly = await prisma.kPI.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KPICreateManyAndReturnArgs>(args?: SelectSubset<T, KPICreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KPI.
     * @param {KPIDeleteArgs} args - Arguments to delete one KPI.
     * @example
     * // Delete one KPI
     * const KPI = await prisma.kPI.delete({
     *   where: {
     *     // ... filter to delete one KPI
     *   }
     * })
     * 
     */
    delete<T extends KPIDeleteArgs>(args: SelectSubset<T, KPIDeleteArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KPI.
     * @param {KPIUpdateArgs} args - Arguments to update one KPI.
     * @example
     * // Update one KPI
     * const kPI = await prisma.kPI.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KPIUpdateArgs>(args: SelectSubset<T, KPIUpdateArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KPIS.
     * @param {KPIDeleteManyArgs} args - Arguments to filter KPIS to delete.
     * @example
     * // Delete a few KPIS
     * const { count } = await prisma.kPI.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KPIDeleteManyArgs>(args?: SelectSubset<T, KPIDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KPIS
     * const kPI = await prisma.kPI.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KPIUpdateManyArgs>(args: SelectSubset<T, KPIUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIS and returns the data updated in the database.
     * @param {KPIUpdateManyAndReturnArgs} args - Arguments to update many KPIS.
     * @example
     * // Update many KPIS
     * const kPI = await prisma.kPI.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KPIS and only return the `id`
     * const kPIWithIdOnly = await prisma.kPI.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KPIUpdateManyAndReturnArgs>(args: SelectSubset<T, KPIUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KPI.
     * @param {KPIUpsertArgs} args - Arguments to update or create a KPI.
     * @example
     * // Update or create a KPI
     * const kPI = await prisma.kPI.upsert({
     *   create: {
     *     // ... data to create a KPI
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KPI we want to update
     *   }
     * })
     */
    upsert<T extends KPIUpsertArgs>(args: SelectSubset<T, KPIUpsertArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KPIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPICountArgs} args - Arguments to filter KPIS to count.
     * @example
     * // Count the number of KPIS
     * const count = await prisma.kPI.count({
     *   where: {
     *     // ... the filter for the KPIS we want to count
     *   }
     * })
    **/
    count<T extends KPICountArgs>(
      args?: Subset<T, KPICountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KPICountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KPI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KPIAggregateArgs>(args: Subset<T, KPIAggregateArgs>): Prisma.PrismaPromise<GetKPIAggregateType<T>>

    /**
     * Group by KPI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KPIGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KPIGroupByArgs['orderBy'] }
        : { orderBy?: KPIGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KPIGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKPIGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KPI model
   */
  readonly fields: KPIFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KPI.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KPIClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kpiEmployees<T extends KPI$kpiEmployeesArgs<ExtArgs> = {}>(args?: Subset<T, KPI$kpiEmployeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KPI model
   */
  interface KPIFieldRefs {
    readonly id: FieldRef<"KPI", 'Int'>
    readonly name: FieldRef<"KPI", 'String'>
    readonly period: FieldRef<"KPI", 'String'>
    readonly createdAt: FieldRef<"KPI", 'DateTime'>
    readonly updatedAt: FieldRef<"KPI", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KPI findUnique
   */
  export type KPIFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPI to fetch.
     */
    where: KPIWhereUniqueInput
  }

  /**
   * KPI findUniqueOrThrow
   */
  export type KPIFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPI to fetch.
     */
    where: KPIWhereUniqueInput
  }

  /**
   * KPI findFirst
   */
  export type KPIFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPI to fetch.
     */
    where?: KPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIS to fetch.
     */
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIS.
     */
    cursor?: KPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIS.
     */
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * KPI findFirstOrThrow
   */
  export type KPIFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPI to fetch.
     */
    where?: KPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIS to fetch.
     */
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIS.
     */
    cursor?: KPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIS.
     */
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * KPI findMany
   */
  export type KPIFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPIS to fetch.
     */
    where?: KPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIS to fetch.
     */
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KPIS.
     */
    cursor?: KPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIS.
     */
    skip?: number
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * KPI create
   */
  export type KPICreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * The data needed to create a KPI.
     */
    data: XOR<KPICreateInput, KPIUncheckedCreateInput>
  }

  /**
   * KPI createMany
   */
  export type KPICreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KPIS.
     */
    data: KPICreateManyInput | KPICreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KPI createManyAndReturn
   */
  export type KPICreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * The data used to create many KPIS.
     */
    data: KPICreateManyInput | KPICreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KPI update
   */
  export type KPIUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * The data needed to update a KPI.
     */
    data: XOR<KPIUpdateInput, KPIUncheckedUpdateInput>
    /**
     * Choose, which KPI to update.
     */
    where: KPIWhereUniqueInput
  }

  /**
   * KPI updateMany
   */
  export type KPIUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KPIS.
     */
    data: XOR<KPIUpdateManyMutationInput, KPIUncheckedUpdateManyInput>
    /**
     * Filter which KPIS to update
     */
    where?: KPIWhereInput
    /**
     * Limit how many KPIS to update.
     */
    limit?: number
  }

  /**
   * KPI updateManyAndReturn
   */
  export type KPIUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * The data used to update KPIS.
     */
    data: XOR<KPIUpdateManyMutationInput, KPIUncheckedUpdateManyInput>
    /**
     * Filter which KPIS to update
     */
    where?: KPIWhereInput
    /**
     * Limit how many KPIS to update.
     */
    limit?: number
  }

  /**
   * KPI upsert
   */
  export type KPIUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * The filter to search for the KPI to update in case it exists.
     */
    where: KPIWhereUniqueInput
    /**
     * In case the KPI found by the `where` argument doesn't exist, create a new KPI with this data.
     */
    create: XOR<KPICreateInput, KPIUncheckedCreateInput>
    /**
     * In case the KPI was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KPIUpdateInput, KPIUncheckedUpdateInput>
  }

  /**
   * KPI delete
   */
  export type KPIDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter which KPI to delete.
     */
    where: KPIWhereUniqueInput
  }

  /**
   * KPI deleteMany
   */
  export type KPIDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPIS to delete
     */
    where?: KPIWhereInput
    /**
     * Limit how many KPIS to delete.
     */
    limit?: number
  }

  /**
   * KPI.kpiEmployees
   */
  export type KPI$kpiEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    where?: KPIEmployeeWhereInput
    orderBy?: KPIEmployeeOrderByWithRelationInput | KPIEmployeeOrderByWithRelationInput[]
    cursor?: KPIEmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIEmployeeScalarFieldEnum | KPIEmployeeScalarFieldEnum[]
  }

  /**
   * KPI without action
   */
  export type KPIDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
  }


  /**
   * Model KPIEmployee
   */

  export type AggregateKPIEmployee = {
    _count: KPIEmployeeCountAggregateOutputType | null
    _avg: KPIEmployeeAvgAggregateOutputType | null
    _sum: KPIEmployeeSumAggregateOutputType | null
    _min: KPIEmployeeMinAggregateOutputType | null
    _max: KPIEmployeeMaxAggregateOutputType | null
  }

  export type KPIEmployeeAvgAggregateOutputType = {
    id: number | null
    kpiId: number | null
    employeeId: number | null
  }

  export type KPIEmployeeSumAggregateOutputType = {
    id: number | null
    kpiId: number | null
    employeeId: number | null
  }

  export type KPIEmployeeMinAggregateOutputType = {
    id: number | null
    kpiId: number | null
    employeeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KPIEmployeeMaxAggregateOutputType = {
    id: number | null
    kpiId: number | null
    employeeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KPIEmployeeCountAggregateOutputType = {
    id: number
    kpiId: number
    employeeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KPIEmployeeAvgAggregateInputType = {
    id?: true
    kpiId?: true
    employeeId?: true
  }

  export type KPIEmployeeSumAggregateInputType = {
    id?: true
    kpiId?: true
    employeeId?: true
  }

  export type KPIEmployeeMinAggregateInputType = {
    id?: true
    kpiId?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KPIEmployeeMaxAggregateInputType = {
    id?: true
    kpiId?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KPIEmployeeCountAggregateInputType = {
    id?: true
    kpiId?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KPIEmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPIEmployee to aggregate.
     */
    where?: KPIEmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIEmployees to fetch.
     */
    orderBy?: KPIEmployeeOrderByWithRelationInput | KPIEmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KPIEmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIEmployees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIEmployees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KPIEmployees
    **/
    _count?: true | KPIEmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KPIEmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KPIEmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KPIEmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KPIEmployeeMaxAggregateInputType
  }

  export type GetKPIEmployeeAggregateType<T extends KPIEmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateKPIEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKPIEmployee[P]>
      : GetScalarType<T[P], AggregateKPIEmployee[P]>
  }




  export type KPIEmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIEmployeeWhereInput
    orderBy?: KPIEmployeeOrderByWithAggregationInput | KPIEmployeeOrderByWithAggregationInput[]
    by: KPIEmployeeScalarFieldEnum[] | KPIEmployeeScalarFieldEnum
    having?: KPIEmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KPIEmployeeCountAggregateInputType | true
    _avg?: KPIEmployeeAvgAggregateInputType
    _sum?: KPIEmployeeSumAggregateInputType
    _min?: KPIEmployeeMinAggregateInputType
    _max?: KPIEmployeeMaxAggregateInputType
  }

  export type KPIEmployeeGroupByOutputType = {
    id: number
    kpiId: number
    employeeId: number
    createdAt: Date
    updatedAt: Date
    _count: KPIEmployeeCountAggregateOutputType | null
    _avg: KPIEmployeeAvgAggregateOutputType | null
    _sum: KPIEmployeeSumAggregateOutputType | null
    _min: KPIEmployeeMinAggregateOutputType | null
    _max: KPIEmployeeMaxAggregateOutputType | null
  }

  type GetKPIEmployeeGroupByPayload<T extends KPIEmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KPIEmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KPIEmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KPIEmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], KPIEmployeeGroupByOutputType[P]>
        }
      >
    >


  export type KPIEmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiId?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    entries?: boolean | KPIEmployee$entriesArgs<ExtArgs>
    _count?: boolean | KPIEmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kPIEmployee"]>

  export type KPIEmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiId?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kPIEmployee"]>

  export type KPIEmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiId?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kPIEmployee"]>

  export type KPIEmployeeSelectScalar = {
    id?: boolean
    kpiId?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KPIEmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "kpiId" | "employeeId" | "createdAt" | "updatedAt", ExtArgs["result"]["kPIEmployee"]>
  export type KPIEmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    entries?: boolean | KPIEmployee$entriesArgs<ExtArgs>
    _count?: boolean | KPIEmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KPIEmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type KPIEmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $KPIEmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KPIEmployee"
    objects: {
      kpi: Prisma.$KPIPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      entries: Prisma.$KPIEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kpiId: number
      employeeId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kPIEmployee"]>
    composites: {}
  }

  type KPIEmployeeGetPayload<S extends boolean | null | undefined | KPIEmployeeDefaultArgs> = $Result.GetResult<Prisma.$KPIEmployeePayload, S>

  type KPIEmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KPIEmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KPIEmployeeCountAggregateInputType | true
    }

  export interface KPIEmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KPIEmployee'], meta: { name: 'KPIEmployee' } }
    /**
     * Find zero or one KPIEmployee that matches the filter.
     * @param {KPIEmployeeFindUniqueArgs} args - Arguments to find a KPIEmployee
     * @example
     * // Get one KPIEmployee
     * const kPIEmployee = await prisma.kPIEmployee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KPIEmployeeFindUniqueArgs>(args: SelectSubset<T, KPIEmployeeFindUniqueArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KPIEmployee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KPIEmployeeFindUniqueOrThrowArgs} args - Arguments to find a KPIEmployee
     * @example
     * // Get one KPIEmployee
     * const kPIEmployee = await prisma.kPIEmployee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KPIEmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, KPIEmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPIEmployee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEmployeeFindFirstArgs} args - Arguments to find a KPIEmployee
     * @example
     * // Get one KPIEmployee
     * const kPIEmployee = await prisma.kPIEmployee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KPIEmployeeFindFirstArgs>(args?: SelectSubset<T, KPIEmployeeFindFirstArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPIEmployee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEmployeeFindFirstOrThrowArgs} args - Arguments to find a KPIEmployee
     * @example
     * // Get one KPIEmployee
     * const kPIEmployee = await prisma.kPIEmployee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KPIEmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, KPIEmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KPIEmployees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KPIEmployees
     * const kPIEmployees = await prisma.kPIEmployee.findMany()
     * 
     * // Get first 10 KPIEmployees
     * const kPIEmployees = await prisma.kPIEmployee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kPIEmployeeWithIdOnly = await prisma.kPIEmployee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KPIEmployeeFindManyArgs>(args?: SelectSubset<T, KPIEmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KPIEmployee.
     * @param {KPIEmployeeCreateArgs} args - Arguments to create a KPIEmployee.
     * @example
     * // Create one KPIEmployee
     * const KPIEmployee = await prisma.kPIEmployee.create({
     *   data: {
     *     // ... data to create a KPIEmployee
     *   }
     * })
     * 
     */
    create<T extends KPIEmployeeCreateArgs>(args: SelectSubset<T, KPIEmployeeCreateArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KPIEmployees.
     * @param {KPIEmployeeCreateManyArgs} args - Arguments to create many KPIEmployees.
     * @example
     * // Create many KPIEmployees
     * const kPIEmployee = await prisma.kPIEmployee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KPIEmployeeCreateManyArgs>(args?: SelectSubset<T, KPIEmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KPIEmployees and returns the data saved in the database.
     * @param {KPIEmployeeCreateManyAndReturnArgs} args - Arguments to create many KPIEmployees.
     * @example
     * // Create many KPIEmployees
     * const kPIEmployee = await prisma.kPIEmployee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KPIEmployees and only return the `id`
     * const kPIEmployeeWithIdOnly = await prisma.kPIEmployee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KPIEmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, KPIEmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KPIEmployee.
     * @param {KPIEmployeeDeleteArgs} args - Arguments to delete one KPIEmployee.
     * @example
     * // Delete one KPIEmployee
     * const KPIEmployee = await prisma.kPIEmployee.delete({
     *   where: {
     *     // ... filter to delete one KPIEmployee
     *   }
     * })
     * 
     */
    delete<T extends KPIEmployeeDeleteArgs>(args: SelectSubset<T, KPIEmployeeDeleteArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KPIEmployee.
     * @param {KPIEmployeeUpdateArgs} args - Arguments to update one KPIEmployee.
     * @example
     * // Update one KPIEmployee
     * const kPIEmployee = await prisma.kPIEmployee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KPIEmployeeUpdateArgs>(args: SelectSubset<T, KPIEmployeeUpdateArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KPIEmployees.
     * @param {KPIEmployeeDeleteManyArgs} args - Arguments to filter KPIEmployees to delete.
     * @example
     * // Delete a few KPIEmployees
     * const { count } = await prisma.kPIEmployee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KPIEmployeeDeleteManyArgs>(args?: SelectSubset<T, KPIEmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIEmployees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KPIEmployees
     * const kPIEmployee = await prisma.kPIEmployee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KPIEmployeeUpdateManyArgs>(args: SelectSubset<T, KPIEmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIEmployees and returns the data updated in the database.
     * @param {KPIEmployeeUpdateManyAndReturnArgs} args - Arguments to update many KPIEmployees.
     * @example
     * // Update many KPIEmployees
     * const kPIEmployee = await prisma.kPIEmployee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KPIEmployees and only return the `id`
     * const kPIEmployeeWithIdOnly = await prisma.kPIEmployee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KPIEmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, KPIEmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KPIEmployee.
     * @param {KPIEmployeeUpsertArgs} args - Arguments to update or create a KPIEmployee.
     * @example
     * // Update or create a KPIEmployee
     * const kPIEmployee = await prisma.kPIEmployee.upsert({
     *   create: {
     *     // ... data to create a KPIEmployee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KPIEmployee we want to update
     *   }
     * })
     */
    upsert<T extends KPIEmployeeUpsertArgs>(args: SelectSubset<T, KPIEmployeeUpsertArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KPIEmployees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEmployeeCountArgs} args - Arguments to filter KPIEmployees to count.
     * @example
     * // Count the number of KPIEmployees
     * const count = await prisma.kPIEmployee.count({
     *   where: {
     *     // ... the filter for the KPIEmployees we want to count
     *   }
     * })
    **/
    count<T extends KPIEmployeeCountArgs>(
      args?: Subset<T, KPIEmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KPIEmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KPIEmployee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KPIEmployeeAggregateArgs>(args: Subset<T, KPIEmployeeAggregateArgs>): Prisma.PrismaPromise<GetKPIEmployeeAggregateType<T>>

    /**
     * Group by KPIEmployee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KPIEmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KPIEmployeeGroupByArgs['orderBy'] }
        : { orderBy?: KPIEmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KPIEmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKPIEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KPIEmployee model
   */
  readonly fields: KPIEmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KPIEmployee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KPIEmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kpi<T extends KPIDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KPIDefaultArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    entries<T extends KPIEmployee$entriesArgs<ExtArgs> = {}>(args?: Subset<T, KPIEmployee$entriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KPIEmployee model
   */
  interface KPIEmployeeFieldRefs {
    readonly id: FieldRef<"KPIEmployee", 'Int'>
    readonly kpiId: FieldRef<"KPIEmployee", 'Int'>
    readonly employeeId: FieldRef<"KPIEmployee", 'Int'>
    readonly createdAt: FieldRef<"KPIEmployee", 'DateTime'>
    readonly updatedAt: FieldRef<"KPIEmployee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KPIEmployee findUnique
   */
  export type KPIEmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which KPIEmployee to fetch.
     */
    where: KPIEmployeeWhereUniqueInput
  }

  /**
   * KPIEmployee findUniqueOrThrow
   */
  export type KPIEmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which KPIEmployee to fetch.
     */
    where: KPIEmployeeWhereUniqueInput
  }

  /**
   * KPIEmployee findFirst
   */
  export type KPIEmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which KPIEmployee to fetch.
     */
    where?: KPIEmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIEmployees to fetch.
     */
    orderBy?: KPIEmployeeOrderByWithRelationInput | KPIEmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIEmployees.
     */
    cursor?: KPIEmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIEmployees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIEmployees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIEmployees.
     */
    distinct?: KPIEmployeeScalarFieldEnum | KPIEmployeeScalarFieldEnum[]
  }

  /**
   * KPIEmployee findFirstOrThrow
   */
  export type KPIEmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which KPIEmployee to fetch.
     */
    where?: KPIEmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIEmployees to fetch.
     */
    orderBy?: KPIEmployeeOrderByWithRelationInput | KPIEmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIEmployees.
     */
    cursor?: KPIEmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIEmployees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIEmployees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIEmployees.
     */
    distinct?: KPIEmployeeScalarFieldEnum | KPIEmployeeScalarFieldEnum[]
  }

  /**
   * KPIEmployee findMany
   */
  export type KPIEmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * Filter, which KPIEmployees to fetch.
     */
    where?: KPIEmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIEmployees to fetch.
     */
    orderBy?: KPIEmployeeOrderByWithRelationInput | KPIEmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KPIEmployees.
     */
    cursor?: KPIEmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIEmployees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIEmployees.
     */
    skip?: number
    distinct?: KPIEmployeeScalarFieldEnum | KPIEmployeeScalarFieldEnum[]
  }

  /**
   * KPIEmployee create
   */
  export type KPIEmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a KPIEmployee.
     */
    data: XOR<KPIEmployeeCreateInput, KPIEmployeeUncheckedCreateInput>
  }

  /**
   * KPIEmployee createMany
   */
  export type KPIEmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KPIEmployees.
     */
    data: KPIEmployeeCreateManyInput | KPIEmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KPIEmployee createManyAndReturn
   */
  export type KPIEmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many KPIEmployees.
     */
    data: KPIEmployeeCreateManyInput | KPIEmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KPIEmployee update
   */
  export type KPIEmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a KPIEmployee.
     */
    data: XOR<KPIEmployeeUpdateInput, KPIEmployeeUncheckedUpdateInput>
    /**
     * Choose, which KPIEmployee to update.
     */
    where: KPIEmployeeWhereUniqueInput
  }

  /**
   * KPIEmployee updateMany
   */
  export type KPIEmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KPIEmployees.
     */
    data: XOR<KPIEmployeeUpdateManyMutationInput, KPIEmployeeUncheckedUpdateManyInput>
    /**
     * Filter which KPIEmployees to update
     */
    where?: KPIEmployeeWhereInput
    /**
     * Limit how many KPIEmployees to update.
     */
    limit?: number
  }

  /**
   * KPIEmployee updateManyAndReturn
   */
  export type KPIEmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * The data used to update KPIEmployees.
     */
    data: XOR<KPIEmployeeUpdateManyMutationInput, KPIEmployeeUncheckedUpdateManyInput>
    /**
     * Filter which KPIEmployees to update
     */
    where?: KPIEmployeeWhereInput
    /**
     * Limit how many KPIEmployees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KPIEmployee upsert
   */
  export type KPIEmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the KPIEmployee to update in case it exists.
     */
    where: KPIEmployeeWhereUniqueInput
    /**
     * In case the KPIEmployee found by the `where` argument doesn't exist, create a new KPIEmployee with this data.
     */
    create: XOR<KPIEmployeeCreateInput, KPIEmployeeUncheckedCreateInput>
    /**
     * In case the KPIEmployee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KPIEmployeeUpdateInput, KPIEmployeeUncheckedUpdateInput>
  }

  /**
   * KPIEmployee delete
   */
  export type KPIEmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
    /**
     * Filter which KPIEmployee to delete.
     */
    where: KPIEmployeeWhereUniqueInput
  }

  /**
   * KPIEmployee deleteMany
   */
  export type KPIEmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPIEmployees to delete
     */
    where?: KPIEmployeeWhereInput
    /**
     * Limit how many KPIEmployees to delete.
     */
    limit?: number
  }

  /**
   * KPIEmployee.entries
   */
  export type KPIEmployee$entriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    where?: KPIEntryWhereInput
    orderBy?: KPIEntryOrderByWithRelationInput | KPIEntryOrderByWithRelationInput[]
    cursor?: KPIEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIEntryScalarFieldEnum | KPIEntryScalarFieldEnum[]
  }

  /**
   * KPIEmployee without action
   */
  export type KPIEmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEmployee
     */
    select?: KPIEmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEmployee
     */
    omit?: KPIEmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEmployeeInclude<ExtArgs> | null
  }


  /**
   * Model KPIEntry
   */

  export type AggregateKPIEntry = {
    _count: KPIEntryCountAggregateOutputType | null
    _avg: KPIEntryAvgAggregateOutputType | null
    _sum: KPIEntrySumAggregateOutputType | null
    _min: KPIEntryMinAggregateOutputType | null
    _max: KPIEntryMaxAggregateOutputType | null
  }

  export type KPIEntryAvgAggregateOutputType = {
    id: number | null
    kpiEmployeeId: number | null
    targetValue: number | null
    achievedValue: number | null
  }

  export type KPIEntrySumAggregateOutputType = {
    id: number | null
    kpiEmployeeId: number | null
    targetValue: number | null
    achievedValue: number | null
  }

  export type KPIEntryMinAggregateOutputType = {
    id: number | null
    kpiEmployeeId: number | null
    name: string | null
    targetValue: number | null
    achievedValue: number | null
    isAchieved: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KPIEntryMaxAggregateOutputType = {
    id: number | null
    kpiEmployeeId: number | null
    name: string | null
    targetValue: number | null
    achievedValue: number | null
    isAchieved: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KPIEntryCountAggregateOutputType = {
    id: number
    kpiEmployeeId: number
    name: number
    targetValue: number
    achievedValue: number
    isAchieved: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KPIEntryAvgAggregateInputType = {
    id?: true
    kpiEmployeeId?: true
    targetValue?: true
    achievedValue?: true
  }

  export type KPIEntrySumAggregateInputType = {
    id?: true
    kpiEmployeeId?: true
    targetValue?: true
    achievedValue?: true
  }

  export type KPIEntryMinAggregateInputType = {
    id?: true
    kpiEmployeeId?: true
    name?: true
    targetValue?: true
    achievedValue?: true
    isAchieved?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KPIEntryMaxAggregateInputType = {
    id?: true
    kpiEmployeeId?: true
    name?: true
    targetValue?: true
    achievedValue?: true
    isAchieved?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KPIEntryCountAggregateInputType = {
    id?: true
    kpiEmployeeId?: true
    name?: true
    targetValue?: true
    achievedValue?: true
    isAchieved?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KPIEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPIEntry to aggregate.
     */
    where?: KPIEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIEntries to fetch.
     */
    orderBy?: KPIEntryOrderByWithRelationInput | KPIEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KPIEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KPIEntries
    **/
    _count?: true | KPIEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KPIEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KPIEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KPIEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KPIEntryMaxAggregateInputType
  }

  export type GetKPIEntryAggregateType<T extends KPIEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateKPIEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKPIEntry[P]>
      : GetScalarType<T[P], AggregateKPIEntry[P]>
  }




  export type KPIEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIEntryWhereInput
    orderBy?: KPIEntryOrderByWithAggregationInput | KPIEntryOrderByWithAggregationInput[]
    by: KPIEntryScalarFieldEnum[] | KPIEntryScalarFieldEnum
    having?: KPIEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KPIEntryCountAggregateInputType | true
    _avg?: KPIEntryAvgAggregateInputType
    _sum?: KPIEntrySumAggregateInputType
    _min?: KPIEntryMinAggregateInputType
    _max?: KPIEntryMaxAggregateInputType
  }

  export type KPIEntryGroupByOutputType = {
    id: number
    kpiEmployeeId: number
    name: string
    targetValue: number
    achievedValue: number
    isAchieved: boolean
    createdAt: Date
    updatedAt: Date
    _count: KPIEntryCountAggregateOutputType | null
    _avg: KPIEntryAvgAggregateOutputType | null
    _sum: KPIEntrySumAggregateOutputType | null
    _min: KPIEntryMinAggregateOutputType | null
    _max: KPIEntryMaxAggregateOutputType | null
  }

  type GetKPIEntryGroupByPayload<T extends KPIEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KPIEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KPIEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KPIEntryGroupByOutputType[P]>
            : GetScalarType<T[P], KPIEntryGroupByOutputType[P]>
        }
      >
    >


  export type KPIEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiEmployeeId?: boolean
    name?: boolean
    targetValue?: boolean
    achievedValue?: boolean
    isAchieved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kpiEmployee?: boolean | KPIEmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kPIEntry"]>

  export type KPIEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiEmployeeId?: boolean
    name?: boolean
    targetValue?: boolean
    achievedValue?: boolean
    isAchieved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kpiEmployee?: boolean | KPIEmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kPIEntry"]>

  export type KPIEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiEmployeeId?: boolean
    name?: boolean
    targetValue?: boolean
    achievedValue?: boolean
    isAchieved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kpiEmployee?: boolean | KPIEmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kPIEntry"]>

  export type KPIEntrySelectScalar = {
    id?: boolean
    kpiEmployeeId?: boolean
    name?: boolean
    targetValue?: boolean
    achievedValue?: boolean
    isAchieved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KPIEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "kpiEmployeeId" | "name" | "targetValue" | "achievedValue" | "isAchieved" | "createdAt" | "updatedAt", ExtArgs["result"]["kPIEntry"]>
  export type KPIEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpiEmployee?: boolean | KPIEmployeeDefaultArgs<ExtArgs>
  }
  export type KPIEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpiEmployee?: boolean | KPIEmployeeDefaultArgs<ExtArgs>
  }
  export type KPIEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpiEmployee?: boolean | KPIEmployeeDefaultArgs<ExtArgs>
  }

  export type $KPIEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KPIEntry"
    objects: {
      kpiEmployee: Prisma.$KPIEmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kpiEmployeeId: number
      name: string
      targetValue: number
      achievedValue: number
      isAchieved: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kPIEntry"]>
    composites: {}
  }

  type KPIEntryGetPayload<S extends boolean | null | undefined | KPIEntryDefaultArgs> = $Result.GetResult<Prisma.$KPIEntryPayload, S>

  type KPIEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KPIEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KPIEntryCountAggregateInputType | true
    }

  export interface KPIEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KPIEntry'], meta: { name: 'KPIEntry' } }
    /**
     * Find zero or one KPIEntry that matches the filter.
     * @param {KPIEntryFindUniqueArgs} args - Arguments to find a KPIEntry
     * @example
     * // Get one KPIEntry
     * const kPIEntry = await prisma.kPIEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KPIEntryFindUniqueArgs>(args: SelectSubset<T, KPIEntryFindUniqueArgs<ExtArgs>>): Prisma__KPIEntryClient<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KPIEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KPIEntryFindUniqueOrThrowArgs} args - Arguments to find a KPIEntry
     * @example
     * // Get one KPIEntry
     * const kPIEntry = await prisma.kPIEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KPIEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, KPIEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KPIEntryClient<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPIEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEntryFindFirstArgs} args - Arguments to find a KPIEntry
     * @example
     * // Get one KPIEntry
     * const kPIEntry = await prisma.kPIEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KPIEntryFindFirstArgs>(args?: SelectSubset<T, KPIEntryFindFirstArgs<ExtArgs>>): Prisma__KPIEntryClient<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPIEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEntryFindFirstOrThrowArgs} args - Arguments to find a KPIEntry
     * @example
     * // Get one KPIEntry
     * const kPIEntry = await prisma.kPIEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KPIEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, KPIEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__KPIEntryClient<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KPIEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KPIEntries
     * const kPIEntries = await prisma.kPIEntry.findMany()
     * 
     * // Get first 10 KPIEntries
     * const kPIEntries = await prisma.kPIEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kPIEntryWithIdOnly = await prisma.kPIEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KPIEntryFindManyArgs>(args?: SelectSubset<T, KPIEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KPIEntry.
     * @param {KPIEntryCreateArgs} args - Arguments to create a KPIEntry.
     * @example
     * // Create one KPIEntry
     * const KPIEntry = await prisma.kPIEntry.create({
     *   data: {
     *     // ... data to create a KPIEntry
     *   }
     * })
     * 
     */
    create<T extends KPIEntryCreateArgs>(args: SelectSubset<T, KPIEntryCreateArgs<ExtArgs>>): Prisma__KPIEntryClient<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KPIEntries.
     * @param {KPIEntryCreateManyArgs} args - Arguments to create many KPIEntries.
     * @example
     * // Create many KPIEntries
     * const kPIEntry = await prisma.kPIEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KPIEntryCreateManyArgs>(args?: SelectSubset<T, KPIEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KPIEntries and returns the data saved in the database.
     * @param {KPIEntryCreateManyAndReturnArgs} args - Arguments to create many KPIEntries.
     * @example
     * // Create many KPIEntries
     * const kPIEntry = await prisma.kPIEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KPIEntries and only return the `id`
     * const kPIEntryWithIdOnly = await prisma.kPIEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KPIEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, KPIEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KPIEntry.
     * @param {KPIEntryDeleteArgs} args - Arguments to delete one KPIEntry.
     * @example
     * // Delete one KPIEntry
     * const KPIEntry = await prisma.kPIEntry.delete({
     *   where: {
     *     // ... filter to delete one KPIEntry
     *   }
     * })
     * 
     */
    delete<T extends KPIEntryDeleteArgs>(args: SelectSubset<T, KPIEntryDeleteArgs<ExtArgs>>): Prisma__KPIEntryClient<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KPIEntry.
     * @param {KPIEntryUpdateArgs} args - Arguments to update one KPIEntry.
     * @example
     * // Update one KPIEntry
     * const kPIEntry = await prisma.kPIEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KPIEntryUpdateArgs>(args: SelectSubset<T, KPIEntryUpdateArgs<ExtArgs>>): Prisma__KPIEntryClient<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KPIEntries.
     * @param {KPIEntryDeleteManyArgs} args - Arguments to filter KPIEntries to delete.
     * @example
     * // Delete a few KPIEntries
     * const { count } = await prisma.kPIEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KPIEntryDeleteManyArgs>(args?: SelectSubset<T, KPIEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KPIEntries
     * const kPIEntry = await prisma.kPIEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KPIEntryUpdateManyArgs>(args: SelectSubset<T, KPIEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIEntries and returns the data updated in the database.
     * @param {KPIEntryUpdateManyAndReturnArgs} args - Arguments to update many KPIEntries.
     * @example
     * // Update many KPIEntries
     * const kPIEntry = await prisma.kPIEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KPIEntries and only return the `id`
     * const kPIEntryWithIdOnly = await prisma.kPIEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KPIEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, KPIEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KPIEntry.
     * @param {KPIEntryUpsertArgs} args - Arguments to update or create a KPIEntry.
     * @example
     * // Update or create a KPIEntry
     * const kPIEntry = await prisma.kPIEntry.upsert({
     *   create: {
     *     // ... data to create a KPIEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KPIEntry we want to update
     *   }
     * })
     */
    upsert<T extends KPIEntryUpsertArgs>(args: SelectSubset<T, KPIEntryUpsertArgs<ExtArgs>>): Prisma__KPIEntryClient<$Result.GetResult<Prisma.$KPIEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KPIEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEntryCountArgs} args - Arguments to filter KPIEntries to count.
     * @example
     * // Count the number of KPIEntries
     * const count = await prisma.kPIEntry.count({
     *   where: {
     *     // ... the filter for the KPIEntries we want to count
     *   }
     * })
    **/
    count<T extends KPIEntryCountArgs>(
      args?: Subset<T, KPIEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KPIEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KPIEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KPIEntryAggregateArgs>(args: Subset<T, KPIEntryAggregateArgs>): Prisma.PrismaPromise<GetKPIEntryAggregateType<T>>

    /**
     * Group by KPIEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KPIEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KPIEntryGroupByArgs['orderBy'] }
        : { orderBy?: KPIEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KPIEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKPIEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KPIEntry model
   */
  readonly fields: KPIEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KPIEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KPIEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kpiEmployee<T extends KPIEmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KPIEmployeeDefaultArgs<ExtArgs>>): Prisma__KPIEmployeeClient<$Result.GetResult<Prisma.$KPIEmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KPIEntry model
   */
  interface KPIEntryFieldRefs {
    readonly id: FieldRef<"KPIEntry", 'Int'>
    readonly kpiEmployeeId: FieldRef<"KPIEntry", 'Int'>
    readonly name: FieldRef<"KPIEntry", 'String'>
    readonly targetValue: FieldRef<"KPIEntry", 'Float'>
    readonly achievedValue: FieldRef<"KPIEntry", 'Float'>
    readonly isAchieved: FieldRef<"KPIEntry", 'Boolean'>
    readonly createdAt: FieldRef<"KPIEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"KPIEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KPIEntry findUnique
   */
  export type KPIEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * Filter, which KPIEntry to fetch.
     */
    where: KPIEntryWhereUniqueInput
  }

  /**
   * KPIEntry findUniqueOrThrow
   */
  export type KPIEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * Filter, which KPIEntry to fetch.
     */
    where: KPIEntryWhereUniqueInput
  }

  /**
   * KPIEntry findFirst
   */
  export type KPIEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * Filter, which KPIEntry to fetch.
     */
    where?: KPIEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIEntries to fetch.
     */
    orderBy?: KPIEntryOrderByWithRelationInput | KPIEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIEntries.
     */
    cursor?: KPIEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIEntries.
     */
    distinct?: KPIEntryScalarFieldEnum | KPIEntryScalarFieldEnum[]
  }

  /**
   * KPIEntry findFirstOrThrow
   */
  export type KPIEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * Filter, which KPIEntry to fetch.
     */
    where?: KPIEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIEntries to fetch.
     */
    orderBy?: KPIEntryOrderByWithRelationInput | KPIEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIEntries.
     */
    cursor?: KPIEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIEntries.
     */
    distinct?: KPIEntryScalarFieldEnum | KPIEntryScalarFieldEnum[]
  }

  /**
   * KPIEntry findMany
   */
  export type KPIEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * Filter, which KPIEntries to fetch.
     */
    where?: KPIEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIEntries to fetch.
     */
    orderBy?: KPIEntryOrderByWithRelationInput | KPIEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KPIEntries.
     */
    cursor?: KPIEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIEntries.
     */
    skip?: number
    distinct?: KPIEntryScalarFieldEnum | KPIEntryScalarFieldEnum[]
  }

  /**
   * KPIEntry create
   */
  export type KPIEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a KPIEntry.
     */
    data: XOR<KPIEntryCreateInput, KPIEntryUncheckedCreateInput>
  }

  /**
   * KPIEntry createMany
   */
  export type KPIEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KPIEntries.
     */
    data: KPIEntryCreateManyInput | KPIEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KPIEntry createManyAndReturn
   */
  export type KPIEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * The data used to create many KPIEntries.
     */
    data: KPIEntryCreateManyInput | KPIEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KPIEntry update
   */
  export type KPIEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a KPIEntry.
     */
    data: XOR<KPIEntryUpdateInput, KPIEntryUncheckedUpdateInput>
    /**
     * Choose, which KPIEntry to update.
     */
    where: KPIEntryWhereUniqueInput
  }

  /**
   * KPIEntry updateMany
   */
  export type KPIEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KPIEntries.
     */
    data: XOR<KPIEntryUpdateManyMutationInput, KPIEntryUncheckedUpdateManyInput>
    /**
     * Filter which KPIEntries to update
     */
    where?: KPIEntryWhereInput
    /**
     * Limit how many KPIEntries to update.
     */
    limit?: number
  }

  /**
   * KPIEntry updateManyAndReturn
   */
  export type KPIEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * The data used to update KPIEntries.
     */
    data: XOR<KPIEntryUpdateManyMutationInput, KPIEntryUncheckedUpdateManyInput>
    /**
     * Filter which KPIEntries to update
     */
    where?: KPIEntryWhereInput
    /**
     * Limit how many KPIEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KPIEntry upsert
   */
  export type KPIEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the KPIEntry to update in case it exists.
     */
    where: KPIEntryWhereUniqueInput
    /**
     * In case the KPIEntry found by the `where` argument doesn't exist, create a new KPIEntry with this data.
     */
    create: XOR<KPIEntryCreateInput, KPIEntryUncheckedCreateInput>
    /**
     * In case the KPIEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KPIEntryUpdateInput, KPIEntryUncheckedUpdateInput>
  }

  /**
   * KPIEntry delete
   */
  export type KPIEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
    /**
     * Filter which KPIEntry to delete.
     */
    where: KPIEntryWhereUniqueInput
  }

  /**
   * KPIEntry deleteMany
   */
  export type KPIEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPIEntries to delete
     */
    where?: KPIEntryWhereInput
    /**
     * Limit how many KPIEntries to delete.
     */
    limit?: number
  }

  /**
   * KPIEntry without action
   */
  export type KPIEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIEntry
     */
    select?: KPIEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIEntry
     */
    omit?: KPIEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIEntryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    employeeCode: 'employeeCode',
    name: 'name',
    gender: 'gender',
    birthDate: 'birthDate',
    password: 'password',
    role: 'role',
    avatar: 'avatar',
    isActive: 'isActive',
    managerId: 'managerId'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    abbreviation: 'abbreviation',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    headId: 'headId',
    directorId: 'directorId'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const PositionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    level: 'level',
    departmentId: 'departmentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PositionScalarFieldEnum = (typeof PositionScalarFieldEnum)[keyof typeof PositionScalarFieldEnum]


  export const WorkInfoScalarFieldEnum: {
    id: 'id',
    departmentId: 'departmentId',
    positionId: 'positionId',
    specialization: 'specialization',
    joinedTBD: 'joinedTBD',
    joinedTeSCC: 'joinedTeSCC',
    seniorityStart: 'seniorityStart',
    seniority: 'seniority',
    contractNumber: 'contractNumber',
    contractDate: 'contractDate',
    contractType: 'contractType',
    contractEndDate: 'contractEndDate',
    employeeId: 'employeeId'
  };

  export type WorkInfoScalarFieldEnum = (typeof WorkInfoScalarFieldEnum)[keyof typeof WorkInfoScalarFieldEnum]


  export const PersonalInfoScalarFieldEnum: {
    id: 'id',
    identityNumber: 'identityNumber',
    issueDate: 'issueDate',
    issuePlace: 'issuePlace',
    hometown: 'hometown',
    idAddress: 'idAddress',
    education: 'education',
    drivingLicense: 'drivingLicense',
    toyotaCertificate: 'toyotaCertificate',
    taxCode: 'taxCode',
    insuranceNumber: 'insuranceNumber',
    insuranceSalary: 'insuranceSalary',
    employeeId: 'employeeId'
  };

  export type PersonalInfoScalarFieldEnum = (typeof PersonalInfoScalarFieldEnum)[keyof typeof PersonalInfoScalarFieldEnum]


  export const ContactInfoScalarFieldEnum: {
    id: 'id',
    phoneNumber: 'phoneNumber',
    relativePhone: 'relativePhone',
    companyPhone: 'companyPhone',
    email: 'email',
    employeeId: 'employeeId'
  };

  export type ContactInfoScalarFieldEnum = (typeof ContactInfoScalarFieldEnum)[keyof typeof ContactInfoScalarFieldEnum]


  export const OtherInfoScalarFieldEnum: {
    id: 'id',
    workStatus: 'workStatus',
    resignedDate: 'resignedDate',
    documentsChecked: 'documentsChecked',
    updatedAt: 'updatedAt',
    VCB: 'VCB',
    MTCV: 'MTCV',
    PNJ: 'PNJ',
    employeeId: 'employeeId'
  };

  export type OtherInfoScalarFieldEnum = (typeof OtherInfoScalarFieldEnum)[keyof typeof OtherInfoScalarFieldEnum]


  export const LeaveRequestScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    leaveType: 'leaveType',
    startDate: 'startDate',
    endDate: 'endDate',
    totalHours: 'totalHours',
    reason: 'reason',
    status: 'status',
    approvedBy: 'approvedBy',
    approvedAt: 'approvedAt',
    createdAt: 'createdAt'
  };

  export type LeaveRequestScalarFieldEnum = (typeof LeaveRequestScalarFieldEnum)[keyof typeof LeaveRequestScalarFieldEnum]


  export const LeaveApprovalStepScalarFieldEnum: {
    id: 'id',
    leaveRequestId: 'leaveRequestId',
    level: 'level',
    status: 'status',
    approvedAt: 'approvedAt'
  };

  export type LeaveApprovalStepScalarFieldEnum = (typeof LeaveApprovalStepScalarFieldEnum)[keyof typeof LeaveApprovalStepScalarFieldEnum]


  export const LeaveApprovalStepApproverScalarFieldEnum: {
    id: 'id',
    leaveApprovalStepId: 'leaveApprovalStepId',
    approverId: 'approverId',
    status: 'status',
    approvedAt: 'approvedAt'
  };

  export type LeaveApprovalStepApproverScalarFieldEnum = (typeof LeaveApprovalStepApproverScalarFieldEnum)[keyof typeof LeaveApprovalStepApproverScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    date: 'date',
    checkInTime: 'checkInTime',
    checkOutTime: 'checkOutTime'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const KPIScalarFieldEnum: {
    id: 'id',
    name: 'name',
    period: 'period',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KPIScalarFieldEnum = (typeof KPIScalarFieldEnum)[keyof typeof KPIScalarFieldEnum]


  export const KPIEmployeeScalarFieldEnum: {
    id: 'id',
    kpiId: 'kpiId',
    employeeId: 'employeeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KPIEmployeeScalarFieldEnum = (typeof KPIEmployeeScalarFieldEnum)[keyof typeof KPIEmployeeScalarFieldEnum]


  export const KPIEntryScalarFieldEnum: {
    id: 'id',
    kpiEmployeeId: 'kpiEmployeeId',
    name: 'name',
    targetValue: 'targetValue',
    achievedValue: 'achievedValue',
    isAchieved: 'isAchieved',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KPIEntryScalarFieldEnum = (typeof KPIEntryScalarFieldEnum)[keyof typeof KPIEntryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Sex'
   */
  export type EnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex'>
    


  /**
   * Reference to a field of type 'Sex[]'
   */
  export type ListEnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'WorkStatus'
   */
  export type EnumWorkStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkStatus'>
    


  /**
   * Reference to a field of type 'WorkStatus[]'
   */
  export type ListEnumWorkStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkStatus[]'>
    


  /**
   * Reference to a field of type 'LeaveTypeEnum'
   */
  export type EnumLeaveTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeaveTypeEnum'>
    


  /**
   * Reference to a field of type 'LeaveTypeEnum[]'
   */
  export type ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeaveTypeEnum[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'LeaveStatus'
   */
  export type EnumLeaveStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeaveStatus'>
    


  /**
   * Reference to a field of type 'LeaveStatus[]'
   */
  export type ListEnumLeaveStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeaveStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: IntFilter<"Employee"> | number
    employeeCode?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    gender?: EnumSexFilter<"Employee"> | $Enums.Sex
    birthDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    password?: StringFilter<"Employee"> | string
    role?: EnumRoleFilter<"Employee"> | $Enums.Role
    avatar?: StringNullableFilter<"Employee"> | string | null
    isActive?: BoolFilter<"Employee"> | boolean
    managerId?: IntNullableFilter<"Employee"> | number | null
    manager?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    subordinates?: EmployeeListRelationFilter
    departmentHeadOf?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    departmentDirectorOf?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    workInfo?: XOR<WorkInfoNullableScalarRelationFilter, WorkInfoWhereInput> | null
    personalInfo?: XOR<PersonalInfoNullableScalarRelationFilter, PersonalInfoWhereInput> | null
    contactInfo?: XOR<ContactInfoNullableScalarRelationFilter, ContactInfoWhereInput> | null
    otherInfo?: XOR<OtherInfoNullableScalarRelationFilter, OtherInfoWhereInput> | null
    LeaveRequest?: LeaveRequestListRelationFilter
    LeaveApprovalSteps?: LeaveApprovalStepApproverListRelationFilter
    Attendance?: AttendanceListRelationFilter
    KPIEmployee?: KPIEmployeeListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrderInput | SortOrder
    isActive?: SortOrder
    managerId?: SortOrderInput | SortOrder
    manager?: EmployeeOrderByWithRelationInput
    subordinates?: EmployeeOrderByRelationAggregateInput
    departmentHeadOf?: DepartmentOrderByWithRelationInput
    departmentDirectorOf?: DepartmentOrderByWithRelationInput
    workInfo?: WorkInfoOrderByWithRelationInput
    personalInfo?: PersonalInfoOrderByWithRelationInput
    contactInfo?: ContactInfoOrderByWithRelationInput
    otherInfo?: OtherInfoOrderByWithRelationInput
    LeaveRequest?: LeaveRequestOrderByRelationAggregateInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverOrderByRelationAggregateInput
    Attendance?: AttendanceOrderByRelationAggregateInput
    KPIEmployee?: KPIEmployeeOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employeeCode?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    name?: StringFilter<"Employee"> | string
    gender?: EnumSexFilter<"Employee"> | $Enums.Sex
    birthDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    password?: StringFilter<"Employee"> | string
    role?: EnumRoleFilter<"Employee"> | $Enums.Role
    avatar?: StringNullableFilter<"Employee"> | string | null
    isActive?: BoolFilter<"Employee"> | boolean
    managerId?: IntNullableFilter<"Employee"> | number | null
    manager?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    subordinates?: EmployeeListRelationFilter
    departmentHeadOf?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    departmentDirectorOf?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    workInfo?: XOR<WorkInfoNullableScalarRelationFilter, WorkInfoWhereInput> | null
    personalInfo?: XOR<PersonalInfoNullableScalarRelationFilter, PersonalInfoWhereInput> | null
    contactInfo?: XOR<ContactInfoNullableScalarRelationFilter, ContactInfoWhereInput> | null
    otherInfo?: XOR<OtherInfoNullableScalarRelationFilter, OtherInfoWhereInput> | null
    LeaveRequest?: LeaveRequestListRelationFilter
    LeaveApprovalSteps?: LeaveApprovalStepApproverListRelationFilter
    Attendance?: AttendanceListRelationFilter
    KPIEmployee?: KPIEmployeeListRelationFilter
  }, "id" | "employeeCode">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrderInput | SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrderInput | SortOrder
    isActive?: SortOrder
    managerId?: SortOrderInput | SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employee"> | number
    employeeCode?: StringWithAggregatesFilter<"Employee"> | string
    name?: StringWithAggregatesFilter<"Employee"> | string
    gender?: EnumSexWithAggregatesFilter<"Employee"> | $Enums.Sex
    birthDate?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    password?: StringWithAggregatesFilter<"Employee"> | string
    role?: EnumRoleWithAggregatesFilter<"Employee"> | $Enums.Role
    avatar?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    isActive?: BoolWithAggregatesFilter<"Employee"> | boolean
    managerId?: IntNullableWithAggregatesFilter<"Employee"> | number | null
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    name?: StringFilter<"Department"> | string
    abbreviation?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    headId?: IntNullableFilter<"Department"> | number | null
    directorId?: IntNullableFilter<"Department"> | number | null
    head?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    director?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    positions?: PositionListRelationFilter
    workInfos?: WorkInfoListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    headId?: SortOrderInput | SortOrder
    directorId?: SortOrderInput | SortOrder
    head?: EmployeeOrderByWithRelationInput
    director?: EmployeeOrderByWithRelationInput
    positions?: PositionOrderByRelationAggregateInput
    workInfos?: WorkInfoOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    abbreviation?: string
    headId?: number
    directorId?: number
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    head?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    director?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    positions?: PositionListRelationFilter
    workInfos?: WorkInfoListRelationFilter
  }, "id" | "name" | "abbreviation" | "headId" | "directorId">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    headId?: SortOrderInput | SortOrder
    directorId?: SortOrderInput | SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    name?: StringWithAggregatesFilter<"Department"> | string
    abbreviation?: StringWithAggregatesFilter<"Department"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    headId?: IntNullableWithAggregatesFilter<"Department"> | number | null
    directorId?: IntNullableWithAggregatesFilter<"Department"> | number | null
  }

  export type PositionWhereInput = {
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    id?: IntFilter<"Position"> | number
    name?: StringFilter<"Position"> | string
    level?: IntFilter<"Position"> | number
    departmentId?: IntFilter<"Position"> | number
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    employees?: WorkInfoListRelationFilter
  }

  export type PositionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: DepartmentOrderByWithRelationInput
    employees?: WorkInfoOrderByRelationAggregateInput
  }

  export type PositionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    name?: StringFilter<"Position"> | string
    level?: IntFilter<"Position"> | number
    departmentId?: IntFilter<"Position"> | number
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    employees?: WorkInfoListRelationFilter
  }, "id">

  export type PositionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PositionCountOrderByAggregateInput
    _avg?: PositionAvgOrderByAggregateInput
    _max?: PositionMaxOrderByAggregateInput
    _min?: PositionMinOrderByAggregateInput
    _sum?: PositionSumOrderByAggregateInput
  }

  export type PositionScalarWhereWithAggregatesInput = {
    AND?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    OR?: PositionScalarWhereWithAggregatesInput[]
    NOT?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Position"> | number
    name?: StringWithAggregatesFilter<"Position"> | string
    level?: IntWithAggregatesFilter<"Position"> | number
    departmentId?: IntWithAggregatesFilter<"Position"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
  }

  export type WorkInfoWhereInput = {
    AND?: WorkInfoWhereInput | WorkInfoWhereInput[]
    OR?: WorkInfoWhereInput[]
    NOT?: WorkInfoWhereInput | WorkInfoWhereInput[]
    id?: IntFilter<"WorkInfo"> | number
    departmentId?: IntNullableFilter<"WorkInfo"> | number | null
    positionId?: IntNullableFilter<"WorkInfo"> | number | null
    specialization?: StringNullableFilter<"WorkInfo"> | string | null
    joinedTBD?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    joinedTeSCC?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    seniorityStart?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    seniority?: StringNullableFilter<"WorkInfo"> | string | null
    contractNumber?: StringNullableFilter<"WorkInfo"> | string | null
    contractDate?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    contractType?: StringNullableFilter<"WorkInfo"> | string | null
    contractEndDate?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    employeeId?: IntFilter<"WorkInfo"> | number
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    position?: XOR<PositionNullableScalarRelationFilter, PositionWhereInput> | null
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type WorkInfoOrderByWithRelationInput = {
    id?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    positionId?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    joinedTBD?: SortOrderInput | SortOrder
    joinedTeSCC?: SortOrderInput | SortOrder
    seniorityStart?: SortOrderInput | SortOrder
    seniority?: SortOrderInput | SortOrder
    contractNumber?: SortOrderInput | SortOrder
    contractDate?: SortOrderInput | SortOrder
    contractType?: SortOrderInput | SortOrder
    contractEndDate?: SortOrderInput | SortOrder
    employeeId?: SortOrder
    department?: DepartmentOrderByWithRelationInput
    position?: PositionOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
  }

  export type WorkInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employeeId?: number
    AND?: WorkInfoWhereInput | WorkInfoWhereInput[]
    OR?: WorkInfoWhereInput[]
    NOT?: WorkInfoWhereInput | WorkInfoWhereInput[]
    departmentId?: IntNullableFilter<"WorkInfo"> | number | null
    positionId?: IntNullableFilter<"WorkInfo"> | number | null
    specialization?: StringNullableFilter<"WorkInfo"> | string | null
    joinedTBD?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    joinedTeSCC?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    seniorityStart?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    seniority?: StringNullableFilter<"WorkInfo"> | string | null
    contractNumber?: StringNullableFilter<"WorkInfo"> | string | null
    contractDate?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    contractType?: StringNullableFilter<"WorkInfo"> | string | null
    contractEndDate?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    position?: XOR<PositionNullableScalarRelationFilter, PositionWhereInput> | null
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id" | "employeeId">

  export type WorkInfoOrderByWithAggregationInput = {
    id?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    positionId?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    joinedTBD?: SortOrderInput | SortOrder
    joinedTeSCC?: SortOrderInput | SortOrder
    seniorityStart?: SortOrderInput | SortOrder
    seniority?: SortOrderInput | SortOrder
    contractNumber?: SortOrderInput | SortOrder
    contractDate?: SortOrderInput | SortOrder
    contractType?: SortOrderInput | SortOrder
    contractEndDate?: SortOrderInput | SortOrder
    employeeId?: SortOrder
    _count?: WorkInfoCountOrderByAggregateInput
    _avg?: WorkInfoAvgOrderByAggregateInput
    _max?: WorkInfoMaxOrderByAggregateInput
    _min?: WorkInfoMinOrderByAggregateInput
    _sum?: WorkInfoSumOrderByAggregateInput
  }

  export type WorkInfoScalarWhereWithAggregatesInput = {
    AND?: WorkInfoScalarWhereWithAggregatesInput | WorkInfoScalarWhereWithAggregatesInput[]
    OR?: WorkInfoScalarWhereWithAggregatesInput[]
    NOT?: WorkInfoScalarWhereWithAggregatesInput | WorkInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkInfo"> | number
    departmentId?: IntNullableWithAggregatesFilter<"WorkInfo"> | number | null
    positionId?: IntNullableWithAggregatesFilter<"WorkInfo"> | number | null
    specialization?: StringNullableWithAggregatesFilter<"WorkInfo"> | string | null
    joinedTBD?: DateTimeNullableWithAggregatesFilter<"WorkInfo"> | Date | string | null
    joinedTeSCC?: DateTimeNullableWithAggregatesFilter<"WorkInfo"> | Date | string | null
    seniorityStart?: DateTimeNullableWithAggregatesFilter<"WorkInfo"> | Date | string | null
    seniority?: StringNullableWithAggregatesFilter<"WorkInfo"> | string | null
    contractNumber?: StringNullableWithAggregatesFilter<"WorkInfo"> | string | null
    contractDate?: DateTimeNullableWithAggregatesFilter<"WorkInfo"> | Date | string | null
    contractType?: StringNullableWithAggregatesFilter<"WorkInfo"> | string | null
    contractEndDate?: DateTimeNullableWithAggregatesFilter<"WorkInfo"> | Date | string | null
    employeeId?: IntWithAggregatesFilter<"WorkInfo"> | number
  }

  export type PersonalInfoWhereInput = {
    AND?: PersonalInfoWhereInput | PersonalInfoWhereInput[]
    OR?: PersonalInfoWhereInput[]
    NOT?: PersonalInfoWhereInput | PersonalInfoWhereInput[]
    id?: IntFilter<"PersonalInfo"> | number
    identityNumber?: StringNullableFilter<"PersonalInfo"> | string | null
    issueDate?: DateTimeNullableFilter<"PersonalInfo"> | Date | string | null
    issuePlace?: StringNullableFilter<"PersonalInfo"> | string | null
    hometown?: StringNullableFilter<"PersonalInfo"> | string | null
    idAddress?: StringNullableFilter<"PersonalInfo"> | string | null
    education?: StringNullableFilter<"PersonalInfo"> | string | null
    drivingLicense?: StringNullableFilter<"PersonalInfo"> | string | null
    toyotaCertificate?: StringNullableFilter<"PersonalInfo"> | string | null
    taxCode?: StringNullableFilter<"PersonalInfo"> | string | null
    insuranceNumber?: StringNullableFilter<"PersonalInfo"> | string | null
    insuranceSalary?: IntNullableFilter<"PersonalInfo"> | number | null
    employeeId?: IntFilter<"PersonalInfo"> | number
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type PersonalInfoOrderByWithRelationInput = {
    id?: SortOrder
    identityNumber?: SortOrderInput | SortOrder
    issueDate?: SortOrderInput | SortOrder
    issuePlace?: SortOrderInput | SortOrder
    hometown?: SortOrderInput | SortOrder
    idAddress?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    drivingLicense?: SortOrderInput | SortOrder
    toyotaCertificate?: SortOrderInput | SortOrder
    taxCode?: SortOrderInput | SortOrder
    insuranceNumber?: SortOrderInput | SortOrder
    insuranceSalary?: SortOrderInput | SortOrder
    employeeId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type PersonalInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employeeId?: number
    AND?: PersonalInfoWhereInput | PersonalInfoWhereInput[]
    OR?: PersonalInfoWhereInput[]
    NOT?: PersonalInfoWhereInput | PersonalInfoWhereInput[]
    identityNumber?: StringNullableFilter<"PersonalInfo"> | string | null
    issueDate?: DateTimeNullableFilter<"PersonalInfo"> | Date | string | null
    issuePlace?: StringNullableFilter<"PersonalInfo"> | string | null
    hometown?: StringNullableFilter<"PersonalInfo"> | string | null
    idAddress?: StringNullableFilter<"PersonalInfo"> | string | null
    education?: StringNullableFilter<"PersonalInfo"> | string | null
    drivingLicense?: StringNullableFilter<"PersonalInfo"> | string | null
    toyotaCertificate?: StringNullableFilter<"PersonalInfo"> | string | null
    taxCode?: StringNullableFilter<"PersonalInfo"> | string | null
    insuranceNumber?: StringNullableFilter<"PersonalInfo"> | string | null
    insuranceSalary?: IntNullableFilter<"PersonalInfo"> | number | null
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id" | "employeeId">

  export type PersonalInfoOrderByWithAggregationInput = {
    id?: SortOrder
    identityNumber?: SortOrderInput | SortOrder
    issueDate?: SortOrderInput | SortOrder
    issuePlace?: SortOrderInput | SortOrder
    hometown?: SortOrderInput | SortOrder
    idAddress?: SortOrderInput | SortOrder
    education?: SortOrderInput | SortOrder
    drivingLicense?: SortOrderInput | SortOrder
    toyotaCertificate?: SortOrderInput | SortOrder
    taxCode?: SortOrderInput | SortOrder
    insuranceNumber?: SortOrderInput | SortOrder
    insuranceSalary?: SortOrderInput | SortOrder
    employeeId?: SortOrder
    _count?: PersonalInfoCountOrderByAggregateInput
    _avg?: PersonalInfoAvgOrderByAggregateInput
    _max?: PersonalInfoMaxOrderByAggregateInput
    _min?: PersonalInfoMinOrderByAggregateInput
    _sum?: PersonalInfoSumOrderByAggregateInput
  }

  export type PersonalInfoScalarWhereWithAggregatesInput = {
    AND?: PersonalInfoScalarWhereWithAggregatesInput | PersonalInfoScalarWhereWithAggregatesInput[]
    OR?: PersonalInfoScalarWhereWithAggregatesInput[]
    NOT?: PersonalInfoScalarWhereWithAggregatesInput | PersonalInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PersonalInfo"> | number
    identityNumber?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    issueDate?: DateTimeNullableWithAggregatesFilter<"PersonalInfo"> | Date | string | null
    issuePlace?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    hometown?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    idAddress?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    education?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    drivingLicense?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    toyotaCertificate?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    taxCode?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    insuranceNumber?: StringNullableWithAggregatesFilter<"PersonalInfo"> | string | null
    insuranceSalary?: IntNullableWithAggregatesFilter<"PersonalInfo"> | number | null
    employeeId?: IntWithAggregatesFilter<"PersonalInfo"> | number
  }

  export type ContactInfoWhereInput = {
    AND?: ContactInfoWhereInput | ContactInfoWhereInput[]
    OR?: ContactInfoWhereInput[]
    NOT?: ContactInfoWhereInput | ContactInfoWhereInput[]
    id?: IntFilter<"ContactInfo"> | number
    phoneNumber?: StringNullableFilter<"ContactInfo"> | string | null
    relativePhone?: StringNullableFilter<"ContactInfo"> | string | null
    companyPhone?: StringNullableFilter<"ContactInfo"> | string | null
    email?: StringNullableFilter<"ContactInfo"> | string | null
    employeeId?: IntFilter<"ContactInfo"> | number
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type ContactInfoOrderByWithRelationInput = {
    id?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    relativePhone?: SortOrderInput | SortOrder
    companyPhone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    employeeId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type ContactInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employeeId?: number
    AND?: ContactInfoWhereInput | ContactInfoWhereInput[]
    OR?: ContactInfoWhereInput[]
    NOT?: ContactInfoWhereInput | ContactInfoWhereInput[]
    phoneNumber?: StringNullableFilter<"ContactInfo"> | string | null
    relativePhone?: StringNullableFilter<"ContactInfo"> | string | null
    companyPhone?: StringNullableFilter<"ContactInfo"> | string | null
    email?: StringNullableFilter<"ContactInfo"> | string | null
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id" | "employeeId">

  export type ContactInfoOrderByWithAggregationInput = {
    id?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    relativePhone?: SortOrderInput | SortOrder
    companyPhone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    employeeId?: SortOrder
    _count?: ContactInfoCountOrderByAggregateInput
    _avg?: ContactInfoAvgOrderByAggregateInput
    _max?: ContactInfoMaxOrderByAggregateInput
    _min?: ContactInfoMinOrderByAggregateInput
    _sum?: ContactInfoSumOrderByAggregateInput
  }

  export type ContactInfoScalarWhereWithAggregatesInput = {
    AND?: ContactInfoScalarWhereWithAggregatesInput | ContactInfoScalarWhereWithAggregatesInput[]
    OR?: ContactInfoScalarWhereWithAggregatesInput[]
    NOT?: ContactInfoScalarWhereWithAggregatesInput | ContactInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactInfo"> | number
    phoneNumber?: StringNullableWithAggregatesFilter<"ContactInfo"> | string | null
    relativePhone?: StringNullableWithAggregatesFilter<"ContactInfo"> | string | null
    companyPhone?: StringNullableWithAggregatesFilter<"ContactInfo"> | string | null
    email?: StringNullableWithAggregatesFilter<"ContactInfo"> | string | null
    employeeId?: IntWithAggregatesFilter<"ContactInfo"> | number
  }

  export type OtherInfoWhereInput = {
    AND?: OtherInfoWhereInput | OtherInfoWhereInput[]
    OR?: OtherInfoWhereInput[]
    NOT?: OtherInfoWhereInput | OtherInfoWhereInput[]
    id?: IntFilter<"OtherInfo"> | number
    workStatus?: EnumWorkStatusFilter<"OtherInfo"> | $Enums.WorkStatus
    resignedDate?: DateTimeNullableFilter<"OtherInfo"> | Date | string | null
    documentsChecked?: StringNullableFilter<"OtherInfo"> | string | null
    updatedAt?: DateTimeNullableFilter<"OtherInfo"> | Date | string | null
    VCB?: StringNullableFilter<"OtherInfo"> | string | null
    MTCV?: StringNullableFilter<"OtherInfo"> | string | null
    PNJ?: StringNullableFilter<"OtherInfo"> | string | null
    employeeId?: IntFilter<"OtherInfo"> | number
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type OtherInfoOrderByWithRelationInput = {
    id?: SortOrder
    workStatus?: SortOrder
    resignedDate?: SortOrderInput | SortOrder
    documentsChecked?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    VCB?: SortOrderInput | SortOrder
    MTCV?: SortOrderInput | SortOrder
    PNJ?: SortOrderInput | SortOrder
    employeeId?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type OtherInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employeeId?: number
    AND?: OtherInfoWhereInput | OtherInfoWhereInput[]
    OR?: OtherInfoWhereInput[]
    NOT?: OtherInfoWhereInput | OtherInfoWhereInput[]
    workStatus?: EnumWorkStatusFilter<"OtherInfo"> | $Enums.WorkStatus
    resignedDate?: DateTimeNullableFilter<"OtherInfo"> | Date | string | null
    documentsChecked?: StringNullableFilter<"OtherInfo"> | string | null
    updatedAt?: DateTimeNullableFilter<"OtherInfo"> | Date | string | null
    VCB?: StringNullableFilter<"OtherInfo"> | string | null
    MTCV?: StringNullableFilter<"OtherInfo"> | string | null
    PNJ?: StringNullableFilter<"OtherInfo"> | string | null
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id" | "employeeId">

  export type OtherInfoOrderByWithAggregationInput = {
    id?: SortOrder
    workStatus?: SortOrder
    resignedDate?: SortOrderInput | SortOrder
    documentsChecked?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    VCB?: SortOrderInput | SortOrder
    MTCV?: SortOrderInput | SortOrder
    PNJ?: SortOrderInput | SortOrder
    employeeId?: SortOrder
    _count?: OtherInfoCountOrderByAggregateInput
    _avg?: OtherInfoAvgOrderByAggregateInput
    _max?: OtherInfoMaxOrderByAggregateInput
    _min?: OtherInfoMinOrderByAggregateInput
    _sum?: OtherInfoSumOrderByAggregateInput
  }

  export type OtherInfoScalarWhereWithAggregatesInput = {
    AND?: OtherInfoScalarWhereWithAggregatesInput | OtherInfoScalarWhereWithAggregatesInput[]
    OR?: OtherInfoScalarWhereWithAggregatesInput[]
    NOT?: OtherInfoScalarWhereWithAggregatesInput | OtherInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OtherInfo"> | number
    workStatus?: EnumWorkStatusWithAggregatesFilter<"OtherInfo"> | $Enums.WorkStatus
    resignedDate?: DateTimeNullableWithAggregatesFilter<"OtherInfo"> | Date | string | null
    documentsChecked?: StringNullableWithAggregatesFilter<"OtherInfo"> | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"OtherInfo"> | Date | string | null
    VCB?: StringNullableWithAggregatesFilter<"OtherInfo"> | string | null
    MTCV?: StringNullableWithAggregatesFilter<"OtherInfo"> | string | null
    PNJ?: StringNullableWithAggregatesFilter<"OtherInfo"> | string | null
    employeeId?: IntWithAggregatesFilter<"OtherInfo"> | number
  }

  export type LeaveRequestWhereInput = {
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    id?: IntFilter<"LeaveRequest"> | number
    employeeId?: IntFilter<"LeaveRequest"> | number
    leaveType?: EnumLeaveTypeEnumFilter<"LeaveRequest"> | $Enums.LeaveTypeEnum
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    totalHours?: FloatNullableFilter<"LeaveRequest"> | number | null
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: EnumLeaveStatusFilter<"LeaveRequest"> | $Enums.LeaveStatus
    approvedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    approvalSteps?: LeaveApprovalStepListRelationFilter
  }

  export type LeaveRequestOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalHours?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    approvalSteps?: LeaveApprovalStepOrderByRelationAggregateInput
  }

  export type LeaveRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    OR?: LeaveRequestWhereInput[]
    NOT?: LeaveRequestWhereInput | LeaveRequestWhereInput[]
    employeeId?: IntFilter<"LeaveRequest"> | number
    leaveType?: EnumLeaveTypeEnumFilter<"LeaveRequest"> | $Enums.LeaveTypeEnum
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    totalHours?: FloatNullableFilter<"LeaveRequest"> | number | null
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: EnumLeaveStatusFilter<"LeaveRequest"> | $Enums.LeaveStatus
    approvedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    approvalSteps?: LeaveApprovalStepListRelationFilter
  }, "id">

  export type LeaveRequestOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalHours?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: LeaveRequestCountOrderByAggregateInput
    _avg?: LeaveRequestAvgOrderByAggregateInput
    _max?: LeaveRequestMaxOrderByAggregateInput
    _min?: LeaveRequestMinOrderByAggregateInput
    _sum?: LeaveRequestSumOrderByAggregateInput
  }

  export type LeaveRequestScalarWhereWithAggregatesInput = {
    AND?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    OR?: LeaveRequestScalarWhereWithAggregatesInput[]
    NOT?: LeaveRequestScalarWhereWithAggregatesInput | LeaveRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeaveRequest"> | number
    employeeId?: IntWithAggregatesFilter<"LeaveRequest"> | number
    leaveType?: EnumLeaveTypeEnumWithAggregatesFilter<"LeaveRequest"> | $Enums.LeaveTypeEnum
    startDate?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
    totalHours?: FloatNullableWithAggregatesFilter<"LeaveRequest"> | number | null
    reason?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    status?: EnumLeaveStatusWithAggregatesFilter<"LeaveRequest"> | $Enums.LeaveStatus
    approvedBy?: StringNullableWithAggregatesFilter<"LeaveRequest"> | string | null
    approvedAt?: DateTimeNullableWithAggregatesFilter<"LeaveRequest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"LeaveRequest"> | Date | string
  }

  export type LeaveApprovalStepWhereInput = {
    AND?: LeaveApprovalStepWhereInput | LeaveApprovalStepWhereInput[]
    OR?: LeaveApprovalStepWhereInput[]
    NOT?: LeaveApprovalStepWhereInput | LeaveApprovalStepWhereInput[]
    id?: IntFilter<"LeaveApprovalStep"> | number
    leaveRequestId?: IntFilter<"LeaveApprovalStep"> | number
    level?: IntFilter<"LeaveApprovalStep"> | number
    status?: EnumLeaveStatusFilter<"LeaveApprovalStep"> | $Enums.LeaveStatus
    approvedAt?: DateTimeNullableFilter<"LeaveApprovalStep"> | Date | string | null
    leaveRequest?: XOR<LeaveRequestScalarRelationFilter, LeaveRequestWhereInput>
    approvers?: LeaveApprovalStepApproverListRelationFilter
  }

  export type LeaveApprovalStepOrderByWithRelationInput = {
    id?: SortOrder
    leaveRequestId?: SortOrder
    level?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    leaveRequest?: LeaveRequestOrderByWithRelationInput
    approvers?: LeaveApprovalStepApproverOrderByRelationAggregateInput
  }

  export type LeaveApprovalStepWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    leaveRequestId_level?: LeaveApprovalStepLeaveRequestIdLevelCompoundUniqueInput
    AND?: LeaveApprovalStepWhereInput | LeaveApprovalStepWhereInput[]
    OR?: LeaveApprovalStepWhereInput[]
    NOT?: LeaveApprovalStepWhereInput | LeaveApprovalStepWhereInput[]
    leaveRequestId?: IntFilter<"LeaveApprovalStep"> | number
    level?: IntFilter<"LeaveApprovalStep"> | number
    status?: EnumLeaveStatusFilter<"LeaveApprovalStep"> | $Enums.LeaveStatus
    approvedAt?: DateTimeNullableFilter<"LeaveApprovalStep"> | Date | string | null
    leaveRequest?: XOR<LeaveRequestScalarRelationFilter, LeaveRequestWhereInput>
    approvers?: LeaveApprovalStepApproverListRelationFilter
  }, "id" | "leaveRequestId_level">

  export type LeaveApprovalStepOrderByWithAggregationInput = {
    id?: SortOrder
    leaveRequestId?: SortOrder
    level?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    _count?: LeaveApprovalStepCountOrderByAggregateInput
    _avg?: LeaveApprovalStepAvgOrderByAggregateInput
    _max?: LeaveApprovalStepMaxOrderByAggregateInput
    _min?: LeaveApprovalStepMinOrderByAggregateInput
    _sum?: LeaveApprovalStepSumOrderByAggregateInput
  }

  export type LeaveApprovalStepScalarWhereWithAggregatesInput = {
    AND?: LeaveApprovalStepScalarWhereWithAggregatesInput | LeaveApprovalStepScalarWhereWithAggregatesInput[]
    OR?: LeaveApprovalStepScalarWhereWithAggregatesInput[]
    NOT?: LeaveApprovalStepScalarWhereWithAggregatesInput | LeaveApprovalStepScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeaveApprovalStep"> | number
    leaveRequestId?: IntWithAggregatesFilter<"LeaveApprovalStep"> | number
    level?: IntWithAggregatesFilter<"LeaveApprovalStep"> | number
    status?: EnumLeaveStatusWithAggregatesFilter<"LeaveApprovalStep"> | $Enums.LeaveStatus
    approvedAt?: DateTimeNullableWithAggregatesFilter<"LeaveApprovalStep"> | Date | string | null
  }

  export type LeaveApprovalStepApproverWhereInput = {
    AND?: LeaveApprovalStepApproverWhereInput | LeaveApprovalStepApproverWhereInput[]
    OR?: LeaveApprovalStepApproverWhereInput[]
    NOT?: LeaveApprovalStepApproverWhereInput | LeaveApprovalStepApproverWhereInput[]
    id?: IntFilter<"LeaveApprovalStepApprover"> | number
    leaveApprovalStepId?: IntFilter<"LeaveApprovalStepApprover"> | number
    approverId?: IntFilter<"LeaveApprovalStepApprover"> | number
    status?: EnumLeaveStatusFilter<"LeaveApprovalStepApprover"> | $Enums.LeaveStatus
    approvedAt?: DateTimeNullableFilter<"LeaveApprovalStepApprover"> | Date | string | null
    leaveApprovalStep?: XOR<LeaveApprovalStepScalarRelationFilter, LeaveApprovalStepWhereInput>
    approver?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type LeaveApprovalStepApproverOrderByWithRelationInput = {
    id?: SortOrder
    leaveApprovalStepId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    leaveApprovalStep?: LeaveApprovalStepOrderByWithRelationInput
    approver?: EmployeeOrderByWithRelationInput
  }

  export type LeaveApprovalStepApproverWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    leaveApprovalStepId_approverId?: LeaveApprovalStepApproverLeaveApprovalStepIdApproverIdCompoundUniqueInput
    AND?: LeaveApprovalStepApproverWhereInput | LeaveApprovalStepApproverWhereInput[]
    OR?: LeaveApprovalStepApproverWhereInput[]
    NOT?: LeaveApprovalStepApproverWhereInput | LeaveApprovalStepApproverWhereInput[]
    leaveApprovalStepId?: IntFilter<"LeaveApprovalStepApprover"> | number
    approverId?: IntFilter<"LeaveApprovalStepApprover"> | number
    status?: EnumLeaveStatusFilter<"LeaveApprovalStepApprover"> | $Enums.LeaveStatus
    approvedAt?: DateTimeNullableFilter<"LeaveApprovalStepApprover"> | Date | string | null
    leaveApprovalStep?: XOR<LeaveApprovalStepScalarRelationFilter, LeaveApprovalStepWhereInput>
    approver?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id" | "leaveApprovalStepId_approverId">

  export type LeaveApprovalStepApproverOrderByWithAggregationInput = {
    id?: SortOrder
    leaveApprovalStepId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    _count?: LeaveApprovalStepApproverCountOrderByAggregateInput
    _avg?: LeaveApprovalStepApproverAvgOrderByAggregateInput
    _max?: LeaveApprovalStepApproverMaxOrderByAggregateInput
    _min?: LeaveApprovalStepApproverMinOrderByAggregateInput
    _sum?: LeaveApprovalStepApproverSumOrderByAggregateInput
  }

  export type LeaveApprovalStepApproverScalarWhereWithAggregatesInput = {
    AND?: LeaveApprovalStepApproverScalarWhereWithAggregatesInput | LeaveApprovalStepApproverScalarWhereWithAggregatesInput[]
    OR?: LeaveApprovalStepApproverScalarWhereWithAggregatesInput[]
    NOT?: LeaveApprovalStepApproverScalarWhereWithAggregatesInput | LeaveApprovalStepApproverScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LeaveApprovalStepApprover"> | number
    leaveApprovalStepId?: IntWithAggregatesFilter<"LeaveApprovalStepApprover"> | number
    approverId?: IntWithAggregatesFilter<"LeaveApprovalStepApprover"> | number
    status?: EnumLeaveStatusWithAggregatesFilter<"LeaveApprovalStepApprover"> | $Enums.LeaveStatus
    approvedAt?: DateTimeNullableWithAggregatesFilter<"LeaveApprovalStepApprover"> | Date | string | null
  }

  export type AttendanceWhereInput = {
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    id?: IntFilter<"Attendance"> | number
    employeeId?: IntFilter<"Attendance"> | number
    date?: DateTimeFilter<"Attendance"> | Date | string
    checkInTime?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }

  export type AttendanceOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    checkOutTime?: SortOrderInput | SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type AttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    employeeId?: IntFilter<"Attendance"> | number
    date?: DateTimeFilter<"Attendance"> | Date | string
    checkInTime?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
  }, "id">

  export type AttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    checkOutTime?: SortOrderInput | SortOrder
    _count?: AttendanceCountOrderByAggregateInput
    _avg?: AttendanceAvgOrderByAggregateInput
    _max?: AttendanceMaxOrderByAggregateInput
    _min?: AttendanceMinOrderByAggregateInput
    _sum?: AttendanceSumOrderByAggregateInput
  }

  export type AttendanceScalarWhereWithAggregatesInput = {
    AND?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    OR?: AttendanceScalarWhereWithAggregatesInput[]
    NOT?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Attendance"> | number
    employeeId?: IntWithAggregatesFilter<"Attendance"> | number
    date?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    checkInTime?: DateTimeNullableWithAggregatesFilter<"Attendance"> | Date | string | null
    checkOutTime?: DateTimeNullableWithAggregatesFilter<"Attendance"> | Date | string | null
  }

  export type KPIWhereInput = {
    AND?: KPIWhereInput | KPIWhereInput[]
    OR?: KPIWhereInput[]
    NOT?: KPIWhereInput | KPIWhereInput[]
    id?: IntFilter<"KPI"> | number
    name?: StringFilter<"KPI"> | string
    period?: StringFilter<"KPI"> | string
    createdAt?: DateTimeFilter<"KPI"> | Date | string
    updatedAt?: DateTimeFilter<"KPI"> | Date | string
    kpiEmployees?: KPIEmployeeListRelationFilter
  }

  export type KPIOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kpiEmployees?: KPIEmployeeOrderByRelationAggregateInput
  }

  export type KPIWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KPIWhereInput | KPIWhereInput[]
    OR?: KPIWhereInput[]
    NOT?: KPIWhereInput | KPIWhereInput[]
    name?: StringFilter<"KPI"> | string
    period?: StringFilter<"KPI"> | string
    createdAt?: DateTimeFilter<"KPI"> | Date | string
    updatedAt?: DateTimeFilter<"KPI"> | Date | string
    kpiEmployees?: KPIEmployeeListRelationFilter
  }, "id">

  export type KPIOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KPICountOrderByAggregateInput
    _avg?: KPIAvgOrderByAggregateInput
    _max?: KPIMaxOrderByAggregateInput
    _min?: KPIMinOrderByAggregateInput
    _sum?: KPISumOrderByAggregateInput
  }

  export type KPIScalarWhereWithAggregatesInput = {
    AND?: KPIScalarWhereWithAggregatesInput | KPIScalarWhereWithAggregatesInput[]
    OR?: KPIScalarWhereWithAggregatesInput[]
    NOT?: KPIScalarWhereWithAggregatesInput | KPIScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KPI"> | number
    name?: StringWithAggregatesFilter<"KPI"> | string
    period?: StringWithAggregatesFilter<"KPI"> | string
    createdAt?: DateTimeWithAggregatesFilter<"KPI"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KPI"> | Date | string
  }

  export type KPIEmployeeWhereInput = {
    AND?: KPIEmployeeWhereInput | KPIEmployeeWhereInput[]
    OR?: KPIEmployeeWhereInput[]
    NOT?: KPIEmployeeWhereInput | KPIEmployeeWhereInput[]
    id?: IntFilter<"KPIEmployee"> | number
    kpiId?: IntFilter<"KPIEmployee"> | number
    employeeId?: IntFilter<"KPIEmployee"> | number
    createdAt?: DateTimeFilter<"KPIEmployee"> | Date | string
    updatedAt?: DateTimeFilter<"KPIEmployee"> | Date | string
    kpi?: XOR<KPIScalarRelationFilter, KPIWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    entries?: KPIEntryListRelationFilter
  }

  export type KPIEmployeeOrderByWithRelationInput = {
    id?: SortOrder
    kpiId?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kpi?: KPIOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    entries?: KPIEntryOrderByRelationAggregateInput
  }

  export type KPIEmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    kpiId_employeeId?: KPIEmployeeKpiIdEmployeeIdCompoundUniqueInput
    AND?: KPIEmployeeWhereInput | KPIEmployeeWhereInput[]
    OR?: KPIEmployeeWhereInput[]
    NOT?: KPIEmployeeWhereInput | KPIEmployeeWhereInput[]
    kpiId?: IntFilter<"KPIEmployee"> | number
    employeeId?: IntFilter<"KPIEmployee"> | number
    createdAt?: DateTimeFilter<"KPIEmployee"> | Date | string
    updatedAt?: DateTimeFilter<"KPIEmployee"> | Date | string
    kpi?: XOR<KPIScalarRelationFilter, KPIWhereInput>
    employee?: XOR<EmployeeScalarRelationFilter, EmployeeWhereInput>
    entries?: KPIEntryListRelationFilter
  }, "id" | "kpiId_employeeId">

  export type KPIEmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    kpiId?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KPIEmployeeCountOrderByAggregateInput
    _avg?: KPIEmployeeAvgOrderByAggregateInput
    _max?: KPIEmployeeMaxOrderByAggregateInput
    _min?: KPIEmployeeMinOrderByAggregateInput
    _sum?: KPIEmployeeSumOrderByAggregateInput
  }

  export type KPIEmployeeScalarWhereWithAggregatesInput = {
    AND?: KPIEmployeeScalarWhereWithAggregatesInput | KPIEmployeeScalarWhereWithAggregatesInput[]
    OR?: KPIEmployeeScalarWhereWithAggregatesInput[]
    NOT?: KPIEmployeeScalarWhereWithAggregatesInput | KPIEmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KPIEmployee"> | number
    kpiId?: IntWithAggregatesFilter<"KPIEmployee"> | number
    employeeId?: IntWithAggregatesFilter<"KPIEmployee"> | number
    createdAt?: DateTimeWithAggregatesFilter<"KPIEmployee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KPIEmployee"> | Date | string
  }

  export type KPIEntryWhereInput = {
    AND?: KPIEntryWhereInput | KPIEntryWhereInput[]
    OR?: KPIEntryWhereInput[]
    NOT?: KPIEntryWhereInput | KPIEntryWhereInput[]
    id?: IntFilter<"KPIEntry"> | number
    kpiEmployeeId?: IntFilter<"KPIEntry"> | number
    name?: StringFilter<"KPIEntry"> | string
    targetValue?: FloatFilter<"KPIEntry"> | number
    achievedValue?: FloatFilter<"KPIEntry"> | number
    isAchieved?: BoolFilter<"KPIEntry"> | boolean
    createdAt?: DateTimeFilter<"KPIEntry"> | Date | string
    updatedAt?: DateTimeFilter<"KPIEntry"> | Date | string
    kpiEmployee?: XOR<KPIEmployeeScalarRelationFilter, KPIEmployeeWhereInput>
  }

  export type KPIEntryOrderByWithRelationInput = {
    id?: SortOrder
    kpiEmployeeId?: SortOrder
    name?: SortOrder
    targetValue?: SortOrder
    achievedValue?: SortOrder
    isAchieved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kpiEmployee?: KPIEmployeeOrderByWithRelationInput
  }

  export type KPIEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    kpiEmployeeId_name?: KPIEntryKpiEmployeeIdNameCompoundUniqueInput
    AND?: KPIEntryWhereInput | KPIEntryWhereInput[]
    OR?: KPIEntryWhereInput[]
    NOT?: KPIEntryWhereInput | KPIEntryWhereInput[]
    kpiEmployeeId?: IntFilter<"KPIEntry"> | number
    name?: StringFilter<"KPIEntry"> | string
    targetValue?: FloatFilter<"KPIEntry"> | number
    achievedValue?: FloatFilter<"KPIEntry"> | number
    isAchieved?: BoolFilter<"KPIEntry"> | boolean
    createdAt?: DateTimeFilter<"KPIEntry"> | Date | string
    updatedAt?: DateTimeFilter<"KPIEntry"> | Date | string
    kpiEmployee?: XOR<KPIEmployeeScalarRelationFilter, KPIEmployeeWhereInput>
  }, "id" | "kpiEmployeeId_name">

  export type KPIEntryOrderByWithAggregationInput = {
    id?: SortOrder
    kpiEmployeeId?: SortOrder
    name?: SortOrder
    targetValue?: SortOrder
    achievedValue?: SortOrder
    isAchieved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KPIEntryCountOrderByAggregateInput
    _avg?: KPIEntryAvgOrderByAggregateInput
    _max?: KPIEntryMaxOrderByAggregateInput
    _min?: KPIEntryMinOrderByAggregateInput
    _sum?: KPIEntrySumOrderByAggregateInput
  }

  export type KPIEntryScalarWhereWithAggregatesInput = {
    AND?: KPIEntryScalarWhereWithAggregatesInput | KPIEntryScalarWhereWithAggregatesInput[]
    OR?: KPIEntryScalarWhereWithAggregatesInput[]
    NOT?: KPIEntryScalarWhereWithAggregatesInput | KPIEntryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KPIEntry"> | number
    kpiEmployeeId?: IntWithAggregatesFilter<"KPIEntry"> | number
    name?: StringWithAggregatesFilter<"KPIEntry"> | string
    targetValue?: FloatWithAggregatesFilter<"KPIEntry"> | number
    achievedValue?: FloatWithAggregatesFilter<"KPIEntry"> | number
    isAchieved?: BoolWithAggregatesFilter<"KPIEntry"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"KPIEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KPIEntry"> | Date | string
  }

  export type EmployeeCreateInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
  }

  export type EmployeeUpdateManyMutationInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartmentCreateInput = {
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: EmployeeCreateNestedOneWithoutDepartmentHeadOfInput
    director?: EmployeeCreateNestedOneWithoutDepartmentDirectorOfInput
    positions?: PositionCreateNestedManyWithoutDepartmentInput
    workInfos?: WorkInfoCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    headId?: number | null
    directorId?: number | null
    positions?: PositionUncheckedCreateNestedManyWithoutDepartmentInput
    workInfos?: WorkInfoUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: EmployeeUpdateOneWithoutDepartmentHeadOfNestedInput
    director?: EmployeeUpdateOneWithoutDepartmentDirectorOfNestedInput
    positions?: PositionUpdateManyWithoutDepartmentNestedInput
    workInfos?: WorkInfoUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    headId?: NullableIntFieldUpdateOperationsInput | number | null
    directorId?: NullableIntFieldUpdateOperationsInput | number | null
    positions?: PositionUncheckedUpdateManyWithoutDepartmentNestedInput
    workInfos?: WorkInfoUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: number
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    headId?: number | null
    directorId?: number | null
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    headId?: NullableIntFieldUpdateOperationsInput | number | null
    directorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PositionCreateInput = {
    name: string
    level?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutPositionsInput
    employees?: WorkInfoCreateNestedManyWithoutPositionInput
  }

  export type PositionUncheckedCreateInput = {
    id?: number
    name: string
    level?: number
    departmentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: WorkInfoUncheckedCreateNestedManyWithoutPositionInput
  }

  export type PositionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutPositionsNestedInput
    employees?: WorkInfoUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: WorkInfoUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type PositionCreateManyInput = {
    id?: number
    name: string
    level?: number
    departmentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkInfoCreateInput = {
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutWorkInfosInput
    position?: PositionCreateNestedOneWithoutEmployeesInput
    employee: EmployeeCreateNestedOneWithoutWorkInfoInput
  }

  export type WorkInfoUncheckedCreateInput = {
    id?: number
    departmentId?: number | null
    positionId?: number | null
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    employeeId: number
  }

  export type WorkInfoUpdateInput = {
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutWorkInfosNestedInput
    position?: PositionUpdateOneWithoutEmployeesNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutWorkInfoNestedInput
  }

  export type WorkInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkInfoCreateManyInput = {
    id?: number
    departmentId?: number | null
    positionId?: number | null
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    employeeId: number
  }

  export type WorkInfoUpdateManyMutationInput = {
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type PersonalInfoCreateInput = {
    identityNumber?: string | null
    issueDate?: Date | string | null
    issuePlace?: string | null
    hometown?: string | null
    idAddress?: string | null
    education?: string | null
    drivingLicense?: string | null
    toyotaCertificate?: string | null
    taxCode?: string | null
    insuranceNumber?: string | null
    insuranceSalary?: number | null
    employee: EmployeeCreateNestedOneWithoutPersonalInfoInput
  }

  export type PersonalInfoUncheckedCreateInput = {
    id?: number
    identityNumber?: string | null
    issueDate?: Date | string | null
    issuePlace?: string | null
    hometown?: string | null
    idAddress?: string | null
    education?: string | null
    drivingLicense?: string | null
    toyotaCertificate?: string | null
    taxCode?: string | null
    insuranceNumber?: string | null
    insuranceSalary?: number | null
    employeeId: number
  }

  export type PersonalInfoUpdateInput = {
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuePlace?: NullableStringFieldUpdateOperationsInput | string | null
    hometown?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    drivingLicense?: NullableStringFieldUpdateOperationsInput | string | null
    toyotaCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceSalary?: NullableIntFieldUpdateOperationsInput | number | null
    employee?: EmployeeUpdateOneRequiredWithoutPersonalInfoNestedInput
  }

  export type PersonalInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuePlace?: NullableStringFieldUpdateOperationsInput | string | null
    hometown?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    drivingLicense?: NullableStringFieldUpdateOperationsInput | string | null
    toyotaCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceSalary?: NullableIntFieldUpdateOperationsInput | number | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type PersonalInfoCreateManyInput = {
    id?: number
    identityNumber?: string | null
    issueDate?: Date | string | null
    issuePlace?: string | null
    hometown?: string | null
    idAddress?: string | null
    education?: string | null
    drivingLicense?: string | null
    toyotaCertificate?: string | null
    taxCode?: string | null
    insuranceNumber?: string | null
    insuranceSalary?: number | null
    employeeId: number
  }

  export type PersonalInfoUpdateManyMutationInput = {
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuePlace?: NullableStringFieldUpdateOperationsInput | string | null
    hometown?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    drivingLicense?: NullableStringFieldUpdateOperationsInput | string | null
    toyotaCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceSalary?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PersonalInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuePlace?: NullableStringFieldUpdateOperationsInput | string | null
    hometown?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    drivingLicense?: NullableStringFieldUpdateOperationsInput | string | null
    toyotaCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceSalary?: NullableIntFieldUpdateOperationsInput | number | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type ContactInfoCreateInput = {
    phoneNumber?: string | null
    relativePhone?: string | null
    companyPhone?: string | null
    email?: string | null
    employee: EmployeeCreateNestedOneWithoutContactInfoInput
  }

  export type ContactInfoUncheckedCreateInput = {
    id?: number
    phoneNumber?: string | null
    relativePhone?: string | null
    companyPhone?: string | null
    email?: string | null
    employeeId: number
  }

  export type ContactInfoUpdateInput = {
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    relativePhone?: NullableStringFieldUpdateOperationsInput | string | null
    companyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    employee?: EmployeeUpdateOneRequiredWithoutContactInfoNestedInput
  }

  export type ContactInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    relativePhone?: NullableStringFieldUpdateOperationsInput | string | null
    companyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type ContactInfoCreateManyInput = {
    id?: number
    phoneNumber?: string | null
    relativePhone?: string | null
    companyPhone?: string | null
    email?: string | null
    employeeId: number
  }

  export type ContactInfoUpdateManyMutationInput = {
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    relativePhone?: NullableStringFieldUpdateOperationsInput | string | null
    companyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    relativePhone?: NullableStringFieldUpdateOperationsInput | string | null
    companyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type OtherInfoCreateInput = {
    workStatus?: $Enums.WorkStatus
    resignedDate?: Date | string | null
    documentsChecked?: string | null
    updatedAt?: Date | string | null
    VCB?: string | null
    MTCV?: string | null
    PNJ?: string | null
    employee: EmployeeCreateNestedOneWithoutOtherInfoInput
  }

  export type OtherInfoUncheckedCreateInput = {
    id?: number
    workStatus?: $Enums.WorkStatus
    resignedDate?: Date | string | null
    documentsChecked?: string | null
    updatedAt?: Date | string | null
    VCB?: string | null
    MTCV?: string | null
    PNJ?: string | null
    employeeId: number
  }

  export type OtherInfoUpdateInput = {
    workStatus?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    resignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentsChecked?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    VCB?: NullableStringFieldUpdateOperationsInput | string | null
    MTCV?: NullableStringFieldUpdateOperationsInput | string | null
    PNJ?: NullableStringFieldUpdateOperationsInput | string | null
    employee?: EmployeeUpdateOneRequiredWithoutOtherInfoNestedInput
  }

  export type OtherInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workStatus?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    resignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentsChecked?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    VCB?: NullableStringFieldUpdateOperationsInput | string | null
    MTCV?: NullableStringFieldUpdateOperationsInput | string | null
    PNJ?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type OtherInfoCreateManyInput = {
    id?: number
    workStatus?: $Enums.WorkStatus
    resignedDate?: Date | string | null
    documentsChecked?: string | null
    updatedAt?: Date | string | null
    VCB?: string | null
    MTCV?: string | null
    PNJ?: string | null
    employeeId: number
  }

  export type OtherInfoUpdateManyMutationInput = {
    workStatus?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    resignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentsChecked?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    VCB?: NullableStringFieldUpdateOperationsInput | string | null
    MTCV?: NullableStringFieldUpdateOperationsInput | string | null
    PNJ?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtherInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workStatus?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    resignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentsChecked?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    VCB?: NullableStringFieldUpdateOperationsInput | string | null
    MTCV?: NullableStringFieldUpdateOperationsInput | string | null
    PNJ?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type LeaveRequestCreateInput = {
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date | string
    endDate: Date | string
    totalHours?: number | null
    reason?: string | null
    status?: $Enums.LeaveStatus
    approvedBy?: string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveRequestInput
    approvalSteps?: LeaveApprovalStepCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestUncheckedCreateInput = {
    id?: number
    employeeId: number
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date | string
    endDate: Date | string
    totalHours?: number | null
    reason?: string | null
    status?: $Enums.LeaveStatus
    approvedBy?: string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    approvalSteps?: LeaveApprovalStepUncheckedCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestUpdateInput = {
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveRequestNestedInput
    approvalSteps?: LeaveApprovalStepUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalSteps?: LeaveApprovalStepUncheckedUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestCreateManyInput = {
    id?: number
    employeeId: number
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date | string
    endDate: Date | string
    totalHours?: number | null
    reason?: string | null
    status?: $Enums.LeaveStatus
    approvedBy?: string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LeaveRequestUpdateManyMutationInput = {
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveApprovalStepCreateInput = {
    level: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
    leaveRequest: LeaveRequestCreateNestedOneWithoutApprovalStepsInput
    approvers?: LeaveApprovalStepApproverCreateNestedManyWithoutLeaveApprovalStepInput
  }

  export type LeaveApprovalStepUncheckedCreateInput = {
    id?: number
    leaveRequestId: number
    level: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
    approvers?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutLeaveApprovalStepInput
  }

  export type LeaveApprovalStepUpdateInput = {
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaveRequest?: LeaveRequestUpdateOneRequiredWithoutApprovalStepsNestedInput
    approvers?: LeaveApprovalStepApproverUpdateManyWithoutLeaveApprovalStepNestedInput
  }

  export type LeaveApprovalStepUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveRequestId?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvers?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutLeaveApprovalStepNestedInput
  }

  export type LeaveApprovalStepCreateManyInput = {
    id?: number
    leaveRequestId: number
    level: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type LeaveApprovalStepUpdateManyMutationInput = {
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveApprovalStepUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveRequestId?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveApprovalStepApproverCreateInput = {
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
    leaveApprovalStep: LeaveApprovalStepCreateNestedOneWithoutApproversInput
    approver: EmployeeCreateNestedOneWithoutLeaveApprovalStepsInput
  }

  export type LeaveApprovalStepApproverUncheckedCreateInput = {
    id?: number
    leaveApprovalStepId: number
    approverId: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type LeaveApprovalStepApproverUpdateInput = {
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaveApprovalStep?: LeaveApprovalStepUpdateOneRequiredWithoutApproversNestedInput
    approver?: EmployeeUpdateOneRequiredWithoutLeaveApprovalStepsNestedInput
  }

  export type LeaveApprovalStepApproverUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveApprovalStepId?: IntFieldUpdateOperationsInput | number
    approverId?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveApprovalStepApproverCreateManyInput = {
    id?: number
    leaveApprovalStepId: number
    approverId: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type LeaveApprovalStepApproverUpdateManyMutationInput = {
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveApprovalStepApproverUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveApprovalStepId?: IntFieldUpdateOperationsInput | number
    approverId?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendanceCreateInput = {
    date: Date | string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
    employee: EmployeeCreateNestedOneWithoutAttendanceInput
  }

  export type AttendanceUncheckedCreateInput = {
    id?: number
    employeeId: number
    date: Date | string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
  }

  export type AttendanceUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type AttendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendanceCreateManyInput = {
    id?: number
    employeeId: number
    date: Date | string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
  }

  export type AttendanceUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KPICreateInput = {
    name: string
    period: string
    createdAt?: Date | string
    updatedAt?: Date | string
    kpiEmployees?: KPIEmployeeCreateNestedManyWithoutKpiInput
  }

  export type KPIUncheckedCreateInput = {
    id?: number
    name: string
    period: string
    createdAt?: Date | string
    updatedAt?: Date | string
    kpiEmployees?: KPIEmployeeUncheckedCreateNestedManyWithoutKpiInput
  }

  export type KPIUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpiEmployees?: KPIEmployeeUpdateManyWithoutKpiNestedInput
  }

  export type KPIUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpiEmployees?: KPIEmployeeUncheckedUpdateManyWithoutKpiNestedInput
  }

  export type KPICreateManyInput = {
    id?: number
    name: string
    period: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIEmployeeCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    kpi: KPICreateNestedOneWithoutKpiEmployeesInput
    employee: EmployeeCreateNestedOneWithoutKPIEmployeeInput
    entries?: KPIEntryCreateNestedManyWithoutKpiEmployeeInput
  }

  export type KPIEmployeeUncheckedCreateInput = {
    id?: number
    kpiId: number
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: KPIEntryUncheckedCreateNestedManyWithoutKpiEmployeeInput
  }

  export type KPIEmployeeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpi?: KPIUpdateOneRequiredWithoutKpiEmployeesNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutKPIEmployeeNestedInput
    entries?: KPIEntryUpdateManyWithoutKpiEmployeeNestedInput
  }

  export type KPIEmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kpiId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: KPIEntryUncheckedUpdateManyWithoutKpiEmployeeNestedInput
  }

  export type KPIEmployeeCreateManyInput = {
    id?: number
    kpiId: number
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIEmployeeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIEmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kpiId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIEntryCreateInput = {
    name: string
    targetValue: number
    achievedValue?: number
    isAchieved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    kpiEmployee: KPIEmployeeCreateNestedOneWithoutEntriesInput
  }

  export type KPIEntryUncheckedCreateInput = {
    id?: number
    kpiEmployeeId: number
    name: string
    targetValue: number
    achievedValue?: number
    isAchieved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIEntryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    targetValue?: FloatFieldUpdateOperationsInput | number
    achievedValue?: FloatFieldUpdateOperationsInput | number
    isAchieved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpiEmployee?: KPIEmployeeUpdateOneRequiredWithoutEntriesNestedInput
  }

  export type KPIEntryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kpiEmployeeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    targetValue?: FloatFieldUpdateOperationsInput | number
    achievedValue?: FloatFieldUpdateOperationsInput | number
    isAchieved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIEntryCreateManyInput = {
    id?: number
    kpiEmployeeId: number
    name: string
    targetValue: number
    achievedValue?: number
    isAchieved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIEntryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    targetValue?: FloatFieldUpdateOperationsInput | number
    achievedValue?: FloatFieldUpdateOperationsInput | number
    isAchieved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIEntryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kpiEmployeeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    targetValue?: FloatFieldUpdateOperationsInput | number
    achievedValue?: FloatFieldUpdateOperationsInput | number
    isAchieved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumSexFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexFilter<$PrismaModel> | $Enums.Sex
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EmployeeNullableScalarRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type WorkInfoNullableScalarRelationFilter = {
    is?: WorkInfoWhereInput | null
    isNot?: WorkInfoWhereInput | null
  }

  export type PersonalInfoNullableScalarRelationFilter = {
    is?: PersonalInfoWhereInput | null
    isNot?: PersonalInfoWhereInput | null
  }

  export type ContactInfoNullableScalarRelationFilter = {
    is?: ContactInfoWhereInput | null
    isNot?: ContactInfoWhereInput | null
  }

  export type OtherInfoNullableScalarRelationFilter = {
    is?: OtherInfoWhereInput | null
    isNot?: OtherInfoWhereInput | null
  }

  export type LeaveRequestListRelationFilter = {
    every?: LeaveRequestWhereInput
    some?: LeaveRequestWhereInput
    none?: LeaveRequestWhereInput
  }

  export type LeaveApprovalStepApproverListRelationFilter = {
    every?: LeaveApprovalStepApproverWhereInput
    some?: LeaveApprovalStepApproverWhereInput
    none?: LeaveApprovalStepApproverWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: AttendanceWhereInput
    some?: AttendanceWhereInput
    none?: AttendanceWhereInput
  }

  export type KPIEmployeeListRelationFilter = {
    every?: KPIEmployeeWhereInput
    some?: KPIEmployeeWhereInput
    none?: KPIEmployeeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveApprovalStepApproverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KPIEmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    managerId?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    managerId?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    managerId?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    employeeCode?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    birthDate?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    managerId?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    managerId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexWithAggregatesFilter<$PrismaModel> | $Enums.Sex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexFilter<$PrismaModel>
    _max?: NestedEnumSexFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PositionListRelationFilter = {
    every?: PositionWhereInput
    some?: PositionWhereInput
    none?: PositionWhereInput
  }

  export type WorkInfoListRelationFilter = {
    every?: WorkInfoWhereInput
    some?: WorkInfoWhereInput
    none?: WorkInfoWhereInput
  }

  export type PositionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    headId?: SortOrder
    directorId?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    headId?: SortOrder
    directorId?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    headId?: SortOrder
    directorId?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    abbreviation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    headId?: SortOrder
    directorId?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
    headId?: SortOrder
    directorId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type PositionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    departmentId?: SortOrder
  }

  export type PositionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    departmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionSumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    departmentId?: SortOrder
  }

  export type PositionNullableScalarRelationFilter = {
    is?: PositionWhereInput | null
    isNot?: PositionWhereInput | null
  }

  export type EmployeeScalarRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type WorkInfoCountOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
    positionId?: SortOrder
    specialization?: SortOrder
    joinedTBD?: SortOrder
    joinedTeSCC?: SortOrder
    seniorityStart?: SortOrder
    seniority?: SortOrder
    contractNumber?: SortOrder
    contractDate?: SortOrder
    contractType?: SortOrder
    contractEndDate?: SortOrder
    employeeId?: SortOrder
  }

  export type WorkInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
    positionId?: SortOrder
    employeeId?: SortOrder
  }

  export type WorkInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
    positionId?: SortOrder
    specialization?: SortOrder
    joinedTBD?: SortOrder
    joinedTeSCC?: SortOrder
    seniorityStart?: SortOrder
    seniority?: SortOrder
    contractNumber?: SortOrder
    contractDate?: SortOrder
    contractType?: SortOrder
    contractEndDate?: SortOrder
    employeeId?: SortOrder
  }

  export type WorkInfoMinOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
    positionId?: SortOrder
    specialization?: SortOrder
    joinedTBD?: SortOrder
    joinedTeSCC?: SortOrder
    seniorityStart?: SortOrder
    seniority?: SortOrder
    contractNumber?: SortOrder
    contractDate?: SortOrder
    contractType?: SortOrder
    contractEndDate?: SortOrder
    employeeId?: SortOrder
  }

  export type WorkInfoSumOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
    positionId?: SortOrder
    employeeId?: SortOrder
  }

  export type PersonalInfoCountOrderByAggregateInput = {
    id?: SortOrder
    identityNumber?: SortOrder
    issueDate?: SortOrder
    issuePlace?: SortOrder
    hometown?: SortOrder
    idAddress?: SortOrder
    education?: SortOrder
    drivingLicense?: SortOrder
    toyotaCertificate?: SortOrder
    taxCode?: SortOrder
    insuranceNumber?: SortOrder
    insuranceSalary?: SortOrder
    employeeId?: SortOrder
  }

  export type PersonalInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    insuranceSalary?: SortOrder
    employeeId?: SortOrder
  }

  export type PersonalInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    identityNumber?: SortOrder
    issueDate?: SortOrder
    issuePlace?: SortOrder
    hometown?: SortOrder
    idAddress?: SortOrder
    education?: SortOrder
    drivingLicense?: SortOrder
    toyotaCertificate?: SortOrder
    taxCode?: SortOrder
    insuranceNumber?: SortOrder
    insuranceSalary?: SortOrder
    employeeId?: SortOrder
  }

  export type PersonalInfoMinOrderByAggregateInput = {
    id?: SortOrder
    identityNumber?: SortOrder
    issueDate?: SortOrder
    issuePlace?: SortOrder
    hometown?: SortOrder
    idAddress?: SortOrder
    education?: SortOrder
    drivingLicense?: SortOrder
    toyotaCertificate?: SortOrder
    taxCode?: SortOrder
    insuranceNumber?: SortOrder
    insuranceSalary?: SortOrder
    employeeId?: SortOrder
  }

  export type PersonalInfoSumOrderByAggregateInput = {
    id?: SortOrder
    insuranceSalary?: SortOrder
    employeeId?: SortOrder
  }

  export type ContactInfoCountOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    relativePhone?: SortOrder
    companyPhone?: SortOrder
    email?: SortOrder
    employeeId?: SortOrder
  }

  export type ContactInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type ContactInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    relativePhone?: SortOrder
    companyPhone?: SortOrder
    email?: SortOrder
    employeeId?: SortOrder
  }

  export type ContactInfoMinOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    relativePhone?: SortOrder
    companyPhone?: SortOrder
    email?: SortOrder
    employeeId?: SortOrder
  }

  export type ContactInfoSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type EnumWorkStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkStatus | EnumWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkStatusFilter<$PrismaModel> | $Enums.WorkStatus
  }

  export type OtherInfoCountOrderByAggregateInput = {
    id?: SortOrder
    workStatus?: SortOrder
    resignedDate?: SortOrder
    documentsChecked?: SortOrder
    updatedAt?: SortOrder
    VCB?: SortOrder
    MTCV?: SortOrder
    PNJ?: SortOrder
    employeeId?: SortOrder
  }

  export type OtherInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type OtherInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    workStatus?: SortOrder
    resignedDate?: SortOrder
    documentsChecked?: SortOrder
    updatedAt?: SortOrder
    VCB?: SortOrder
    MTCV?: SortOrder
    PNJ?: SortOrder
    employeeId?: SortOrder
  }

  export type OtherInfoMinOrderByAggregateInput = {
    id?: SortOrder
    workStatus?: SortOrder
    resignedDate?: SortOrder
    documentsChecked?: SortOrder
    updatedAt?: SortOrder
    VCB?: SortOrder
    MTCV?: SortOrder
    PNJ?: SortOrder
    employeeId?: SortOrder
  }

  export type OtherInfoSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type EnumWorkStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkStatus | EnumWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkStatusFilter<$PrismaModel>
  }

  export type EnumLeaveTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveTypeEnum | EnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveTypeEnum[] | ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeaveTypeEnum[] | ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumLeaveTypeEnumFilter<$PrismaModel> | $Enums.LeaveTypeEnum
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumLeaveStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveStatus | EnumLeaveStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveStatus[] | ListEnumLeaveStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeaveStatus[] | ListEnumLeaveStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLeaveStatusFilter<$PrismaModel> | $Enums.LeaveStatus
  }

  export type LeaveApprovalStepListRelationFilter = {
    every?: LeaveApprovalStepWhereInput
    some?: LeaveApprovalStepWhereInput
    none?: LeaveApprovalStepWhereInput
  }

  export type LeaveApprovalStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveRequestCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalHours?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaveRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    totalHours?: SortOrder
  }

  export type LeaveRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalHours?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaveRequestMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    totalHours?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type LeaveRequestSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    totalHours?: SortOrder
  }

  export type EnumLeaveTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveTypeEnum | EnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveTypeEnum[] | ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeaveTypeEnum[] | ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumLeaveTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.LeaveTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeaveTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumLeaveTypeEnumFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumLeaveStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveStatus | EnumLeaveStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveStatus[] | ListEnumLeaveStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeaveStatus[] | ListEnumLeaveStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLeaveStatusWithAggregatesFilter<$PrismaModel> | $Enums.LeaveStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeaveStatusFilter<$PrismaModel>
    _max?: NestedEnumLeaveStatusFilter<$PrismaModel>
  }

  export type LeaveRequestScalarRelationFilter = {
    is?: LeaveRequestWhereInput
    isNot?: LeaveRequestWhereInput
  }

  export type LeaveApprovalStepLeaveRequestIdLevelCompoundUniqueInput = {
    leaveRequestId: number
    level: number
  }

  export type LeaveApprovalStepCountOrderByAggregateInput = {
    id?: SortOrder
    leaveRequestId?: SortOrder
    level?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrder
  }

  export type LeaveApprovalStepAvgOrderByAggregateInput = {
    id?: SortOrder
    leaveRequestId?: SortOrder
    level?: SortOrder
  }

  export type LeaveApprovalStepMaxOrderByAggregateInput = {
    id?: SortOrder
    leaveRequestId?: SortOrder
    level?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrder
  }

  export type LeaveApprovalStepMinOrderByAggregateInput = {
    id?: SortOrder
    leaveRequestId?: SortOrder
    level?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrder
  }

  export type LeaveApprovalStepSumOrderByAggregateInput = {
    id?: SortOrder
    leaveRequestId?: SortOrder
    level?: SortOrder
  }

  export type LeaveApprovalStepScalarRelationFilter = {
    is?: LeaveApprovalStepWhereInput
    isNot?: LeaveApprovalStepWhereInput
  }

  export type LeaveApprovalStepApproverLeaveApprovalStepIdApproverIdCompoundUniqueInput = {
    leaveApprovalStepId: number
    approverId: number
  }

  export type LeaveApprovalStepApproverCountOrderByAggregateInput = {
    id?: SortOrder
    leaveApprovalStepId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrder
  }

  export type LeaveApprovalStepApproverAvgOrderByAggregateInput = {
    id?: SortOrder
    leaveApprovalStepId?: SortOrder
    approverId?: SortOrder
  }

  export type LeaveApprovalStepApproverMaxOrderByAggregateInput = {
    id?: SortOrder
    leaveApprovalStepId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrder
  }

  export type LeaveApprovalStepApproverMinOrderByAggregateInput = {
    id?: SortOrder
    leaveApprovalStepId?: SortOrder
    approverId?: SortOrder
    status?: SortOrder
    approvedAt?: SortOrder
  }

  export type LeaveApprovalStepApproverSumOrderByAggregateInput = {
    id?: SortOrder
    leaveApprovalStepId?: SortOrder
    approverId?: SortOrder
  }

  export type AttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
  }

  export type AttendanceAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type AttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
  }

  export type AttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    checkInTime?: SortOrder
    checkOutTime?: SortOrder
  }

  export type AttendanceSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type KPICountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPIAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KPIMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPIMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    period?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPISumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KPIScalarRelationFilter = {
    is?: KPIWhereInput
    isNot?: KPIWhereInput
  }

  export type KPIEntryListRelationFilter = {
    every?: KPIEntryWhereInput
    some?: KPIEntryWhereInput
    none?: KPIEntryWhereInput
  }

  export type KPIEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KPIEmployeeKpiIdEmployeeIdCompoundUniqueInput = {
    kpiId: number
    employeeId: number
  }

  export type KPIEmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    kpiId?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPIEmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    kpiId?: SortOrder
    employeeId?: SortOrder
  }

  export type KPIEmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    kpiId?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPIEmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    kpiId?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPIEmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    kpiId?: SortOrder
    employeeId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type KPIEmployeeScalarRelationFilter = {
    is?: KPIEmployeeWhereInput
    isNot?: KPIEmployeeWhereInput
  }

  export type KPIEntryKpiEmployeeIdNameCompoundUniqueInput = {
    kpiEmployeeId: number
    name: string
  }

  export type KPIEntryCountOrderByAggregateInput = {
    id?: SortOrder
    kpiEmployeeId?: SortOrder
    name?: SortOrder
    targetValue?: SortOrder
    achievedValue?: SortOrder
    isAchieved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPIEntryAvgOrderByAggregateInput = {
    id?: SortOrder
    kpiEmployeeId?: SortOrder
    targetValue?: SortOrder
    achievedValue?: SortOrder
  }

  export type KPIEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    kpiEmployeeId?: SortOrder
    name?: SortOrder
    targetValue?: SortOrder
    achievedValue?: SortOrder
    isAchieved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPIEntryMinOrderByAggregateInput = {
    id?: SortOrder
    kpiEmployeeId?: SortOrder
    name?: SortOrder
    targetValue?: SortOrder
    achievedValue?: SortOrder
    isAchieved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KPIEntrySumOrderByAggregateInput = {
    id?: SortOrder
    kpiEmployeeId?: SortOrder
    targetValue?: SortOrder
    achievedValue?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EmployeeCreateNestedOneWithoutSubordinatesInput = {
    create?: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSubordinatesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutManagerInput = {
    create?: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput> | EmployeeCreateWithoutManagerInput[] | EmployeeUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutManagerInput | EmployeeCreateOrConnectWithoutManagerInput[]
    createMany?: EmployeeCreateManyManagerInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type DepartmentCreateNestedOneWithoutHeadInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutDirectorInput = {
    create?: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDirectorInput
    connect?: DepartmentWhereUniqueInput
  }

  export type WorkInfoCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<WorkInfoCreateWithoutEmployeeInput, WorkInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: WorkInfoCreateOrConnectWithoutEmployeeInput
    connect?: WorkInfoWhereUniqueInput
  }

  export type PersonalInfoCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<PersonalInfoCreateWithoutEmployeeInput, PersonalInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: PersonalInfoCreateOrConnectWithoutEmployeeInput
    connect?: PersonalInfoWhereUniqueInput
  }

  export type ContactInfoCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<ContactInfoCreateWithoutEmployeeInput, ContactInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: ContactInfoCreateOrConnectWithoutEmployeeInput
    connect?: ContactInfoWhereUniqueInput
  }

  export type OtherInfoCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<OtherInfoCreateWithoutEmployeeInput, OtherInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: OtherInfoCreateOrConnectWithoutEmployeeInput
    connect?: OtherInfoWhereUniqueInput
  }

  export type LeaveRequestCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput> | LeaveRequestCreateWithoutEmployeeInput[] | LeaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutEmployeeInput | LeaveRequestCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveRequestCreateManyEmployeeInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput = {
    create?: XOR<LeaveApprovalStepApproverCreateWithoutApproverInput, LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput> | LeaveApprovalStepApproverCreateWithoutApproverInput[] | LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput | LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput[]
    createMany?: LeaveApprovalStepApproverCreateManyApproverInputEnvelope
    connect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
  }

  export type AttendanceCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<AttendanceCreateWithoutEmployeeInput, AttendanceUncheckedCreateWithoutEmployeeInput> | AttendanceCreateWithoutEmployeeInput[] | AttendanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutEmployeeInput | AttendanceCreateOrConnectWithoutEmployeeInput[]
    createMany?: AttendanceCreateManyEmployeeInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type KPIEmployeeCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<KPIEmployeeCreateWithoutEmployeeInput, KPIEmployeeUncheckedCreateWithoutEmployeeInput> | KPIEmployeeCreateWithoutEmployeeInput[] | KPIEmployeeUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutEmployeeInput | KPIEmployeeCreateOrConnectWithoutEmployeeInput[]
    createMany?: KPIEmployeeCreateManyEmployeeInputEnvelope
    connect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutManagerInput = {
    create?: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput> | EmployeeCreateWithoutManagerInput[] | EmployeeUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutManagerInput | EmployeeCreateOrConnectWithoutManagerInput[]
    createMany?: EmployeeCreateManyManagerInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedOneWithoutHeadInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentUncheckedCreateNestedOneWithoutDirectorInput = {
    create?: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDirectorInput
    connect?: DepartmentWhereUniqueInput
  }

  export type WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<WorkInfoCreateWithoutEmployeeInput, WorkInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: WorkInfoCreateOrConnectWithoutEmployeeInput
    connect?: WorkInfoWhereUniqueInput
  }

  export type PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<PersonalInfoCreateWithoutEmployeeInput, PersonalInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: PersonalInfoCreateOrConnectWithoutEmployeeInput
    connect?: PersonalInfoWhereUniqueInput
  }

  export type ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<ContactInfoCreateWithoutEmployeeInput, ContactInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: ContactInfoCreateOrConnectWithoutEmployeeInput
    connect?: ContactInfoWhereUniqueInput
  }

  export type OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<OtherInfoCreateWithoutEmployeeInput, OtherInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: OtherInfoCreateOrConnectWithoutEmployeeInput
    connect?: OtherInfoWhereUniqueInput
  }

  export type LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput> | LeaveRequestCreateWithoutEmployeeInput[] | LeaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutEmployeeInput | LeaveRequestCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveRequestCreateManyEmployeeInputEnvelope
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
  }

  export type LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<LeaveApprovalStepApproverCreateWithoutApproverInput, LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput> | LeaveApprovalStepApproverCreateWithoutApproverInput[] | LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput | LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput[]
    createMany?: LeaveApprovalStepApproverCreateManyApproverInputEnvelope
    connect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<AttendanceCreateWithoutEmployeeInput, AttendanceUncheckedCreateWithoutEmployeeInput> | AttendanceCreateWithoutEmployeeInput[] | AttendanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutEmployeeInput | AttendanceCreateOrConnectWithoutEmployeeInput[]
    createMany?: AttendanceCreateManyEmployeeInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<KPIEmployeeCreateWithoutEmployeeInput, KPIEmployeeUncheckedCreateWithoutEmployeeInput> | KPIEmployeeCreateWithoutEmployeeInput[] | KPIEmployeeUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutEmployeeInput | KPIEmployeeCreateOrConnectWithoutEmployeeInput[]
    createMany?: KPIEmployeeCreateManyEmployeeInputEnvelope
    connect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumSexFieldUpdateOperationsInput = {
    set?: $Enums.Sex
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EmployeeUpdateOneWithoutSubordinatesNestedInput = {
    create?: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSubordinatesInput
    upsert?: EmployeeUpsertWithoutSubordinatesInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutSubordinatesInput, EmployeeUpdateWithoutSubordinatesInput>, EmployeeUncheckedUpdateWithoutSubordinatesInput>
  }

  export type EmployeeUpdateManyWithoutManagerNestedInput = {
    create?: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput> | EmployeeCreateWithoutManagerInput[] | EmployeeUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutManagerInput | EmployeeCreateOrConnectWithoutManagerInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutManagerInput | EmployeeUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: EmployeeCreateManyManagerInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutManagerInput | EmployeeUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutManagerInput | EmployeeUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type DepartmentUpdateOneWithoutHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    upsert?: DepartmentUpsertWithoutHeadInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutHeadInput, DepartmentUpdateWithoutHeadInput>, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DepartmentUpdateOneWithoutDirectorNestedInput = {
    create?: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDirectorInput
    upsert?: DepartmentUpsertWithoutDirectorInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutDirectorInput, DepartmentUpdateWithoutDirectorInput>, DepartmentUncheckedUpdateWithoutDirectorInput>
  }

  export type WorkInfoUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<WorkInfoCreateWithoutEmployeeInput, WorkInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: WorkInfoCreateOrConnectWithoutEmployeeInput
    upsert?: WorkInfoUpsertWithoutEmployeeInput
    disconnect?: WorkInfoWhereInput | boolean
    delete?: WorkInfoWhereInput | boolean
    connect?: WorkInfoWhereUniqueInput
    update?: XOR<XOR<WorkInfoUpdateToOneWithWhereWithoutEmployeeInput, WorkInfoUpdateWithoutEmployeeInput>, WorkInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type PersonalInfoUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<PersonalInfoCreateWithoutEmployeeInput, PersonalInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: PersonalInfoCreateOrConnectWithoutEmployeeInput
    upsert?: PersonalInfoUpsertWithoutEmployeeInput
    disconnect?: PersonalInfoWhereInput | boolean
    delete?: PersonalInfoWhereInput | boolean
    connect?: PersonalInfoWhereUniqueInput
    update?: XOR<XOR<PersonalInfoUpdateToOneWithWhereWithoutEmployeeInput, PersonalInfoUpdateWithoutEmployeeInput>, PersonalInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type ContactInfoUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<ContactInfoCreateWithoutEmployeeInput, ContactInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: ContactInfoCreateOrConnectWithoutEmployeeInput
    upsert?: ContactInfoUpsertWithoutEmployeeInput
    disconnect?: ContactInfoWhereInput | boolean
    delete?: ContactInfoWhereInput | boolean
    connect?: ContactInfoWhereUniqueInput
    update?: XOR<XOR<ContactInfoUpdateToOneWithWhereWithoutEmployeeInput, ContactInfoUpdateWithoutEmployeeInput>, ContactInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type OtherInfoUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<OtherInfoCreateWithoutEmployeeInput, OtherInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: OtherInfoCreateOrConnectWithoutEmployeeInput
    upsert?: OtherInfoUpsertWithoutEmployeeInput
    disconnect?: OtherInfoWhereInput | boolean
    delete?: OtherInfoWhereInput | boolean
    connect?: OtherInfoWhereUniqueInput
    update?: XOR<XOR<OtherInfoUpdateToOneWithWhereWithoutEmployeeInput, OtherInfoUpdateWithoutEmployeeInput>, OtherInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveRequestUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput> | LeaveRequestCreateWithoutEmployeeInput[] | LeaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutEmployeeInput | LeaveRequestCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput | LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveRequestCreateManyEmployeeInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput | LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutEmployeeInput | LeaveRequestUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput = {
    create?: XOR<LeaveApprovalStepApproverCreateWithoutApproverInput, LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput> | LeaveApprovalStepApproverCreateWithoutApproverInput[] | LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput | LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput[]
    upsert?: LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutApproverInput | LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: LeaveApprovalStepApproverCreateManyApproverInputEnvelope
    set?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    disconnect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    delete?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    connect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    update?: LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutApproverInput | LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: LeaveApprovalStepApproverUpdateManyWithWhereWithoutApproverInput | LeaveApprovalStepApproverUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: LeaveApprovalStepApproverScalarWhereInput | LeaveApprovalStepApproverScalarWhereInput[]
  }

  export type AttendanceUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<AttendanceCreateWithoutEmployeeInput, AttendanceUncheckedCreateWithoutEmployeeInput> | AttendanceCreateWithoutEmployeeInput[] | AttendanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutEmployeeInput | AttendanceCreateOrConnectWithoutEmployeeInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutEmployeeInput | AttendanceUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: AttendanceCreateManyEmployeeInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutEmployeeInput | AttendanceUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutEmployeeInput | AttendanceUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type KPIEmployeeUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<KPIEmployeeCreateWithoutEmployeeInput, KPIEmployeeUncheckedCreateWithoutEmployeeInput> | KPIEmployeeCreateWithoutEmployeeInput[] | KPIEmployeeUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutEmployeeInput | KPIEmployeeCreateOrConnectWithoutEmployeeInput[]
    upsert?: KPIEmployeeUpsertWithWhereUniqueWithoutEmployeeInput | KPIEmployeeUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: KPIEmployeeCreateManyEmployeeInputEnvelope
    set?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    disconnect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    delete?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    connect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    update?: KPIEmployeeUpdateWithWhereUniqueWithoutEmployeeInput | KPIEmployeeUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: KPIEmployeeUpdateManyWithWhereWithoutEmployeeInput | KPIEmployeeUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: KPIEmployeeScalarWhereInput | KPIEmployeeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EmployeeUncheckedUpdateManyWithoutManagerNestedInput = {
    create?: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput> | EmployeeCreateWithoutManagerInput[] | EmployeeUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutManagerInput | EmployeeCreateOrConnectWithoutManagerInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutManagerInput | EmployeeUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: EmployeeCreateManyManagerInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutManagerInput | EmployeeUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutManagerInput | EmployeeUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateOneWithoutHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutHeadInput
    upsert?: DepartmentUpsertWithoutHeadInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutHeadInput, DepartmentUpdateWithoutHeadInput>, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DepartmentUncheckedUpdateOneWithoutDirectorNestedInput = {
    create?: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutDirectorInput
    upsert?: DepartmentUpsertWithoutDirectorInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutDirectorInput, DepartmentUpdateWithoutDirectorInput>, DepartmentUncheckedUpdateWithoutDirectorInput>
  }

  export type WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<WorkInfoCreateWithoutEmployeeInput, WorkInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: WorkInfoCreateOrConnectWithoutEmployeeInput
    upsert?: WorkInfoUpsertWithoutEmployeeInput
    disconnect?: WorkInfoWhereInput | boolean
    delete?: WorkInfoWhereInput | boolean
    connect?: WorkInfoWhereUniqueInput
    update?: XOR<XOR<WorkInfoUpdateToOneWithWhereWithoutEmployeeInput, WorkInfoUpdateWithoutEmployeeInput>, WorkInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<PersonalInfoCreateWithoutEmployeeInput, PersonalInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: PersonalInfoCreateOrConnectWithoutEmployeeInput
    upsert?: PersonalInfoUpsertWithoutEmployeeInput
    disconnect?: PersonalInfoWhereInput | boolean
    delete?: PersonalInfoWhereInput | boolean
    connect?: PersonalInfoWhereUniqueInput
    update?: XOR<XOR<PersonalInfoUpdateToOneWithWhereWithoutEmployeeInput, PersonalInfoUpdateWithoutEmployeeInput>, PersonalInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<ContactInfoCreateWithoutEmployeeInput, ContactInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: ContactInfoCreateOrConnectWithoutEmployeeInput
    upsert?: ContactInfoUpsertWithoutEmployeeInput
    disconnect?: ContactInfoWhereInput | boolean
    delete?: ContactInfoWhereInput | boolean
    connect?: ContactInfoWhereUniqueInput
    update?: XOR<XOR<ContactInfoUpdateToOneWithWhereWithoutEmployeeInput, ContactInfoUpdateWithoutEmployeeInput>, ContactInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<OtherInfoCreateWithoutEmployeeInput, OtherInfoUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: OtherInfoCreateOrConnectWithoutEmployeeInput
    upsert?: OtherInfoUpsertWithoutEmployeeInput
    disconnect?: OtherInfoWhereInput | boolean
    delete?: OtherInfoWhereInput | boolean
    connect?: OtherInfoWhereUniqueInput
    update?: XOR<XOR<OtherInfoUpdateToOneWithWhereWithoutEmployeeInput, OtherInfoUpdateWithoutEmployeeInput>, OtherInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput> | LeaveRequestCreateWithoutEmployeeInput[] | LeaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutEmployeeInput | LeaveRequestCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput | LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveRequestCreateManyEmployeeInputEnvelope
    set?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    disconnect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    delete?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    connect?: LeaveRequestWhereUniqueInput | LeaveRequestWhereUniqueInput[]
    update?: LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput | LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveRequestUpdateManyWithWhereWithoutEmployeeInput | LeaveRequestUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
  }

  export type LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<LeaveApprovalStepApproverCreateWithoutApproverInput, LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput> | LeaveApprovalStepApproverCreateWithoutApproverInput[] | LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput | LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput[]
    upsert?: LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutApproverInput | LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: LeaveApprovalStepApproverCreateManyApproverInputEnvelope
    set?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    disconnect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    delete?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    connect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    update?: LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutApproverInput | LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: LeaveApprovalStepApproverUpdateManyWithWhereWithoutApproverInput | LeaveApprovalStepApproverUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: LeaveApprovalStepApproverScalarWhereInput | LeaveApprovalStepApproverScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<AttendanceCreateWithoutEmployeeInput, AttendanceUncheckedCreateWithoutEmployeeInput> | AttendanceCreateWithoutEmployeeInput[] | AttendanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutEmployeeInput | AttendanceCreateOrConnectWithoutEmployeeInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutEmployeeInput | AttendanceUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: AttendanceCreateManyEmployeeInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutEmployeeInput | AttendanceUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutEmployeeInput | AttendanceUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<KPIEmployeeCreateWithoutEmployeeInput, KPIEmployeeUncheckedCreateWithoutEmployeeInput> | KPIEmployeeCreateWithoutEmployeeInput[] | KPIEmployeeUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutEmployeeInput | KPIEmployeeCreateOrConnectWithoutEmployeeInput[]
    upsert?: KPIEmployeeUpsertWithWhereUniqueWithoutEmployeeInput | KPIEmployeeUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: KPIEmployeeCreateManyEmployeeInputEnvelope
    set?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    disconnect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    delete?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    connect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    update?: KPIEmployeeUpdateWithWhereUniqueWithoutEmployeeInput | KPIEmployeeUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: KPIEmployeeUpdateManyWithWhereWithoutEmployeeInput | KPIEmployeeUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: KPIEmployeeScalarWhereInput | KPIEmployeeScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutDepartmentHeadOfInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentHeadOfInput, EmployeeUncheckedCreateWithoutDepartmentHeadOfInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentHeadOfInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDepartmentDirectorOfInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentDirectorOfInput, EmployeeUncheckedCreateWithoutDepartmentDirectorOfInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentDirectorOfInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PositionCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<PositionCreateWithoutDepartmentInput, PositionUncheckedCreateWithoutDepartmentInput> | PositionCreateWithoutDepartmentInput[] | PositionUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutDepartmentInput | PositionCreateOrConnectWithoutDepartmentInput[]
    createMany?: PositionCreateManyDepartmentInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type WorkInfoCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<WorkInfoCreateWithoutDepartmentInput, WorkInfoUncheckedCreateWithoutDepartmentInput> | WorkInfoCreateWithoutDepartmentInput[] | WorkInfoUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: WorkInfoCreateOrConnectWithoutDepartmentInput | WorkInfoCreateOrConnectWithoutDepartmentInput[]
    createMany?: WorkInfoCreateManyDepartmentInputEnvelope
    connect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
  }

  export type PositionUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<PositionCreateWithoutDepartmentInput, PositionUncheckedCreateWithoutDepartmentInput> | PositionCreateWithoutDepartmentInput[] | PositionUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutDepartmentInput | PositionCreateOrConnectWithoutDepartmentInput[]
    createMany?: PositionCreateManyDepartmentInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type WorkInfoUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<WorkInfoCreateWithoutDepartmentInput, WorkInfoUncheckedCreateWithoutDepartmentInput> | WorkInfoCreateWithoutDepartmentInput[] | WorkInfoUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: WorkInfoCreateOrConnectWithoutDepartmentInput | WorkInfoCreateOrConnectWithoutDepartmentInput[]
    createMany?: WorkInfoCreateManyDepartmentInputEnvelope
    connect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EmployeeUpdateOneWithoutDepartmentHeadOfNestedInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentHeadOfInput, EmployeeUncheckedCreateWithoutDepartmentHeadOfInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentHeadOfInput
    upsert?: EmployeeUpsertWithoutDepartmentHeadOfInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDepartmentHeadOfInput, EmployeeUpdateWithoutDepartmentHeadOfInput>, EmployeeUncheckedUpdateWithoutDepartmentHeadOfInput>
  }

  export type EmployeeUpdateOneWithoutDepartmentDirectorOfNestedInput = {
    create?: XOR<EmployeeCreateWithoutDepartmentDirectorOfInput, EmployeeUncheckedCreateWithoutDepartmentDirectorOfInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDepartmentDirectorOfInput
    upsert?: EmployeeUpsertWithoutDepartmentDirectorOfInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDepartmentDirectorOfInput, EmployeeUpdateWithoutDepartmentDirectorOfInput>, EmployeeUncheckedUpdateWithoutDepartmentDirectorOfInput>
  }

  export type PositionUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<PositionCreateWithoutDepartmentInput, PositionUncheckedCreateWithoutDepartmentInput> | PositionCreateWithoutDepartmentInput[] | PositionUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutDepartmentInput | PositionCreateOrConnectWithoutDepartmentInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutDepartmentInput | PositionUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: PositionCreateManyDepartmentInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutDepartmentInput | PositionUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutDepartmentInput | PositionUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type WorkInfoUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<WorkInfoCreateWithoutDepartmentInput, WorkInfoUncheckedCreateWithoutDepartmentInput> | WorkInfoCreateWithoutDepartmentInput[] | WorkInfoUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: WorkInfoCreateOrConnectWithoutDepartmentInput | WorkInfoCreateOrConnectWithoutDepartmentInput[]
    upsert?: WorkInfoUpsertWithWhereUniqueWithoutDepartmentInput | WorkInfoUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: WorkInfoCreateManyDepartmentInputEnvelope
    set?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    disconnect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    delete?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    connect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    update?: WorkInfoUpdateWithWhereUniqueWithoutDepartmentInput | WorkInfoUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: WorkInfoUpdateManyWithWhereWithoutDepartmentInput | WorkInfoUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: WorkInfoScalarWhereInput | WorkInfoScalarWhereInput[]
  }

  export type PositionUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<PositionCreateWithoutDepartmentInput, PositionUncheckedCreateWithoutDepartmentInput> | PositionCreateWithoutDepartmentInput[] | PositionUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutDepartmentInput | PositionCreateOrConnectWithoutDepartmentInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutDepartmentInput | PositionUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: PositionCreateManyDepartmentInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutDepartmentInput | PositionUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutDepartmentInput | PositionUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type WorkInfoUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<WorkInfoCreateWithoutDepartmentInput, WorkInfoUncheckedCreateWithoutDepartmentInput> | WorkInfoCreateWithoutDepartmentInput[] | WorkInfoUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: WorkInfoCreateOrConnectWithoutDepartmentInput | WorkInfoCreateOrConnectWithoutDepartmentInput[]
    upsert?: WorkInfoUpsertWithWhereUniqueWithoutDepartmentInput | WorkInfoUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: WorkInfoCreateManyDepartmentInputEnvelope
    set?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    disconnect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    delete?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    connect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    update?: WorkInfoUpdateWithWhereUniqueWithoutDepartmentInput | WorkInfoUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: WorkInfoUpdateManyWithWhereWithoutDepartmentInput | WorkInfoUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: WorkInfoScalarWhereInput | WorkInfoScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutPositionsInput = {
    create?: XOR<DepartmentCreateWithoutPositionsInput, DepartmentUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutPositionsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type WorkInfoCreateNestedManyWithoutPositionInput = {
    create?: XOR<WorkInfoCreateWithoutPositionInput, WorkInfoUncheckedCreateWithoutPositionInput> | WorkInfoCreateWithoutPositionInput[] | WorkInfoUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: WorkInfoCreateOrConnectWithoutPositionInput | WorkInfoCreateOrConnectWithoutPositionInput[]
    createMany?: WorkInfoCreateManyPositionInputEnvelope
    connect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
  }

  export type WorkInfoUncheckedCreateNestedManyWithoutPositionInput = {
    create?: XOR<WorkInfoCreateWithoutPositionInput, WorkInfoUncheckedCreateWithoutPositionInput> | WorkInfoCreateWithoutPositionInput[] | WorkInfoUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: WorkInfoCreateOrConnectWithoutPositionInput | WorkInfoCreateOrConnectWithoutPositionInput[]
    createMany?: WorkInfoCreateManyPositionInputEnvelope
    connect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
  }

  export type DepartmentUpdateOneRequiredWithoutPositionsNestedInput = {
    create?: XOR<DepartmentCreateWithoutPositionsInput, DepartmentUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutPositionsInput
    upsert?: DepartmentUpsertWithoutPositionsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutPositionsInput, DepartmentUpdateWithoutPositionsInput>, DepartmentUncheckedUpdateWithoutPositionsInput>
  }

  export type WorkInfoUpdateManyWithoutPositionNestedInput = {
    create?: XOR<WorkInfoCreateWithoutPositionInput, WorkInfoUncheckedCreateWithoutPositionInput> | WorkInfoCreateWithoutPositionInput[] | WorkInfoUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: WorkInfoCreateOrConnectWithoutPositionInput | WorkInfoCreateOrConnectWithoutPositionInput[]
    upsert?: WorkInfoUpsertWithWhereUniqueWithoutPositionInput | WorkInfoUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: WorkInfoCreateManyPositionInputEnvelope
    set?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    disconnect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    delete?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    connect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    update?: WorkInfoUpdateWithWhereUniqueWithoutPositionInput | WorkInfoUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: WorkInfoUpdateManyWithWhereWithoutPositionInput | WorkInfoUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: WorkInfoScalarWhereInput | WorkInfoScalarWhereInput[]
  }

  export type WorkInfoUncheckedUpdateManyWithoutPositionNestedInput = {
    create?: XOR<WorkInfoCreateWithoutPositionInput, WorkInfoUncheckedCreateWithoutPositionInput> | WorkInfoCreateWithoutPositionInput[] | WorkInfoUncheckedCreateWithoutPositionInput[]
    connectOrCreate?: WorkInfoCreateOrConnectWithoutPositionInput | WorkInfoCreateOrConnectWithoutPositionInput[]
    upsert?: WorkInfoUpsertWithWhereUniqueWithoutPositionInput | WorkInfoUpsertWithWhereUniqueWithoutPositionInput[]
    createMany?: WorkInfoCreateManyPositionInputEnvelope
    set?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    disconnect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    delete?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    connect?: WorkInfoWhereUniqueInput | WorkInfoWhereUniqueInput[]
    update?: WorkInfoUpdateWithWhereUniqueWithoutPositionInput | WorkInfoUpdateWithWhereUniqueWithoutPositionInput[]
    updateMany?: WorkInfoUpdateManyWithWhereWithoutPositionInput | WorkInfoUpdateManyWithWhereWithoutPositionInput[]
    deleteMany?: WorkInfoScalarWhereInput | WorkInfoScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutWorkInfosInput = {
    create?: XOR<DepartmentCreateWithoutWorkInfosInput, DepartmentUncheckedCreateWithoutWorkInfosInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutWorkInfosInput
    connect?: DepartmentWhereUniqueInput
  }

  export type PositionCreateNestedOneWithoutEmployeesInput = {
    create?: XOR<PositionCreateWithoutEmployeesInput, PositionUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: PositionCreateOrConnectWithoutEmployeesInput
    connect?: PositionWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutWorkInfoInput = {
    create?: XOR<EmployeeCreateWithoutWorkInfoInput, EmployeeUncheckedCreateWithoutWorkInfoInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutWorkInfoInput
    connect?: EmployeeWhereUniqueInput
  }

  export type DepartmentUpdateOneWithoutWorkInfosNestedInput = {
    create?: XOR<DepartmentCreateWithoutWorkInfosInput, DepartmentUncheckedCreateWithoutWorkInfosInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutWorkInfosInput
    upsert?: DepartmentUpsertWithoutWorkInfosInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutWorkInfosInput, DepartmentUpdateWithoutWorkInfosInput>, DepartmentUncheckedUpdateWithoutWorkInfosInput>
  }

  export type PositionUpdateOneWithoutEmployeesNestedInput = {
    create?: XOR<PositionCreateWithoutEmployeesInput, PositionUncheckedCreateWithoutEmployeesInput>
    connectOrCreate?: PositionCreateOrConnectWithoutEmployeesInput
    upsert?: PositionUpsertWithoutEmployeesInput
    disconnect?: PositionWhereInput | boolean
    delete?: PositionWhereInput | boolean
    connect?: PositionWhereUniqueInput
    update?: XOR<XOR<PositionUpdateToOneWithWhereWithoutEmployeesInput, PositionUpdateWithoutEmployeesInput>, PositionUncheckedUpdateWithoutEmployeesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutWorkInfoNestedInput = {
    create?: XOR<EmployeeCreateWithoutWorkInfoInput, EmployeeUncheckedCreateWithoutWorkInfoInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutWorkInfoInput
    upsert?: EmployeeUpsertWithoutWorkInfoInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutWorkInfoInput, EmployeeUpdateWithoutWorkInfoInput>, EmployeeUncheckedUpdateWithoutWorkInfoInput>
  }

  export type EmployeeCreateNestedOneWithoutPersonalInfoInput = {
    create?: XOR<EmployeeCreateWithoutPersonalInfoInput, EmployeeUncheckedCreateWithoutPersonalInfoInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPersonalInfoInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutPersonalInfoNestedInput = {
    create?: XOR<EmployeeCreateWithoutPersonalInfoInput, EmployeeUncheckedCreateWithoutPersonalInfoInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPersonalInfoInput
    upsert?: EmployeeUpsertWithoutPersonalInfoInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPersonalInfoInput, EmployeeUpdateWithoutPersonalInfoInput>, EmployeeUncheckedUpdateWithoutPersonalInfoInput>
  }

  export type EmployeeCreateNestedOneWithoutContactInfoInput = {
    create?: XOR<EmployeeCreateWithoutContactInfoInput, EmployeeUncheckedCreateWithoutContactInfoInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutContactInfoInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutContactInfoNestedInput = {
    create?: XOR<EmployeeCreateWithoutContactInfoInput, EmployeeUncheckedCreateWithoutContactInfoInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutContactInfoInput
    upsert?: EmployeeUpsertWithoutContactInfoInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutContactInfoInput, EmployeeUpdateWithoutContactInfoInput>, EmployeeUncheckedUpdateWithoutContactInfoInput>
  }

  export type EmployeeCreateNestedOneWithoutOtherInfoInput = {
    create?: XOR<EmployeeCreateWithoutOtherInfoInput, EmployeeUncheckedCreateWithoutOtherInfoInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutOtherInfoInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EnumWorkStatusFieldUpdateOperationsInput = {
    set?: $Enums.WorkStatus
  }

  export type EmployeeUpdateOneRequiredWithoutOtherInfoNestedInput = {
    create?: XOR<EmployeeCreateWithoutOtherInfoInput, EmployeeUncheckedCreateWithoutOtherInfoInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutOtherInfoInput
    upsert?: EmployeeUpsertWithoutOtherInfoInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutOtherInfoInput, EmployeeUpdateWithoutOtherInfoInput>, EmployeeUncheckedUpdateWithoutOtherInfoInput>
  }

  export type EmployeeCreateNestedOneWithoutLeaveRequestInput = {
    create?: XOR<EmployeeCreateWithoutLeaveRequestInput, EmployeeUncheckedCreateWithoutLeaveRequestInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeaveRequestInput
    connect?: EmployeeWhereUniqueInput
  }

  export type LeaveApprovalStepCreateNestedManyWithoutLeaveRequestInput = {
    create?: XOR<LeaveApprovalStepCreateWithoutLeaveRequestInput, LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput> | LeaveApprovalStepCreateWithoutLeaveRequestInput[] | LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput[]
    connectOrCreate?: LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput | LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput[]
    createMany?: LeaveApprovalStepCreateManyLeaveRequestInputEnvelope
    connect?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
  }

  export type LeaveApprovalStepUncheckedCreateNestedManyWithoutLeaveRequestInput = {
    create?: XOR<LeaveApprovalStepCreateWithoutLeaveRequestInput, LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput> | LeaveApprovalStepCreateWithoutLeaveRequestInput[] | LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput[]
    connectOrCreate?: LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput | LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput[]
    createMany?: LeaveApprovalStepCreateManyLeaveRequestInputEnvelope
    connect?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
  }

  export type EnumLeaveTypeEnumFieldUpdateOperationsInput = {
    set?: $Enums.LeaveTypeEnum
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumLeaveStatusFieldUpdateOperationsInput = {
    set?: $Enums.LeaveStatus
  }

  export type EmployeeUpdateOneRequiredWithoutLeaveRequestNestedInput = {
    create?: XOR<EmployeeCreateWithoutLeaveRequestInput, EmployeeUncheckedCreateWithoutLeaveRequestInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeaveRequestInput
    upsert?: EmployeeUpsertWithoutLeaveRequestInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutLeaveRequestInput, EmployeeUpdateWithoutLeaveRequestInput>, EmployeeUncheckedUpdateWithoutLeaveRequestInput>
  }

  export type LeaveApprovalStepUpdateManyWithoutLeaveRequestNestedInput = {
    create?: XOR<LeaveApprovalStepCreateWithoutLeaveRequestInput, LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput> | LeaveApprovalStepCreateWithoutLeaveRequestInput[] | LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput[]
    connectOrCreate?: LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput | LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput[]
    upsert?: LeaveApprovalStepUpsertWithWhereUniqueWithoutLeaveRequestInput | LeaveApprovalStepUpsertWithWhereUniqueWithoutLeaveRequestInput[]
    createMany?: LeaveApprovalStepCreateManyLeaveRequestInputEnvelope
    set?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
    disconnect?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
    delete?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
    connect?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
    update?: LeaveApprovalStepUpdateWithWhereUniqueWithoutLeaveRequestInput | LeaveApprovalStepUpdateWithWhereUniqueWithoutLeaveRequestInput[]
    updateMany?: LeaveApprovalStepUpdateManyWithWhereWithoutLeaveRequestInput | LeaveApprovalStepUpdateManyWithWhereWithoutLeaveRequestInput[]
    deleteMany?: LeaveApprovalStepScalarWhereInput | LeaveApprovalStepScalarWhereInput[]
  }

  export type LeaveApprovalStepUncheckedUpdateManyWithoutLeaveRequestNestedInput = {
    create?: XOR<LeaveApprovalStepCreateWithoutLeaveRequestInput, LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput> | LeaveApprovalStepCreateWithoutLeaveRequestInput[] | LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput[]
    connectOrCreate?: LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput | LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput[]
    upsert?: LeaveApprovalStepUpsertWithWhereUniqueWithoutLeaveRequestInput | LeaveApprovalStepUpsertWithWhereUniqueWithoutLeaveRequestInput[]
    createMany?: LeaveApprovalStepCreateManyLeaveRequestInputEnvelope
    set?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
    disconnect?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
    delete?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
    connect?: LeaveApprovalStepWhereUniqueInput | LeaveApprovalStepWhereUniqueInput[]
    update?: LeaveApprovalStepUpdateWithWhereUniqueWithoutLeaveRequestInput | LeaveApprovalStepUpdateWithWhereUniqueWithoutLeaveRequestInput[]
    updateMany?: LeaveApprovalStepUpdateManyWithWhereWithoutLeaveRequestInput | LeaveApprovalStepUpdateManyWithWhereWithoutLeaveRequestInput[]
    deleteMany?: LeaveApprovalStepScalarWhereInput | LeaveApprovalStepScalarWhereInput[]
  }

  export type LeaveRequestCreateNestedOneWithoutApprovalStepsInput = {
    create?: XOR<LeaveRequestCreateWithoutApprovalStepsInput, LeaveRequestUncheckedCreateWithoutApprovalStepsInput>
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutApprovalStepsInput
    connect?: LeaveRequestWhereUniqueInput
  }

  export type LeaveApprovalStepApproverCreateNestedManyWithoutLeaveApprovalStepInput = {
    create?: XOR<LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput, LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput> | LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput[] | LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput[]
    connectOrCreate?: LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput[]
    createMany?: LeaveApprovalStepApproverCreateManyLeaveApprovalStepInputEnvelope
    connect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
  }

  export type LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutLeaveApprovalStepInput = {
    create?: XOR<LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput, LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput> | LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput[] | LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput[]
    connectOrCreate?: LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput[]
    createMany?: LeaveApprovalStepApproverCreateManyLeaveApprovalStepInputEnvelope
    connect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
  }

  export type LeaveRequestUpdateOneRequiredWithoutApprovalStepsNestedInput = {
    create?: XOR<LeaveRequestCreateWithoutApprovalStepsInput, LeaveRequestUncheckedCreateWithoutApprovalStepsInput>
    connectOrCreate?: LeaveRequestCreateOrConnectWithoutApprovalStepsInput
    upsert?: LeaveRequestUpsertWithoutApprovalStepsInput
    connect?: LeaveRequestWhereUniqueInput
    update?: XOR<XOR<LeaveRequestUpdateToOneWithWhereWithoutApprovalStepsInput, LeaveRequestUpdateWithoutApprovalStepsInput>, LeaveRequestUncheckedUpdateWithoutApprovalStepsInput>
  }

  export type LeaveApprovalStepApproverUpdateManyWithoutLeaveApprovalStepNestedInput = {
    create?: XOR<LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput, LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput> | LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput[] | LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput[]
    connectOrCreate?: LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput[]
    upsert?: LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutLeaveApprovalStepInput[]
    createMany?: LeaveApprovalStepApproverCreateManyLeaveApprovalStepInputEnvelope
    set?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    disconnect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    delete?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    connect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    update?: LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutLeaveApprovalStepInput[]
    updateMany?: LeaveApprovalStepApproverUpdateManyWithWhereWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverUpdateManyWithWhereWithoutLeaveApprovalStepInput[]
    deleteMany?: LeaveApprovalStepApproverScalarWhereInput | LeaveApprovalStepApproverScalarWhereInput[]
  }

  export type LeaveApprovalStepApproverUncheckedUpdateManyWithoutLeaveApprovalStepNestedInput = {
    create?: XOR<LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput, LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput> | LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput[] | LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput[]
    connectOrCreate?: LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput[]
    upsert?: LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutLeaveApprovalStepInput[]
    createMany?: LeaveApprovalStepApproverCreateManyLeaveApprovalStepInputEnvelope
    set?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    disconnect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    delete?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    connect?: LeaveApprovalStepApproverWhereUniqueInput | LeaveApprovalStepApproverWhereUniqueInput[]
    update?: LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutLeaveApprovalStepInput[]
    updateMany?: LeaveApprovalStepApproverUpdateManyWithWhereWithoutLeaveApprovalStepInput | LeaveApprovalStepApproverUpdateManyWithWhereWithoutLeaveApprovalStepInput[]
    deleteMany?: LeaveApprovalStepApproverScalarWhereInput | LeaveApprovalStepApproverScalarWhereInput[]
  }

  export type LeaveApprovalStepCreateNestedOneWithoutApproversInput = {
    create?: XOR<LeaveApprovalStepCreateWithoutApproversInput, LeaveApprovalStepUncheckedCreateWithoutApproversInput>
    connectOrCreate?: LeaveApprovalStepCreateOrConnectWithoutApproversInput
    connect?: LeaveApprovalStepWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutLeaveApprovalStepsInput = {
    create?: XOR<EmployeeCreateWithoutLeaveApprovalStepsInput, EmployeeUncheckedCreateWithoutLeaveApprovalStepsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeaveApprovalStepsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type LeaveApprovalStepUpdateOneRequiredWithoutApproversNestedInput = {
    create?: XOR<LeaveApprovalStepCreateWithoutApproversInput, LeaveApprovalStepUncheckedCreateWithoutApproversInput>
    connectOrCreate?: LeaveApprovalStepCreateOrConnectWithoutApproversInput
    upsert?: LeaveApprovalStepUpsertWithoutApproversInput
    connect?: LeaveApprovalStepWhereUniqueInput
    update?: XOR<XOR<LeaveApprovalStepUpdateToOneWithWhereWithoutApproversInput, LeaveApprovalStepUpdateWithoutApproversInput>, LeaveApprovalStepUncheckedUpdateWithoutApproversInput>
  }

  export type EmployeeUpdateOneRequiredWithoutLeaveApprovalStepsNestedInput = {
    create?: XOR<EmployeeCreateWithoutLeaveApprovalStepsInput, EmployeeUncheckedCreateWithoutLeaveApprovalStepsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeaveApprovalStepsInput
    upsert?: EmployeeUpsertWithoutLeaveApprovalStepsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutLeaveApprovalStepsInput, EmployeeUpdateWithoutLeaveApprovalStepsInput>, EmployeeUncheckedUpdateWithoutLeaveApprovalStepsInput>
  }

  export type EmployeeCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<EmployeeCreateWithoutAttendanceInput, EmployeeUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAttendanceInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<EmployeeCreateWithoutAttendanceInput, EmployeeUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAttendanceInput
    upsert?: EmployeeUpsertWithoutAttendanceInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutAttendanceInput, EmployeeUpdateWithoutAttendanceInput>, EmployeeUncheckedUpdateWithoutAttendanceInput>
  }

  export type KPIEmployeeCreateNestedManyWithoutKpiInput = {
    create?: XOR<KPIEmployeeCreateWithoutKpiInput, KPIEmployeeUncheckedCreateWithoutKpiInput> | KPIEmployeeCreateWithoutKpiInput[] | KPIEmployeeUncheckedCreateWithoutKpiInput[]
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutKpiInput | KPIEmployeeCreateOrConnectWithoutKpiInput[]
    createMany?: KPIEmployeeCreateManyKpiInputEnvelope
    connect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
  }

  export type KPIEmployeeUncheckedCreateNestedManyWithoutKpiInput = {
    create?: XOR<KPIEmployeeCreateWithoutKpiInput, KPIEmployeeUncheckedCreateWithoutKpiInput> | KPIEmployeeCreateWithoutKpiInput[] | KPIEmployeeUncheckedCreateWithoutKpiInput[]
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutKpiInput | KPIEmployeeCreateOrConnectWithoutKpiInput[]
    createMany?: KPIEmployeeCreateManyKpiInputEnvelope
    connect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
  }

  export type KPIEmployeeUpdateManyWithoutKpiNestedInput = {
    create?: XOR<KPIEmployeeCreateWithoutKpiInput, KPIEmployeeUncheckedCreateWithoutKpiInput> | KPIEmployeeCreateWithoutKpiInput[] | KPIEmployeeUncheckedCreateWithoutKpiInput[]
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutKpiInput | KPIEmployeeCreateOrConnectWithoutKpiInput[]
    upsert?: KPIEmployeeUpsertWithWhereUniqueWithoutKpiInput | KPIEmployeeUpsertWithWhereUniqueWithoutKpiInput[]
    createMany?: KPIEmployeeCreateManyKpiInputEnvelope
    set?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    disconnect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    delete?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    connect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    update?: KPIEmployeeUpdateWithWhereUniqueWithoutKpiInput | KPIEmployeeUpdateWithWhereUniqueWithoutKpiInput[]
    updateMany?: KPIEmployeeUpdateManyWithWhereWithoutKpiInput | KPIEmployeeUpdateManyWithWhereWithoutKpiInput[]
    deleteMany?: KPIEmployeeScalarWhereInput | KPIEmployeeScalarWhereInput[]
  }

  export type KPIEmployeeUncheckedUpdateManyWithoutKpiNestedInput = {
    create?: XOR<KPIEmployeeCreateWithoutKpiInput, KPIEmployeeUncheckedCreateWithoutKpiInput> | KPIEmployeeCreateWithoutKpiInput[] | KPIEmployeeUncheckedCreateWithoutKpiInput[]
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutKpiInput | KPIEmployeeCreateOrConnectWithoutKpiInput[]
    upsert?: KPIEmployeeUpsertWithWhereUniqueWithoutKpiInput | KPIEmployeeUpsertWithWhereUniqueWithoutKpiInput[]
    createMany?: KPIEmployeeCreateManyKpiInputEnvelope
    set?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    disconnect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    delete?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    connect?: KPIEmployeeWhereUniqueInput | KPIEmployeeWhereUniqueInput[]
    update?: KPIEmployeeUpdateWithWhereUniqueWithoutKpiInput | KPIEmployeeUpdateWithWhereUniqueWithoutKpiInput[]
    updateMany?: KPIEmployeeUpdateManyWithWhereWithoutKpiInput | KPIEmployeeUpdateManyWithWhereWithoutKpiInput[]
    deleteMany?: KPIEmployeeScalarWhereInput | KPIEmployeeScalarWhereInput[]
  }

  export type KPICreateNestedOneWithoutKpiEmployeesInput = {
    create?: XOR<KPICreateWithoutKpiEmployeesInput, KPIUncheckedCreateWithoutKpiEmployeesInput>
    connectOrCreate?: KPICreateOrConnectWithoutKpiEmployeesInput
    connect?: KPIWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutKPIEmployeeInput = {
    create?: XOR<EmployeeCreateWithoutKPIEmployeeInput, EmployeeUncheckedCreateWithoutKPIEmployeeInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutKPIEmployeeInput
    connect?: EmployeeWhereUniqueInput
  }

  export type KPIEntryCreateNestedManyWithoutKpiEmployeeInput = {
    create?: XOR<KPIEntryCreateWithoutKpiEmployeeInput, KPIEntryUncheckedCreateWithoutKpiEmployeeInput> | KPIEntryCreateWithoutKpiEmployeeInput[] | KPIEntryUncheckedCreateWithoutKpiEmployeeInput[]
    connectOrCreate?: KPIEntryCreateOrConnectWithoutKpiEmployeeInput | KPIEntryCreateOrConnectWithoutKpiEmployeeInput[]
    createMany?: KPIEntryCreateManyKpiEmployeeInputEnvelope
    connect?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
  }

  export type KPIEntryUncheckedCreateNestedManyWithoutKpiEmployeeInput = {
    create?: XOR<KPIEntryCreateWithoutKpiEmployeeInput, KPIEntryUncheckedCreateWithoutKpiEmployeeInput> | KPIEntryCreateWithoutKpiEmployeeInput[] | KPIEntryUncheckedCreateWithoutKpiEmployeeInput[]
    connectOrCreate?: KPIEntryCreateOrConnectWithoutKpiEmployeeInput | KPIEntryCreateOrConnectWithoutKpiEmployeeInput[]
    createMany?: KPIEntryCreateManyKpiEmployeeInputEnvelope
    connect?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
  }

  export type KPIUpdateOneRequiredWithoutKpiEmployeesNestedInput = {
    create?: XOR<KPICreateWithoutKpiEmployeesInput, KPIUncheckedCreateWithoutKpiEmployeesInput>
    connectOrCreate?: KPICreateOrConnectWithoutKpiEmployeesInput
    upsert?: KPIUpsertWithoutKpiEmployeesInput
    connect?: KPIWhereUniqueInput
    update?: XOR<XOR<KPIUpdateToOneWithWhereWithoutKpiEmployeesInput, KPIUpdateWithoutKpiEmployeesInput>, KPIUncheckedUpdateWithoutKpiEmployeesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutKPIEmployeeNestedInput = {
    create?: XOR<EmployeeCreateWithoutKPIEmployeeInput, EmployeeUncheckedCreateWithoutKPIEmployeeInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutKPIEmployeeInput
    upsert?: EmployeeUpsertWithoutKPIEmployeeInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutKPIEmployeeInput, EmployeeUpdateWithoutKPIEmployeeInput>, EmployeeUncheckedUpdateWithoutKPIEmployeeInput>
  }

  export type KPIEntryUpdateManyWithoutKpiEmployeeNestedInput = {
    create?: XOR<KPIEntryCreateWithoutKpiEmployeeInput, KPIEntryUncheckedCreateWithoutKpiEmployeeInput> | KPIEntryCreateWithoutKpiEmployeeInput[] | KPIEntryUncheckedCreateWithoutKpiEmployeeInput[]
    connectOrCreate?: KPIEntryCreateOrConnectWithoutKpiEmployeeInput | KPIEntryCreateOrConnectWithoutKpiEmployeeInput[]
    upsert?: KPIEntryUpsertWithWhereUniqueWithoutKpiEmployeeInput | KPIEntryUpsertWithWhereUniqueWithoutKpiEmployeeInput[]
    createMany?: KPIEntryCreateManyKpiEmployeeInputEnvelope
    set?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
    disconnect?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
    delete?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
    connect?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
    update?: KPIEntryUpdateWithWhereUniqueWithoutKpiEmployeeInput | KPIEntryUpdateWithWhereUniqueWithoutKpiEmployeeInput[]
    updateMany?: KPIEntryUpdateManyWithWhereWithoutKpiEmployeeInput | KPIEntryUpdateManyWithWhereWithoutKpiEmployeeInput[]
    deleteMany?: KPIEntryScalarWhereInput | KPIEntryScalarWhereInput[]
  }

  export type KPIEntryUncheckedUpdateManyWithoutKpiEmployeeNestedInput = {
    create?: XOR<KPIEntryCreateWithoutKpiEmployeeInput, KPIEntryUncheckedCreateWithoutKpiEmployeeInput> | KPIEntryCreateWithoutKpiEmployeeInput[] | KPIEntryUncheckedCreateWithoutKpiEmployeeInput[]
    connectOrCreate?: KPIEntryCreateOrConnectWithoutKpiEmployeeInput | KPIEntryCreateOrConnectWithoutKpiEmployeeInput[]
    upsert?: KPIEntryUpsertWithWhereUniqueWithoutKpiEmployeeInput | KPIEntryUpsertWithWhereUniqueWithoutKpiEmployeeInput[]
    createMany?: KPIEntryCreateManyKpiEmployeeInputEnvelope
    set?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
    disconnect?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
    delete?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
    connect?: KPIEntryWhereUniqueInput | KPIEntryWhereUniqueInput[]
    update?: KPIEntryUpdateWithWhereUniqueWithoutKpiEmployeeInput | KPIEntryUpdateWithWhereUniqueWithoutKpiEmployeeInput[]
    updateMany?: KPIEntryUpdateManyWithWhereWithoutKpiEmployeeInput | KPIEntryUpdateManyWithWhereWithoutKpiEmployeeInput[]
    deleteMany?: KPIEntryScalarWhereInput | KPIEntryScalarWhereInput[]
  }

  export type KPIEmployeeCreateNestedOneWithoutEntriesInput = {
    create?: XOR<KPIEmployeeCreateWithoutEntriesInput, KPIEmployeeUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutEntriesInput
    connect?: KPIEmployeeWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KPIEmployeeUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<KPIEmployeeCreateWithoutEntriesInput, KPIEmployeeUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: KPIEmployeeCreateOrConnectWithoutEntriesInput
    upsert?: KPIEmployeeUpsertWithoutEntriesInput
    connect?: KPIEmployeeWhereUniqueInput
    update?: XOR<XOR<KPIEmployeeUpdateToOneWithWhereWithoutEntriesInput, KPIEmployeeUpdateWithoutEntriesInput>, KPIEmployeeUncheckedUpdateWithoutEntriesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumSexFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexFilter<$PrismaModel> | $Enums.Sex
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexWithAggregatesFilter<$PrismaModel> | $Enums.Sex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexFilter<$PrismaModel>
    _max?: NestedEnumSexFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumWorkStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkStatus | EnumWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkStatusFilter<$PrismaModel> | $Enums.WorkStatus
  }

  export type NestedEnumWorkStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkStatus | EnumWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkStatusFilter<$PrismaModel>
  }

  export type NestedEnumLeaveTypeEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveTypeEnum | EnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveTypeEnum[] | ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeaveTypeEnum[] | ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumLeaveTypeEnumFilter<$PrismaModel> | $Enums.LeaveTypeEnum
  }

  export type NestedEnumLeaveStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveStatus | EnumLeaveStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveStatus[] | ListEnumLeaveStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeaveStatus[] | ListEnumLeaveStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLeaveStatusFilter<$PrismaModel> | $Enums.LeaveStatus
  }

  export type NestedEnumLeaveTypeEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveTypeEnum | EnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveTypeEnum[] | ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeaveTypeEnum[] | ListEnumLeaveTypeEnumFieldRefInput<$PrismaModel>
    not?: NestedEnumLeaveTypeEnumWithAggregatesFilter<$PrismaModel> | $Enums.LeaveTypeEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeaveTypeEnumFilter<$PrismaModel>
    _max?: NestedEnumLeaveTypeEnumFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumLeaveStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveStatus | EnumLeaveStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveStatus[] | ListEnumLeaveStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeaveStatus[] | ListEnumLeaveStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLeaveStatusWithAggregatesFilter<$PrismaModel> | $Enums.LeaveStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeaveStatusFilter<$PrismaModel>
    _max?: NestedEnumLeaveStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EmployeeCreateWithoutSubordinatesInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutSubordinatesInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutSubordinatesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
  }

  export type EmployeeCreateWithoutManagerInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutManagerInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutManagerInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput>
  }

  export type EmployeeCreateManyManagerInputEnvelope = {
    data: EmployeeCreateManyManagerInput | EmployeeCreateManyManagerInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutHeadInput = {
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    director?: EmployeeCreateNestedOneWithoutDepartmentDirectorOfInput
    positions?: PositionCreateNestedManyWithoutDepartmentInput
    workInfos?: WorkInfoCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutHeadInput = {
    id?: number
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    directorId?: number | null
    positions?: PositionUncheckedCreateNestedManyWithoutDepartmentInput
    workInfos?: WorkInfoUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutHeadInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
  }

  export type DepartmentCreateWithoutDirectorInput = {
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: EmployeeCreateNestedOneWithoutDepartmentHeadOfInput
    positions?: PositionCreateNestedManyWithoutDepartmentInput
    workInfos?: WorkInfoCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutDirectorInput = {
    id?: number
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    headId?: number | null
    positions?: PositionUncheckedCreateNestedManyWithoutDepartmentInput
    workInfos?: WorkInfoUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutDirectorInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
  }

  export type WorkInfoCreateWithoutEmployeeInput = {
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutWorkInfosInput
    position?: PositionCreateNestedOneWithoutEmployeesInput
  }

  export type WorkInfoUncheckedCreateWithoutEmployeeInput = {
    id?: number
    departmentId?: number | null
    positionId?: number | null
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
  }

  export type WorkInfoCreateOrConnectWithoutEmployeeInput = {
    where: WorkInfoWhereUniqueInput
    create: XOR<WorkInfoCreateWithoutEmployeeInput, WorkInfoUncheckedCreateWithoutEmployeeInput>
  }

  export type PersonalInfoCreateWithoutEmployeeInput = {
    identityNumber?: string | null
    issueDate?: Date | string | null
    issuePlace?: string | null
    hometown?: string | null
    idAddress?: string | null
    education?: string | null
    drivingLicense?: string | null
    toyotaCertificate?: string | null
    taxCode?: string | null
    insuranceNumber?: string | null
    insuranceSalary?: number | null
  }

  export type PersonalInfoUncheckedCreateWithoutEmployeeInput = {
    id?: number
    identityNumber?: string | null
    issueDate?: Date | string | null
    issuePlace?: string | null
    hometown?: string | null
    idAddress?: string | null
    education?: string | null
    drivingLicense?: string | null
    toyotaCertificate?: string | null
    taxCode?: string | null
    insuranceNumber?: string | null
    insuranceSalary?: number | null
  }

  export type PersonalInfoCreateOrConnectWithoutEmployeeInput = {
    where: PersonalInfoWhereUniqueInput
    create: XOR<PersonalInfoCreateWithoutEmployeeInput, PersonalInfoUncheckedCreateWithoutEmployeeInput>
  }

  export type ContactInfoCreateWithoutEmployeeInput = {
    phoneNumber?: string | null
    relativePhone?: string | null
    companyPhone?: string | null
    email?: string | null
  }

  export type ContactInfoUncheckedCreateWithoutEmployeeInput = {
    id?: number
    phoneNumber?: string | null
    relativePhone?: string | null
    companyPhone?: string | null
    email?: string | null
  }

  export type ContactInfoCreateOrConnectWithoutEmployeeInput = {
    where: ContactInfoWhereUniqueInput
    create: XOR<ContactInfoCreateWithoutEmployeeInput, ContactInfoUncheckedCreateWithoutEmployeeInput>
  }

  export type OtherInfoCreateWithoutEmployeeInput = {
    workStatus?: $Enums.WorkStatus
    resignedDate?: Date | string | null
    documentsChecked?: string | null
    updatedAt?: Date | string | null
    VCB?: string | null
    MTCV?: string | null
    PNJ?: string | null
  }

  export type OtherInfoUncheckedCreateWithoutEmployeeInput = {
    id?: number
    workStatus?: $Enums.WorkStatus
    resignedDate?: Date | string | null
    documentsChecked?: string | null
    updatedAt?: Date | string | null
    VCB?: string | null
    MTCV?: string | null
    PNJ?: string | null
  }

  export type OtherInfoCreateOrConnectWithoutEmployeeInput = {
    where: OtherInfoWhereUniqueInput
    create: XOR<OtherInfoCreateWithoutEmployeeInput, OtherInfoUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveRequestCreateWithoutEmployeeInput = {
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date | string
    endDate: Date | string
    totalHours?: number | null
    reason?: string | null
    status?: $Enums.LeaveStatus
    approvedBy?: string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    approvalSteps?: LeaveApprovalStepCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestUncheckedCreateWithoutEmployeeInput = {
    id?: number
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date | string
    endDate: Date | string
    totalHours?: number | null
    reason?: string | null
    status?: $Enums.LeaveStatus
    approvedBy?: string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    approvalSteps?: LeaveApprovalStepUncheckedCreateNestedManyWithoutLeaveRequestInput
  }

  export type LeaveRequestCreateOrConnectWithoutEmployeeInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveRequestCreateManyEmployeeInputEnvelope = {
    data: LeaveRequestCreateManyEmployeeInput | LeaveRequestCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type LeaveApprovalStepApproverCreateWithoutApproverInput = {
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
    leaveApprovalStep: LeaveApprovalStepCreateNestedOneWithoutApproversInput
  }

  export type LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput = {
    id?: number
    leaveApprovalStepId: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type LeaveApprovalStepApproverCreateOrConnectWithoutApproverInput = {
    where: LeaveApprovalStepApproverWhereUniqueInput
    create: XOR<LeaveApprovalStepApproverCreateWithoutApproverInput, LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput>
  }

  export type LeaveApprovalStepApproverCreateManyApproverInputEnvelope = {
    data: LeaveApprovalStepApproverCreateManyApproverInput | LeaveApprovalStepApproverCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type AttendanceCreateWithoutEmployeeInput = {
    date: Date | string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
  }

  export type AttendanceUncheckedCreateWithoutEmployeeInput = {
    id?: number
    date: Date | string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
  }

  export type AttendanceCreateOrConnectWithoutEmployeeInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutEmployeeInput, AttendanceUncheckedCreateWithoutEmployeeInput>
  }

  export type AttendanceCreateManyEmployeeInputEnvelope = {
    data: AttendanceCreateManyEmployeeInput | AttendanceCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type KPIEmployeeCreateWithoutEmployeeInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    kpi: KPICreateNestedOneWithoutKpiEmployeesInput
    entries?: KPIEntryCreateNestedManyWithoutKpiEmployeeInput
  }

  export type KPIEmployeeUncheckedCreateWithoutEmployeeInput = {
    id?: number
    kpiId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: KPIEntryUncheckedCreateNestedManyWithoutKpiEmployeeInput
  }

  export type KPIEmployeeCreateOrConnectWithoutEmployeeInput = {
    where: KPIEmployeeWhereUniqueInput
    create: XOR<KPIEmployeeCreateWithoutEmployeeInput, KPIEmployeeUncheckedCreateWithoutEmployeeInput>
  }

  export type KPIEmployeeCreateManyEmployeeInputEnvelope = {
    data: KPIEmployeeCreateManyEmployeeInput | KPIEmployeeCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutSubordinatesInput = {
    update: XOR<EmployeeUpdateWithoutSubordinatesInput, EmployeeUncheckedUpdateWithoutSubordinatesInput>
    create: XOR<EmployeeCreateWithoutSubordinatesInput, EmployeeUncheckedCreateWithoutSubordinatesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutSubordinatesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutSubordinatesInput, EmployeeUncheckedUpdateWithoutSubordinatesInput>
  }

  export type EmployeeUpdateWithoutSubordinatesInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutSubordinatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutManagerInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutManagerInput, EmployeeUncheckedUpdateWithoutManagerInput>
    create: XOR<EmployeeCreateWithoutManagerInput, EmployeeUncheckedCreateWithoutManagerInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutManagerInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutManagerInput, EmployeeUncheckedUpdateWithoutManagerInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutManagerInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutManagerInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: IntFilter<"Employee"> | number
    employeeCode?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    gender?: EnumSexFilter<"Employee"> | $Enums.Sex
    birthDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    password?: StringFilter<"Employee"> | string
    role?: EnumRoleFilter<"Employee"> | $Enums.Role
    avatar?: StringNullableFilter<"Employee"> | string | null
    isActive?: BoolFilter<"Employee"> | boolean
    managerId?: IntNullableFilter<"Employee"> | number | null
  }

  export type DepartmentUpsertWithoutHeadInput = {
    update: XOR<DepartmentUpdateWithoutHeadInput, DepartmentUncheckedUpdateWithoutHeadInput>
    create: XOR<DepartmentCreateWithoutHeadInput, DepartmentUncheckedCreateWithoutHeadInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutHeadInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutHeadInput, DepartmentUncheckedUpdateWithoutHeadInput>
  }

  export type DepartmentUpdateWithoutHeadInput = {
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    director?: EmployeeUpdateOneWithoutDepartmentDirectorOfNestedInput
    positions?: PositionUpdateManyWithoutDepartmentNestedInput
    workInfos?: WorkInfoUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutHeadInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directorId?: NullableIntFieldUpdateOperationsInput | number | null
    positions?: PositionUncheckedUpdateManyWithoutDepartmentNestedInput
    workInfos?: WorkInfoUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUpsertWithoutDirectorInput = {
    update: XOR<DepartmentUpdateWithoutDirectorInput, DepartmentUncheckedUpdateWithoutDirectorInput>
    create: XOR<DepartmentCreateWithoutDirectorInput, DepartmentUncheckedCreateWithoutDirectorInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutDirectorInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutDirectorInput, DepartmentUncheckedUpdateWithoutDirectorInput>
  }

  export type DepartmentUpdateWithoutDirectorInput = {
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: EmployeeUpdateOneWithoutDepartmentHeadOfNestedInput
    positions?: PositionUpdateManyWithoutDepartmentNestedInput
    workInfos?: WorkInfoUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutDirectorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    headId?: NullableIntFieldUpdateOperationsInput | number | null
    positions?: PositionUncheckedUpdateManyWithoutDepartmentNestedInput
    workInfos?: WorkInfoUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type WorkInfoUpsertWithoutEmployeeInput = {
    update: XOR<WorkInfoUpdateWithoutEmployeeInput, WorkInfoUncheckedUpdateWithoutEmployeeInput>
    create: XOR<WorkInfoCreateWithoutEmployeeInput, WorkInfoUncheckedCreateWithoutEmployeeInput>
    where?: WorkInfoWhereInput
  }

  export type WorkInfoUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: WorkInfoWhereInput
    data: XOR<WorkInfoUpdateWithoutEmployeeInput, WorkInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type WorkInfoUpdateWithoutEmployeeInput = {
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutWorkInfosNestedInput
    position?: PositionUpdateOneWithoutEmployeesNestedInput
  }

  export type WorkInfoUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PersonalInfoUpsertWithoutEmployeeInput = {
    update: XOR<PersonalInfoUpdateWithoutEmployeeInput, PersonalInfoUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PersonalInfoCreateWithoutEmployeeInput, PersonalInfoUncheckedCreateWithoutEmployeeInput>
    where?: PersonalInfoWhereInput
  }

  export type PersonalInfoUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: PersonalInfoWhereInput
    data: XOR<PersonalInfoUpdateWithoutEmployeeInput, PersonalInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type PersonalInfoUpdateWithoutEmployeeInput = {
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuePlace?: NullableStringFieldUpdateOperationsInput | string | null
    hometown?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    drivingLicense?: NullableStringFieldUpdateOperationsInput | string | null
    toyotaCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceSalary?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PersonalInfoUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    identityNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    issuePlace?: NullableStringFieldUpdateOperationsInput | string | null
    hometown?: NullableStringFieldUpdateOperationsInput | string | null
    idAddress?: NullableStringFieldUpdateOperationsInput | string | null
    education?: NullableStringFieldUpdateOperationsInput | string | null
    drivingLicense?: NullableStringFieldUpdateOperationsInput | string | null
    toyotaCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    taxCode?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceSalary?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContactInfoUpsertWithoutEmployeeInput = {
    update: XOR<ContactInfoUpdateWithoutEmployeeInput, ContactInfoUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ContactInfoCreateWithoutEmployeeInput, ContactInfoUncheckedCreateWithoutEmployeeInput>
    where?: ContactInfoWhereInput
  }

  export type ContactInfoUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: ContactInfoWhereInput
    data: XOR<ContactInfoUpdateWithoutEmployeeInput, ContactInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type ContactInfoUpdateWithoutEmployeeInput = {
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    relativePhone?: NullableStringFieldUpdateOperationsInput | string | null
    companyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactInfoUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    relativePhone?: NullableStringFieldUpdateOperationsInput | string | null
    companyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtherInfoUpsertWithoutEmployeeInput = {
    update: XOR<OtherInfoUpdateWithoutEmployeeInput, OtherInfoUncheckedUpdateWithoutEmployeeInput>
    create: XOR<OtherInfoCreateWithoutEmployeeInput, OtherInfoUncheckedCreateWithoutEmployeeInput>
    where?: OtherInfoWhereInput
  }

  export type OtherInfoUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: OtherInfoWhereInput
    data: XOR<OtherInfoUpdateWithoutEmployeeInput, OtherInfoUncheckedUpdateWithoutEmployeeInput>
  }

  export type OtherInfoUpdateWithoutEmployeeInput = {
    workStatus?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    resignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentsChecked?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    VCB?: NullableStringFieldUpdateOperationsInput | string | null
    MTCV?: NullableStringFieldUpdateOperationsInput | string | null
    PNJ?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OtherInfoUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    workStatus?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    resignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentsChecked?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    VCB?: NullableStringFieldUpdateOperationsInput | string | null
    MTCV?: NullableStringFieldUpdateOperationsInput | string | null
    PNJ?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeaveRequestUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveRequestWhereUniqueInput
    update: XOR<LeaveRequestUpdateWithoutEmployeeInput, LeaveRequestUncheckedUpdateWithoutEmployeeInput>
    create: XOR<LeaveRequestCreateWithoutEmployeeInput, LeaveRequestUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveRequestUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveRequestWhereUniqueInput
    data: XOR<LeaveRequestUpdateWithoutEmployeeInput, LeaveRequestUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveRequestUpdateManyWithWhereWithoutEmployeeInput = {
    where: LeaveRequestScalarWhereInput
    data: XOR<LeaveRequestUpdateManyMutationInput, LeaveRequestUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type LeaveRequestScalarWhereInput = {
    AND?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
    OR?: LeaveRequestScalarWhereInput[]
    NOT?: LeaveRequestScalarWhereInput | LeaveRequestScalarWhereInput[]
    id?: IntFilter<"LeaveRequest"> | number
    employeeId?: IntFilter<"LeaveRequest"> | number
    leaveType?: EnumLeaveTypeEnumFilter<"LeaveRequest"> | $Enums.LeaveTypeEnum
    startDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    endDate?: DateTimeFilter<"LeaveRequest"> | Date | string
    totalHours?: FloatNullableFilter<"LeaveRequest"> | number | null
    reason?: StringNullableFilter<"LeaveRequest"> | string | null
    status?: EnumLeaveStatusFilter<"LeaveRequest"> | $Enums.LeaveStatus
    approvedBy?: StringNullableFilter<"LeaveRequest"> | string | null
    approvedAt?: DateTimeNullableFilter<"LeaveRequest"> | Date | string | null
    createdAt?: DateTimeFilter<"LeaveRequest"> | Date | string
  }

  export type LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutApproverInput = {
    where: LeaveApprovalStepApproverWhereUniqueInput
    update: XOR<LeaveApprovalStepApproverUpdateWithoutApproverInput, LeaveApprovalStepApproverUncheckedUpdateWithoutApproverInput>
    create: XOR<LeaveApprovalStepApproverCreateWithoutApproverInput, LeaveApprovalStepApproverUncheckedCreateWithoutApproverInput>
  }

  export type LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutApproverInput = {
    where: LeaveApprovalStepApproverWhereUniqueInput
    data: XOR<LeaveApprovalStepApproverUpdateWithoutApproverInput, LeaveApprovalStepApproverUncheckedUpdateWithoutApproverInput>
  }

  export type LeaveApprovalStepApproverUpdateManyWithWhereWithoutApproverInput = {
    where: LeaveApprovalStepApproverScalarWhereInput
    data: XOR<LeaveApprovalStepApproverUpdateManyMutationInput, LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverInput>
  }

  export type LeaveApprovalStepApproverScalarWhereInput = {
    AND?: LeaveApprovalStepApproverScalarWhereInput | LeaveApprovalStepApproverScalarWhereInput[]
    OR?: LeaveApprovalStepApproverScalarWhereInput[]
    NOT?: LeaveApprovalStepApproverScalarWhereInput | LeaveApprovalStepApproverScalarWhereInput[]
    id?: IntFilter<"LeaveApprovalStepApprover"> | number
    leaveApprovalStepId?: IntFilter<"LeaveApprovalStepApprover"> | number
    approverId?: IntFilter<"LeaveApprovalStepApprover"> | number
    status?: EnumLeaveStatusFilter<"LeaveApprovalStepApprover"> | $Enums.LeaveStatus
    approvedAt?: DateTimeNullableFilter<"LeaveApprovalStepApprover"> | Date | string | null
  }

  export type AttendanceUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutEmployeeInput, AttendanceUncheckedUpdateWithoutEmployeeInput>
    create: XOR<AttendanceCreateWithoutEmployeeInput, AttendanceUncheckedCreateWithoutEmployeeInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutEmployeeInput, AttendanceUncheckedUpdateWithoutEmployeeInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutEmployeeInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type AttendanceScalarWhereInput = {
    AND?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    OR?: AttendanceScalarWhereInput[]
    NOT?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    id?: IntFilter<"Attendance"> | number
    employeeId?: IntFilter<"Attendance"> | number
    date?: DateTimeFilter<"Attendance"> | Date | string
    checkInTime?: DateTimeNullableFilter<"Attendance"> | Date | string | null
    checkOutTime?: DateTimeNullableFilter<"Attendance"> | Date | string | null
  }

  export type KPIEmployeeUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: KPIEmployeeWhereUniqueInput
    update: XOR<KPIEmployeeUpdateWithoutEmployeeInput, KPIEmployeeUncheckedUpdateWithoutEmployeeInput>
    create: XOR<KPIEmployeeCreateWithoutEmployeeInput, KPIEmployeeUncheckedCreateWithoutEmployeeInput>
  }

  export type KPIEmployeeUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: KPIEmployeeWhereUniqueInput
    data: XOR<KPIEmployeeUpdateWithoutEmployeeInput, KPIEmployeeUncheckedUpdateWithoutEmployeeInput>
  }

  export type KPIEmployeeUpdateManyWithWhereWithoutEmployeeInput = {
    where: KPIEmployeeScalarWhereInput
    data: XOR<KPIEmployeeUpdateManyMutationInput, KPIEmployeeUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type KPIEmployeeScalarWhereInput = {
    AND?: KPIEmployeeScalarWhereInput | KPIEmployeeScalarWhereInput[]
    OR?: KPIEmployeeScalarWhereInput[]
    NOT?: KPIEmployeeScalarWhereInput | KPIEmployeeScalarWhereInput[]
    id?: IntFilter<"KPIEmployee"> | number
    kpiId?: IntFilter<"KPIEmployee"> | number
    employeeId?: IntFilter<"KPIEmployee"> | number
    createdAt?: DateTimeFilter<"KPIEmployee"> | Date | string
    updatedAt?: DateTimeFilter<"KPIEmployee"> | Date | string
  }

  export type EmployeeCreateWithoutDepartmentHeadOfInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDepartmentHeadOfInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDepartmentHeadOfInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDepartmentHeadOfInput, EmployeeUncheckedCreateWithoutDepartmentHeadOfInput>
  }

  export type EmployeeCreateWithoutDepartmentDirectorOfInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDepartmentDirectorOfInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDepartmentDirectorOfInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDepartmentDirectorOfInput, EmployeeUncheckedCreateWithoutDepartmentDirectorOfInput>
  }

  export type PositionCreateWithoutDepartmentInput = {
    name: string
    level?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: WorkInfoCreateNestedManyWithoutPositionInput
  }

  export type PositionUncheckedCreateWithoutDepartmentInput = {
    id?: number
    name: string
    level?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employees?: WorkInfoUncheckedCreateNestedManyWithoutPositionInput
  }

  export type PositionCreateOrConnectWithoutDepartmentInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutDepartmentInput, PositionUncheckedCreateWithoutDepartmentInput>
  }

  export type PositionCreateManyDepartmentInputEnvelope = {
    data: PositionCreateManyDepartmentInput | PositionCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type WorkInfoCreateWithoutDepartmentInput = {
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    position?: PositionCreateNestedOneWithoutEmployeesInput
    employee: EmployeeCreateNestedOneWithoutWorkInfoInput
  }

  export type WorkInfoUncheckedCreateWithoutDepartmentInput = {
    id?: number
    positionId?: number | null
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    employeeId: number
  }

  export type WorkInfoCreateOrConnectWithoutDepartmentInput = {
    where: WorkInfoWhereUniqueInput
    create: XOR<WorkInfoCreateWithoutDepartmentInput, WorkInfoUncheckedCreateWithoutDepartmentInput>
  }

  export type WorkInfoCreateManyDepartmentInputEnvelope = {
    data: WorkInfoCreateManyDepartmentInput | WorkInfoCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutDepartmentHeadOfInput = {
    update: XOR<EmployeeUpdateWithoutDepartmentHeadOfInput, EmployeeUncheckedUpdateWithoutDepartmentHeadOfInput>
    create: XOR<EmployeeCreateWithoutDepartmentHeadOfInput, EmployeeUncheckedCreateWithoutDepartmentHeadOfInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDepartmentHeadOfInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDepartmentHeadOfInput, EmployeeUncheckedUpdateWithoutDepartmentHeadOfInput>
  }

  export type EmployeeUpdateWithoutDepartmentHeadOfInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDepartmentHeadOfInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUpsertWithoutDepartmentDirectorOfInput = {
    update: XOR<EmployeeUpdateWithoutDepartmentDirectorOfInput, EmployeeUncheckedUpdateWithoutDepartmentDirectorOfInput>
    create: XOR<EmployeeCreateWithoutDepartmentDirectorOfInput, EmployeeUncheckedCreateWithoutDepartmentDirectorOfInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDepartmentDirectorOfInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDepartmentDirectorOfInput, EmployeeUncheckedUpdateWithoutDepartmentDirectorOfInput>
  }

  export type EmployeeUpdateWithoutDepartmentDirectorOfInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDepartmentDirectorOfInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type PositionUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: PositionWhereUniqueInput
    update: XOR<PositionUpdateWithoutDepartmentInput, PositionUncheckedUpdateWithoutDepartmentInput>
    create: XOR<PositionCreateWithoutDepartmentInput, PositionUncheckedCreateWithoutDepartmentInput>
  }

  export type PositionUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: PositionWhereUniqueInput
    data: XOR<PositionUpdateWithoutDepartmentInput, PositionUncheckedUpdateWithoutDepartmentInput>
  }

  export type PositionUpdateManyWithWhereWithoutDepartmentInput = {
    where: PositionScalarWhereInput
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type PositionScalarWhereInput = {
    AND?: PositionScalarWhereInput | PositionScalarWhereInput[]
    OR?: PositionScalarWhereInput[]
    NOT?: PositionScalarWhereInput | PositionScalarWhereInput[]
    id?: IntFilter<"Position"> | number
    name?: StringFilter<"Position"> | string
    level?: IntFilter<"Position"> | number
    departmentId?: IntFilter<"Position"> | number
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
  }

  export type WorkInfoUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: WorkInfoWhereUniqueInput
    update: XOR<WorkInfoUpdateWithoutDepartmentInput, WorkInfoUncheckedUpdateWithoutDepartmentInput>
    create: XOR<WorkInfoCreateWithoutDepartmentInput, WorkInfoUncheckedCreateWithoutDepartmentInput>
  }

  export type WorkInfoUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: WorkInfoWhereUniqueInput
    data: XOR<WorkInfoUpdateWithoutDepartmentInput, WorkInfoUncheckedUpdateWithoutDepartmentInput>
  }

  export type WorkInfoUpdateManyWithWhereWithoutDepartmentInput = {
    where: WorkInfoScalarWhereInput
    data: XOR<WorkInfoUpdateManyMutationInput, WorkInfoUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type WorkInfoScalarWhereInput = {
    AND?: WorkInfoScalarWhereInput | WorkInfoScalarWhereInput[]
    OR?: WorkInfoScalarWhereInput[]
    NOT?: WorkInfoScalarWhereInput | WorkInfoScalarWhereInput[]
    id?: IntFilter<"WorkInfo"> | number
    departmentId?: IntNullableFilter<"WorkInfo"> | number | null
    positionId?: IntNullableFilter<"WorkInfo"> | number | null
    specialization?: StringNullableFilter<"WorkInfo"> | string | null
    joinedTBD?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    joinedTeSCC?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    seniorityStart?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    seniority?: StringNullableFilter<"WorkInfo"> | string | null
    contractNumber?: StringNullableFilter<"WorkInfo"> | string | null
    contractDate?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    contractType?: StringNullableFilter<"WorkInfo"> | string | null
    contractEndDate?: DateTimeNullableFilter<"WorkInfo"> | Date | string | null
    employeeId?: IntFilter<"WorkInfo"> | number
  }

  export type DepartmentCreateWithoutPositionsInput = {
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: EmployeeCreateNestedOneWithoutDepartmentHeadOfInput
    director?: EmployeeCreateNestedOneWithoutDepartmentDirectorOfInput
    workInfos?: WorkInfoCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutPositionsInput = {
    id?: number
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    headId?: number | null
    directorId?: number | null
    workInfos?: WorkInfoUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutPositionsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutPositionsInput, DepartmentUncheckedCreateWithoutPositionsInput>
  }

  export type WorkInfoCreateWithoutPositionInput = {
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutWorkInfosInput
    employee: EmployeeCreateNestedOneWithoutWorkInfoInput
  }

  export type WorkInfoUncheckedCreateWithoutPositionInput = {
    id?: number
    departmentId?: number | null
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    employeeId: number
  }

  export type WorkInfoCreateOrConnectWithoutPositionInput = {
    where: WorkInfoWhereUniqueInput
    create: XOR<WorkInfoCreateWithoutPositionInput, WorkInfoUncheckedCreateWithoutPositionInput>
  }

  export type WorkInfoCreateManyPositionInputEnvelope = {
    data: WorkInfoCreateManyPositionInput | WorkInfoCreateManyPositionInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutPositionsInput = {
    update: XOR<DepartmentUpdateWithoutPositionsInput, DepartmentUncheckedUpdateWithoutPositionsInput>
    create: XOR<DepartmentCreateWithoutPositionsInput, DepartmentUncheckedCreateWithoutPositionsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutPositionsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutPositionsInput, DepartmentUncheckedUpdateWithoutPositionsInput>
  }

  export type DepartmentUpdateWithoutPositionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: EmployeeUpdateOneWithoutDepartmentHeadOfNestedInput
    director?: EmployeeUpdateOneWithoutDepartmentDirectorOfNestedInput
    workInfos?: WorkInfoUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutPositionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    headId?: NullableIntFieldUpdateOperationsInput | number | null
    directorId?: NullableIntFieldUpdateOperationsInput | number | null
    workInfos?: WorkInfoUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type WorkInfoUpsertWithWhereUniqueWithoutPositionInput = {
    where: WorkInfoWhereUniqueInput
    update: XOR<WorkInfoUpdateWithoutPositionInput, WorkInfoUncheckedUpdateWithoutPositionInput>
    create: XOR<WorkInfoCreateWithoutPositionInput, WorkInfoUncheckedCreateWithoutPositionInput>
  }

  export type WorkInfoUpdateWithWhereUniqueWithoutPositionInput = {
    where: WorkInfoWhereUniqueInput
    data: XOR<WorkInfoUpdateWithoutPositionInput, WorkInfoUncheckedUpdateWithoutPositionInput>
  }

  export type WorkInfoUpdateManyWithWhereWithoutPositionInput = {
    where: WorkInfoScalarWhereInput
    data: XOR<WorkInfoUpdateManyMutationInput, WorkInfoUncheckedUpdateManyWithoutPositionInput>
  }

  export type DepartmentCreateWithoutWorkInfosInput = {
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    head?: EmployeeCreateNestedOneWithoutDepartmentHeadOfInput
    director?: EmployeeCreateNestedOneWithoutDepartmentDirectorOfInput
    positions?: PositionCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutWorkInfosInput = {
    id?: number
    name: string
    abbreviation: string
    createdAt?: Date | string
    updatedAt?: Date | string
    headId?: number | null
    directorId?: number | null
    positions?: PositionUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutWorkInfosInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutWorkInfosInput, DepartmentUncheckedCreateWithoutWorkInfosInput>
  }

  export type PositionCreateWithoutEmployeesInput = {
    name: string
    level?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentCreateNestedOneWithoutPositionsInput
  }

  export type PositionUncheckedCreateWithoutEmployeesInput = {
    id?: number
    name: string
    level?: number
    departmentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionCreateOrConnectWithoutEmployeesInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutEmployeesInput, PositionUncheckedCreateWithoutEmployeesInput>
  }

  export type EmployeeCreateWithoutWorkInfoInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutWorkInfoInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutWorkInfoInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutWorkInfoInput, EmployeeUncheckedCreateWithoutWorkInfoInput>
  }

  export type DepartmentUpsertWithoutWorkInfosInput = {
    update: XOR<DepartmentUpdateWithoutWorkInfosInput, DepartmentUncheckedUpdateWithoutWorkInfosInput>
    create: XOR<DepartmentCreateWithoutWorkInfosInput, DepartmentUncheckedCreateWithoutWorkInfosInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutWorkInfosInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutWorkInfosInput, DepartmentUncheckedUpdateWithoutWorkInfosInput>
  }

  export type DepartmentUpdateWithoutWorkInfosInput = {
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    head?: EmployeeUpdateOneWithoutDepartmentHeadOfNestedInput
    director?: EmployeeUpdateOneWithoutDepartmentDirectorOfNestedInput
    positions?: PositionUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutWorkInfosInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    headId?: NullableIntFieldUpdateOperationsInput | number | null
    directorId?: NullableIntFieldUpdateOperationsInput | number | null
    positions?: PositionUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type PositionUpsertWithoutEmployeesInput = {
    update: XOR<PositionUpdateWithoutEmployeesInput, PositionUncheckedUpdateWithoutEmployeesInput>
    create: XOR<PositionCreateWithoutEmployeesInput, PositionUncheckedCreateWithoutEmployeesInput>
    where?: PositionWhereInput
  }

  export type PositionUpdateToOneWithWhereWithoutEmployeesInput = {
    where?: PositionWhereInput
    data: XOR<PositionUpdateWithoutEmployeesInput, PositionUncheckedUpdateWithoutEmployeesInput>
  }

  export type PositionUpdateWithoutEmployeesInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneRequiredWithoutPositionsNestedInput
  }

  export type PositionUncheckedUpdateWithoutEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpsertWithoutWorkInfoInput = {
    update: XOR<EmployeeUpdateWithoutWorkInfoInput, EmployeeUncheckedUpdateWithoutWorkInfoInput>
    create: XOR<EmployeeCreateWithoutWorkInfoInput, EmployeeUncheckedCreateWithoutWorkInfoInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutWorkInfoInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutWorkInfoInput, EmployeeUncheckedUpdateWithoutWorkInfoInput>
  }

  export type EmployeeUpdateWithoutWorkInfoInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutWorkInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutPersonalInfoInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPersonalInfoInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPersonalInfoInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPersonalInfoInput, EmployeeUncheckedCreateWithoutPersonalInfoInput>
  }

  export type EmployeeUpsertWithoutPersonalInfoInput = {
    update: XOR<EmployeeUpdateWithoutPersonalInfoInput, EmployeeUncheckedUpdateWithoutPersonalInfoInput>
    create: XOR<EmployeeCreateWithoutPersonalInfoInput, EmployeeUncheckedCreateWithoutPersonalInfoInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPersonalInfoInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPersonalInfoInput, EmployeeUncheckedUpdateWithoutPersonalInfoInput>
  }

  export type EmployeeUpdateWithoutPersonalInfoInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPersonalInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutContactInfoInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutContactInfoInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutContactInfoInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutContactInfoInput, EmployeeUncheckedCreateWithoutContactInfoInput>
  }

  export type EmployeeUpsertWithoutContactInfoInput = {
    update: XOR<EmployeeUpdateWithoutContactInfoInput, EmployeeUncheckedUpdateWithoutContactInfoInput>
    create: XOR<EmployeeCreateWithoutContactInfoInput, EmployeeUncheckedCreateWithoutContactInfoInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutContactInfoInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutContactInfoInput, EmployeeUncheckedUpdateWithoutContactInfoInput>
  }

  export type EmployeeUpdateWithoutContactInfoInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutContactInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutOtherInfoInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutOtherInfoInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutOtherInfoInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutOtherInfoInput, EmployeeUncheckedCreateWithoutOtherInfoInput>
  }

  export type EmployeeUpsertWithoutOtherInfoInput = {
    update: XOR<EmployeeUpdateWithoutOtherInfoInput, EmployeeUncheckedUpdateWithoutOtherInfoInput>
    create: XOR<EmployeeCreateWithoutOtherInfoInput, EmployeeUncheckedCreateWithoutOtherInfoInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutOtherInfoInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutOtherInfoInput, EmployeeUncheckedUpdateWithoutOtherInfoInput>
  }

  export type EmployeeUpdateWithoutOtherInfoInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutOtherInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutLeaveRequestInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutLeaveRequestInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutLeaveRequestInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutLeaveRequestInput, EmployeeUncheckedCreateWithoutLeaveRequestInput>
  }

  export type LeaveApprovalStepCreateWithoutLeaveRequestInput = {
    level: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
    approvers?: LeaveApprovalStepApproverCreateNestedManyWithoutLeaveApprovalStepInput
  }

  export type LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput = {
    id?: number
    level: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
    approvers?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutLeaveApprovalStepInput
  }

  export type LeaveApprovalStepCreateOrConnectWithoutLeaveRequestInput = {
    where: LeaveApprovalStepWhereUniqueInput
    create: XOR<LeaveApprovalStepCreateWithoutLeaveRequestInput, LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput>
  }

  export type LeaveApprovalStepCreateManyLeaveRequestInputEnvelope = {
    data: LeaveApprovalStepCreateManyLeaveRequestInput | LeaveApprovalStepCreateManyLeaveRequestInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutLeaveRequestInput = {
    update: XOR<EmployeeUpdateWithoutLeaveRequestInput, EmployeeUncheckedUpdateWithoutLeaveRequestInput>
    create: XOR<EmployeeCreateWithoutLeaveRequestInput, EmployeeUncheckedCreateWithoutLeaveRequestInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutLeaveRequestInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutLeaveRequestInput, EmployeeUncheckedUpdateWithoutLeaveRequestInput>
  }

  export type EmployeeUpdateWithoutLeaveRequestInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutLeaveRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type LeaveApprovalStepUpsertWithWhereUniqueWithoutLeaveRequestInput = {
    where: LeaveApprovalStepWhereUniqueInput
    update: XOR<LeaveApprovalStepUpdateWithoutLeaveRequestInput, LeaveApprovalStepUncheckedUpdateWithoutLeaveRequestInput>
    create: XOR<LeaveApprovalStepCreateWithoutLeaveRequestInput, LeaveApprovalStepUncheckedCreateWithoutLeaveRequestInput>
  }

  export type LeaveApprovalStepUpdateWithWhereUniqueWithoutLeaveRequestInput = {
    where: LeaveApprovalStepWhereUniqueInput
    data: XOR<LeaveApprovalStepUpdateWithoutLeaveRequestInput, LeaveApprovalStepUncheckedUpdateWithoutLeaveRequestInput>
  }

  export type LeaveApprovalStepUpdateManyWithWhereWithoutLeaveRequestInput = {
    where: LeaveApprovalStepScalarWhereInput
    data: XOR<LeaveApprovalStepUpdateManyMutationInput, LeaveApprovalStepUncheckedUpdateManyWithoutLeaveRequestInput>
  }

  export type LeaveApprovalStepScalarWhereInput = {
    AND?: LeaveApprovalStepScalarWhereInput | LeaveApprovalStepScalarWhereInput[]
    OR?: LeaveApprovalStepScalarWhereInput[]
    NOT?: LeaveApprovalStepScalarWhereInput | LeaveApprovalStepScalarWhereInput[]
    id?: IntFilter<"LeaveApprovalStep"> | number
    leaveRequestId?: IntFilter<"LeaveApprovalStep"> | number
    level?: IntFilter<"LeaveApprovalStep"> | number
    status?: EnumLeaveStatusFilter<"LeaveApprovalStep"> | $Enums.LeaveStatus
    approvedAt?: DateTimeNullableFilter<"LeaveApprovalStep"> | Date | string | null
  }

  export type LeaveRequestCreateWithoutApprovalStepsInput = {
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date | string
    endDate: Date | string
    totalHours?: number | null
    reason?: string | null
    status?: $Enums.LeaveStatus
    approvedBy?: string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutLeaveRequestInput
  }

  export type LeaveRequestUncheckedCreateWithoutApprovalStepsInput = {
    id?: number
    employeeId: number
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date | string
    endDate: Date | string
    totalHours?: number | null
    reason?: string | null
    status?: $Enums.LeaveStatus
    approvedBy?: string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LeaveRequestCreateOrConnectWithoutApprovalStepsInput = {
    where: LeaveRequestWhereUniqueInput
    create: XOR<LeaveRequestCreateWithoutApprovalStepsInput, LeaveRequestUncheckedCreateWithoutApprovalStepsInput>
  }

  export type LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput = {
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
    approver: EmployeeCreateNestedOneWithoutLeaveApprovalStepsInput
  }

  export type LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput = {
    id?: number
    approverId: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type LeaveApprovalStepApproverCreateOrConnectWithoutLeaveApprovalStepInput = {
    where: LeaveApprovalStepApproverWhereUniqueInput
    create: XOR<LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput, LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput>
  }

  export type LeaveApprovalStepApproverCreateManyLeaveApprovalStepInputEnvelope = {
    data: LeaveApprovalStepApproverCreateManyLeaveApprovalStepInput | LeaveApprovalStepApproverCreateManyLeaveApprovalStepInput[]
    skipDuplicates?: boolean
  }

  export type LeaveRequestUpsertWithoutApprovalStepsInput = {
    update: XOR<LeaveRequestUpdateWithoutApprovalStepsInput, LeaveRequestUncheckedUpdateWithoutApprovalStepsInput>
    create: XOR<LeaveRequestCreateWithoutApprovalStepsInput, LeaveRequestUncheckedCreateWithoutApprovalStepsInput>
    where?: LeaveRequestWhereInput
  }

  export type LeaveRequestUpdateToOneWithWhereWithoutApprovalStepsInput = {
    where?: LeaveRequestWhereInput
    data: XOR<LeaveRequestUpdateWithoutApprovalStepsInput, LeaveRequestUncheckedUpdateWithoutApprovalStepsInput>
  }

  export type LeaveRequestUpdateWithoutApprovalStepsInput = {
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutApprovalStepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveApprovalStepApproverUpsertWithWhereUniqueWithoutLeaveApprovalStepInput = {
    where: LeaveApprovalStepApproverWhereUniqueInput
    update: XOR<LeaveApprovalStepApproverUpdateWithoutLeaveApprovalStepInput, LeaveApprovalStepApproverUncheckedUpdateWithoutLeaveApprovalStepInput>
    create: XOR<LeaveApprovalStepApproverCreateWithoutLeaveApprovalStepInput, LeaveApprovalStepApproverUncheckedCreateWithoutLeaveApprovalStepInput>
  }

  export type LeaveApprovalStepApproverUpdateWithWhereUniqueWithoutLeaveApprovalStepInput = {
    where: LeaveApprovalStepApproverWhereUniqueInput
    data: XOR<LeaveApprovalStepApproverUpdateWithoutLeaveApprovalStepInput, LeaveApprovalStepApproverUncheckedUpdateWithoutLeaveApprovalStepInput>
  }

  export type LeaveApprovalStepApproverUpdateManyWithWhereWithoutLeaveApprovalStepInput = {
    where: LeaveApprovalStepApproverScalarWhereInput
    data: XOR<LeaveApprovalStepApproverUpdateManyMutationInput, LeaveApprovalStepApproverUncheckedUpdateManyWithoutLeaveApprovalStepInput>
  }

  export type LeaveApprovalStepCreateWithoutApproversInput = {
    level: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
    leaveRequest: LeaveRequestCreateNestedOneWithoutApprovalStepsInput
  }

  export type LeaveApprovalStepUncheckedCreateWithoutApproversInput = {
    id?: number
    leaveRequestId: number
    level: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type LeaveApprovalStepCreateOrConnectWithoutApproversInput = {
    where: LeaveApprovalStepWhereUniqueInput
    create: XOR<LeaveApprovalStepCreateWithoutApproversInput, LeaveApprovalStepUncheckedCreateWithoutApproversInput>
  }

  export type EmployeeCreateWithoutLeaveApprovalStepsInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutLeaveApprovalStepsInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutLeaveApprovalStepsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutLeaveApprovalStepsInput, EmployeeUncheckedCreateWithoutLeaveApprovalStepsInput>
  }

  export type LeaveApprovalStepUpsertWithoutApproversInput = {
    update: XOR<LeaveApprovalStepUpdateWithoutApproversInput, LeaveApprovalStepUncheckedUpdateWithoutApproversInput>
    create: XOR<LeaveApprovalStepCreateWithoutApproversInput, LeaveApprovalStepUncheckedCreateWithoutApproversInput>
    where?: LeaveApprovalStepWhereInput
  }

  export type LeaveApprovalStepUpdateToOneWithWhereWithoutApproversInput = {
    where?: LeaveApprovalStepWhereInput
    data: XOR<LeaveApprovalStepUpdateWithoutApproversInput, LeaveApprovalStepUncheckedUpdateWithoutApproversInput>
  }

  export type LeaveApprovalStepUpdateWithoutApproversInput = {
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaveRequest?: LeaveRequestUpdateOneRequiredWithoutApprovalStepsNestedInput
  }

  export type LeaveApprovalStepUncheckedUpdateWithoutApproversInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveRequestId?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmployeeUpsertWithoutLeaveApprovalStepsInput = {
    update: XOR<EmployeeUpdateWithoutLeaveApprovalStepsInput, EmployeeUncheckedUpdateWithoutLeaveApprovalStepsInput>
    create: XOR<EmployeeCreateWithoutLeaveApprovalStepsInput, EmployeeUncheckedCreateWithoutLeaveApprovalStepsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutLeaveApprovalStepsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutLeaveApprovalStepsInput, EmployeeUncheckedUpdateWithoutLeaveApprovalStepsInput>
  }

  export type EmployeeUpdateWithoutLeaveApprovalStepsInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutLeaveApprovalStepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutAttendanceInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    KPIEmployee?: KPIEmployeeCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutAttendanceInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    KPIEmployee?: KPIEmployeeUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutAttendanceInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutAttendanceInput, EmployeeUncheckedCreateWithoutAttendanceInput>
  }

  export type EmployeeUpsertWithoutAttendanceInput = {
    update: XOR<EmployeeUpdateWithoutAttendanceInput, EmployeeUncheckedUpdateWithoutAttendanceInput>
    create: XOR<EmployeeCreateWithoutAttendanceInput, EmployeeUncheckedCreateWithoutAttendanceInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutAttendanceInput, EmployeeUncheckedUpdateWithoutAttendanceInput>
  }

  export type EmployeeUpdateWithoutAttendanceInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutAttendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type KPIEmployeeCreateWithoutKpiInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutKPIEmployeeInput
    entries?: KPIEntryCreateNestedManyWithoutKpiEmployeeInput
  }

  export type KPIEmployeeUncheckedCreateWithoutKpiInput = {
    id?: number
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: KPIEntryUncheckedCreateNestedManyWithoutKpiEmployeeInput
  }

  export type KPIEmployeeCreateOrConnectWithoutKpiInput = {
    where: KPIEmployeeWhereUniqueInput
    create: XOR<KPIEmployeeCreateWithoutKpiInput, KPIEmployeeUncheckedCreateWithoutKpiInput>
  }

  export type KPIEmployeeCreateManyKpiInputEnvelope = {
    data: KPIEmployeeCreateManyKpiInput | KPIEmployeeCreateManyKpiInput[]
    skipDuplicates?: boolean
  }

  export type KPIEmployeeUpsertWithWhereUniqueWithoutKpiInput = {
    where: KPIEmployeeWhereUniqueInput
    update: XOR<KPIEmployeeUpdateWithoutKpiInput, KPIEmployeeUncheckedUpdateWithoutKpiInput>
    create: XOR<KPIEmployeeCreateWithoutKpiInput, KPIEmployeeUncheckedCreateWithoutKpiInput>
  }

  export type KPIEmployeeUpdateWithWhereUniqueWithoutKpiInput = {
    where: KPIEmployeeWhereUniqueInput
    data: XOR<KPIEmployeeUpdateWithoutKpiInput, KPIEmployeeUncheckedUpdateWithoutKpiInput>
  }

  export type KPIEmployeeUpdateManyWithWhereWithoutKpiInput = {
    where: KPIEmployeeScalarWhereInput
    data: XOR<KPIEmployeeUpdateManyMutationInput, KPIEmployeeUncheckedUpdateManyWithoutKpiInput>
  }

  export type KPICreateWithoutKpiEmployeesInput = {
    name: string
    period: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIUncheckedCreateWithoutKpiEmployeesInput = {
    id?: number
    name: string
    period: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPICreateOrConnectWithoutKpiEmployeesInput = {
    where: KPIWhereUniqueInput
    create: XOR<KPICreateWithoutKpiEmployeesInput, KPIUncheckedCreateWithoutKpiEmployeesInput>
  }

  export type EmployeeCreateWithoutKPIEmployeeInput = {
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    manager?: EmployeeCreateNestedOneWithoutSubordinatesInput
    subordinates?: EmployeeCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutKPIEmployeeInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
    managerId?: number | null
    subordinates?: EmployeeUncheckedCreateNestedManyWithoutManagerInput
    departmentHeadOf?: DepartmentUncheckedCreateNestedOneWithoutHeadInput
    departmentDirectorOf?: DepartmentUncheckedCreateNestedOneWithoutDirectorInput
    workInfo?: WorkInfoUncheckedCreateNestedOneWithoutEmployeeInput
    personalInfo?: PersonalInfoUncheckedCreateNestedOneWithoutEmployeeInput
    contactInfo?: ContactInfoUncheckedCreateNestedOneWithoutEmployeeInput
    otherInfo?: OtherInfoUncheckedCreateNestedOneWithoutEmployeeInput
    LeaveRequest?: LeaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedCreateNestedManyWithoutApproverInput
    Attendance?: AttendanceUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutKPIEmployeeInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutKPIEmployeeInput, EmployeeUncheckedCreateWithoutKPIEmployeeInput>
  }

  export type KPIEntryCreateWithoutKpiEmployeeInput = {
    name: string
    targetValue: number
    achievedValue?: number
    isAchieved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIEntryUncheckedCreateWithoutKpiEmployeeInput = {
    id?: number
    name: string
    targetValue: number
    achievedValue?: number
    isAchieved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIEntryCreateOrConnectWithoutKpiEmployeeInput = {
    where: KPIEntryWhereUniqueInput
    create: XOR<KPIEntryCreateWithoutKpiEmployeeInput, KPIEntryUncheckedCreateWithoutKpiEmployeeInput>
  }

  export type KPIEntryCreateManyKpiEmployeeInputEnvelope = {
    data: KPIEntryCreateManyKpiEmployeeInput | KPIEntryCreateManyKpiEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type KPIUpsertWithoutKpiEmployeesInput = {
    update: XOR<KPIUpdateWithoutKpiEmployeesInput, KPIUncheckedUpdateWithoutKpiEmployeesInput>
    create: XOR<KPICreateWithoutKpiEmployeesInput, KPIUncheckedCreateWithoutKpiEmployeesInput>
    where?: KPIWhereInput
  }

  export type KPIUpdateToOneWithWhereWithoutKpiEmployeesInput = {
    where?: KPIWhereInput
    data: XOR<KPIUpdateWithoutKpiEmployeesInput, KPIUncheckedUpdateWithoutKpiEmployeesInput>
  }

  export type KPIUpdateWithoutKpiEmployeesInput = {
    name?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIUncheckedUpdateWithoutKpiEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpsertWithoutKPIEmployeeInput = {
    update: XOR<EmployeeUpdateWithoutKPIEmployeeInput, EmployeeUncheckedUpdateWithoutKPIEmployeeInput>
    create: XOR<EmployeeCreateWithoutKPIEmployeeInput, EmployeeUncheckedCreateWithoutKPIEmployeeInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutKPIEmployeeInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutKPIEmployeeInput, EmployeeUncheckedUpdateWithoutKPIEmployeeInput>
  }

  export type EmployeeUpdateWithoutKPIEmployeeInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    manager?: EmployeeUpdateOneWithoutSubordinatesNestedInput
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutKPIEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    managerId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type KPIEntryUpsertWithWhereUniqueWithoutKpiEmployeeInput = {
    where: KPIEntryWhereUniqueInput
    update: XOR<KPIEntryUpdateWithoutKpiEmployeeInput, KPIEntryUncheckedUpdateWithoutKpiEmployeeInput>
    create: XOR<KPIEntryCreateWithoutKpiEmployeeInput, KPIEntryUncheckedCreateWithoutKpiEmployeeInput>
  }

  export type KPIEntryUpdateWithWhereUniqueWithoutKpiEmployeeInput = {
    where: KPIEntryWhereUniqueInput
    data: XOR<KPIEntryUpdateWithoutKpiEmployeeInput, KPIEntryUncheckedUpdateWithoutKpiEmployeeInput>
  }

  export type KPIEntryUpdateManyWithWhereWithoutKpiEmployeeInput = {
    where: KPIEntryScalarWhereInput
    data: XOR<KPIEntryUpdateManyMutationInput, KPIEntryUncheckedUpdateManyWithoutKpiEmployeeInput>
  }

  export type KPIEntryScalarWhereInput = {
    AND?: KPIEntryScalarWhereInput | KPIEntryScalarWhereInput[]
    OR?: KPIEntryScalarWhereInput[]
    NOT?: KPIEntryScalarWhereInput | KPIEntryScalarWhereInput[]
    id?: IntFilter<"KPIEntry"> | number
    kpiEmployeeId?: IntFilter<"KPIEntry"> | number
    name?: StringFilter<"KPIEntry"> | string
    targetValue?: FloatFilter<"KPIEntry"> | number
    achievedValue?: FloatFilter<"KPIEntry"> | number
    isAchieved?: BoolFilter<"KPIEntry"> | boolean
    createdAt?: DateTimeFilter<"KPIEntry"> | Date | string
    updatedAt?: DateTimeFilter<"KPIEntry"> | Date | string
  }

  export type KPIEmployeeCreateWithoutEntriesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    kpi: KPICreateNestedOneWithoutKpiEmployeesInput
    employee: EmployeeCreateNestedOneWithoutKPIEmployeeInput
  }

  export type KPIEmployeeUncheckedCreateWithoutEntriesInput = {
    id?: number
    kpiId: number
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIEmployeeCreateOrConnectWithoutEntriesInput = {
    where: KPIEmployeeWhereUniqueInput
    create: XOR<KPIEmployeeCreateWithoutEntriesInput, KPIEmployeeUncheckedCreateWithoutEntriesInput>
  }

  export type KPIEmployeeUpsertWithoutEntriesInput = {
    update: XOR<KPIEmployeeUpdateWithoutEntriesInput, KPIEmployeeUncheckedUpdateWithoutEntriesInput>
    create: XOR<KPIEmployeeCreateWithoutEntriesInput, KPIEmployeeUncheckedCreateWithoutEntriesInput>
    where?: KPIEmployeeWhereInput
  }

  export type KPIEmployeeUpdateToOneWithWhereWithoutEntriesInput = {
    where?: KPIEmployeeWhereInput
    data: XOR<KPIEmployeeUpdateWithoutEntriesInput, KPIEmployeeUncheckedUpdateWithoutEntriesInput>
  }

  export type KPIEmployeeUpdateWithoutEntriesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpi?: KPIUpdateOneRequiredWithoutKpiEmployeesNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutKPIEmployeeNestedInput
  }

  export type KPIEmployeeUncheckedUpdateWithoutEntriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    kpiId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateManyManagerInput = {
    id?: number
    employeeCode: string
    name: string
    gender?: $Enums.Sex
    birthDate?: Date | string | null
    password: string
    role?: $Enums.Role
    avatar?: string | null
    isActive?: boolean
  }

  export type LeaveRequestCreateManyEmployeeInput = {
    id?: number
    leaveType: $Enums.LeaveTypeEnum
    startDate: Date | string
    endDate: Date | string
    totalHours?: number | null
    reason?: string | null
    status?: $Enums.LeaveStatus
    approvedBy?: string | null
    approvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type LeaveApprovalStepApproverCreateManyApproverInput = {
    id?: number
    leaveApprovalStepId: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type AttendanceCreateManyEmployeeInput = {
    id?: number
    date: Date | string
    checkInTime?: Date | string | null
    checkOutTime?: Date | string | null
  }

  export type KPIEmployeeCreateManyEmployeeInput = {
    id?: number
    kpiId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeUpdateWithoutManagerInput = {
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutManagerInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    subordinates?: EmployeeUncheckedUpdateManyWithoutManagerNestedInput
    departmentHeadOf?: DepartmentUncheckedUpdateOneWithoutHeadNestedInput
    departmentDirectorOf?: DepartmentUncheckedUpdateOneWithoutDirectorNestedInput
    workInfo?: WorkInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    personalInfo?: PersonalInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    contactInfo?: ContactInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    otherInfo?: OtherInfoUncheckedUpdateOneWithoutEmployeeNestedInput
    LeaveRequest?: LeaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    LeaveApprovalSteps?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverNestedInput
    Attendance?: AttendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    KPIEmployee?: KPIEmployeeUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutManagerInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LeaveRequestUpdateWithoutEmployeeInput = {
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalSteps?: LeaveApprovalStepUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvalSteps?: LeaveApprovalStepUncheckedUpdateManyWithoutLeaveRequestNestedInput
  }

  export type LeaveRequestUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveType?: EnumLeaveTypeEnumFieldUpdateOperationsInput | $Enums.LeaveTypeEnum
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalHours?: NullableFloatFieldUpdateOperationsInput | number | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveApprovalStepApproverUpdateWithoutApproverInput = {
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaveApprovalStep?: LeaveApprovalStepUpdateOneRequiredWithoutApproversNestedInput
  }

  export type LeaveApprovalStepApproverUncheckedUpdateWithoutApproverInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveApprovalStepId?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveApprovalStepApproverUncheckedUpdateManyWithoutApproverInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveApprovalStepId?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendanceUpdateWithoutEmployeeInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendanceUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AttendanceUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KPIEmployeeUpdateWithoutEmployeeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpi?: KPIUpdateOneRequiredWithoutKpiEmployeesNestedInput
    entries?: KPIEntryUpdateManyWithoutKpiEmployeeNestedInput
  }

  export type KPIEmployeeUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    kpiId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: KPIEntryUncheckedUpdateManyWithoutKpiEmployeeNestedInput
  }

  export type KPIEmployeeUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    kpiId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionCreateManyDepartmentInput = {
    id?: number
    name: string
    level?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkInfoCreateManyDepartmentInput = {
    id?: number
    positionId?: number | null
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    employeeId: number
  }

  export type PositionUpdateWithoutDepartmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: WorkInfoUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employees?: WorkInfoUncheckedUpdateManyWithoutPositionNestedInput
  }

  export type PositionUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkInfoUpdateWithoutDepartmentInput = {
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: PositionUpdateOneWithoutEmployeesNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutWorkInfoNestedInput
  }

  export type WorkInfoUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkInfoUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    positionId?: NullableIntFieldUpdateOperationsInput | number | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkInfoCreateManyPositionInput = {
    id?: number
    departmentId?: number | null
    specialization?: string | null
    joinedTBD?: Date | string | null
    joinedTeSCC?: Date | string | null
    seniorityStart?: Date | string | null
    seniority?: string | null
    contractNumber?: string | null
    contractDate?: Date | string | null
    contractType?: string | null
    contractEndDate?: Date | string | null
    employeeId: number
  }

  export type WorkInfoUpdateWithoutPositionInput = {
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutWorkInfosNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutWorkInfoNestedInput
  }

  export type WorkInfoUncheckedUpdateWithoutPositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkInfoUncheckedUpdateManyWithoutPositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    specialization?: NullableStringFieldUpdateOperationsInput | string | null
    joinedTBD?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    joinedTeSCC?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniorityStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seniority?: NullableStringFieldUpdateOperationsInput | string | null
    contractNumber?: NullableStringFieldUpdateOperationsInput | string | null
    contractDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: NullableStringFieldUpdateOperationsInput | string | null
    contractEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employeeId?: IntFieldUpdateOperationsInput | number
  }

  export type LeaveApprovalStepCreateManyLeaveRequestInput = {
    id?: number
    level: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type LeaveApprovalStepUpdateWithoutLeaveRequestInput = {
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvers?: LeaveApprovalStepApproverUpdateManyWithoutLeaveApprovalStepNestedInput
  }

  export type LeaveApprovalStepUncheckedUpdateWithoutLeaveRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvers?: LeaveApprovalStepApproverUncheckedUpdateManyWithoutLeaveApprovalStepNestedInput
  }

  export type LeaveApprovalStepUncheckedUpdateManyWithoutLeaveRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveApprovalStepApproverCreateManyLeaveApprovalStepInput = {
    id?: number
    approverId: number
    status?: $Enums.LeaveStatus
    approvedAt?: Date | string | null
  }

  export type LeaveApprovalStepApproverUpdateWithoutLeaveApprovalStepInput = {
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approver?: EmployeeUpdateOneRequiredWithoutLeaveApprovalStepsNestedInput
  }

  export type LeaveApprovalStepApproverUncheckedUpdateWithoutLeaveApprovalStepInput = {
    id?: IntFieldUpdateOperationsInput | number
    approverId?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveApprovalStepApproverUncheckedUpdateManyWithoutLeaveApprovalStepInput = {
    id?: IntFieldUpdateOperationsInput | number
    approverId?: IntFieldUpdateOperationsInput | number
    status?: EnumLeaveStatusFieldUpdateOperationsInput | $Enums.LeaveStatus
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KPIEmployeeCreateManyKpiInput = {
    id?: number
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIEmployeeUpdateWithoutKpiInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutKPIEmployeeNestedInput
    entries?: KPIEntryUpdateManyWithoutKpiEmployeeNestedInput
  }

  export type KPIEmployeeUncheckedUpdateWithoutKpiInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: KPIEntryUncheckedUpdateManyWithoutKpiEmployeeNestedInput
  }

  export type KPIEmployeeUncheckedUpdateManyWithoutKpiInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIEntryCreateManyKpiEmployeeInput = {
    id?: number
    name: string
    targetValue: number
    achievedValue?: number
    isAchieved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIEntryUpdateWithoutKpiEmployeeInput = {
    name?: StringFieldUpdateOperationsInput | string
    targetValue?: FloatFieldUpdateOperationsInput | number
    achievedValue?: FloatFieldUpdateOperationsInput | number
    isAchieved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIEntryUncheckedUpdateWithoutKpiEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    targetValue?: FloatFieldUpdateOperationsInput | number
    achievedValue?: FloatFieldUpdateOperationsInput | number
    isAchieved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIEntryUncheckedUpdateManyWithoutKpiEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    targetValue?: FloatFieldUpdateOperationsInput | number
    achievedValue?: FloatFieldUpdateOperationsInput | number
    isAchieved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}